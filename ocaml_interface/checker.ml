
type __ = Obj.t
let __ = let rec f _ = Obj.repr f in Obj.repr f

(** val xorb : bool -> bool -> bool **)

let xorb b1 b2 =
  if b1 then if b2 then false else true else b2

(** val negb : bool -> bool **)

let negb = function
| true -> false
| false -> true

type nat =
| O
| S of nat

(** val fst : ('a1 * 'a2) -> 'a1 **)

let fst = function
| x , _ -> x

(** val snd : ('a1 * 'a2) -> 'a2 **)

let snd = function
| _ , y -> y

(** val length : 'a1 list -> nat **)

let rec length = function
| [] -> O
| _::l' -> S (length l')

(** val app : 'a1 list -> 'a1 list -> 'a1 list **)

let rec app l m =
  match l with
  | [] -> m
  | a::l1 -> a::(app l1 m)

type comparison =
| Eq
| Lt
| Gt

(** val id : 'a1 -> 'a1 **)

let id x =
  x

type uint =
| Nil
| D0 of uint
| D1 of uint
| D2 of uint
| D3 of uint
| D4 of uint
| D5 of uint
| D6 of uint
| D7 of uint
| D8 of uint
| D9 of uint
| Da of uint
| Db of uint
| Dc of uint
| Dd of uint
| De of uint
| Df of uint

(** val pred : nat -> nat **)

let pred n0 = match n0 with
| O -> n0
| S u -> u

module Coq__1 = struct
 (** val add : nat -> nat -> nat **)
 let rec add n0 m =
   match n0 with
   | O -> m
   | S p -> S (add p m)
end
include Coq__1

(** val mul : nat -> nat -> nat **)

let rec mul n0 m =
  match n0 with
  | O -> O
  | S p -> add m (mul p m)

(** val sub : nat -> nat -> nat **)

let rec sub n0 m =
  match n0 with
  | O -> n0
  | S k -> (match m with
            | O -> n0
            | S l -> sub k l)

(** val eqb : nat -> nat -> bool **)

let rec eqb n0 m =
  match n0 with
  | O -> (match m with
          | O -> true
          | S _ -> false)
  | S n' -> (match m with
             | O -> false
             | S m' -> eqb n' m')

(** val leb : nat -> nat -> bool **)

let rec leb n0 m =
  match n0 with
  | O -> true
  | S n' -> (match m with
             | O -> false
             | S m' -> leb n' m')

(** val ltb : nat -> nat -> bool **)

let ltb n0 m =
  leb (S n0) m

(** val max : nat -> nat -> nat **)

let rec max n0 m =
  match n0 with
  | O -> m
  | S n' -> (match m with
             | O -> n0
             | S m' -> S (max n' m'))

(** val eqb0 : bool -> bool -> bool **)

let eqb0 b1 b2 =
  if b1 then b2 else if b2 then false else true

module Nat =
 struct
  (** val add : nat -> nat -> nat **)

  let rec add n0 m =
    match n0 with
    | O -> m
    | S p -> S (add p m)

  (** val leb : nat -> nat -> bool **)

  let rec leb n0 m =
    match n0 with
    | O -> true
    | S n' -> (match m with
               | O -> false
               | S m' -> leb n' m')

  (** val div2 : nat -> nat **)

  let rec div2 = function
  | O -> O
  | S n1 -> (match n1 with
             | O -> O
             | S n' -> S (div2 n'))
 end

type positive =
| XI of positive
| XO of positive
| XH

type n =
| N0
| Npos of positive

module Pos =
 struct
  type mask =
  | IsNul
  | IsPos of positive
  | IsNeg
 end

module Coq_Pos =
 struct
  (** val succ : positive -> positive **)

  let rec succ = function
  | XI p -> XO (succ p)
  | XO p -> XI p
  | XH -> XO XH

  (** val add : positive -> positive -> positive **)

  let rec add x y =
    match x with
    | XI p ->
      (match y with
       | XI q -> XO (add_carry p q)
       | XO q -> XI (add p q)
       | XH -> XO (succ p))
    | XO p ->
      (match y with
       | XI q -> XI (add p q)
       | XO q -> XO (add p q)
       | XH -> XI p)
    | XH -> (match y with
             | XI q -> XO (succ q)
             | XO q -> XI q
             | XH -> XO XH)

  (** val add_carry : positive -> positive -> positive **)

  and add_carry x y =
    match x with
    | XI p ->
      (match y with
       | XI q -> XI (add_carry p q)
       | XO q -> XO (add_carry p q)
       | XH -> XI (succ p))
    | XO p ->
      (match y with
       | XI q -> XO (add_carry p q)
       | XO q -> XI (add p q)
       | XH -> XO (succ p))
    | XH ->
      (match y with
       | XI q -> XI (succ q)
       | XO q -> XO (succ q)
       | XH -> XI XH)

  (** val pred_double : positive -> positive **)

  let rec pred_double = function
  | XI p -> XI (XO p)
  | XO p -> XI (pred_double p)
  | XH -> XH

  type mask = Pos.mask =
  | IsNul
  | IsPos of positive
  | IsNeg

  (** val succ_double_mask : mask -> mask **)

  let succ_double_mask = function
  | IsNul -> IsPos XH
  | IsPos p -> IsPos (XI p)
  | IsNeg -> IsNeg

  (** val double_mask : mask -> mask **)

  let double_mask = function
  | IsPos p -> IsPos (XO p)
  | x0 -> x0

  (** val double_pred_mask : positive -> mask **)

  let double_pred_mask = function
  | XI p -> IsPos (XO (XO p))
  | XO p -> IsPos (XO (pred_double p))
  | XH -> IsNul

  (** val sub_mask : positive -> positive -> mask **)

  let rec sub_mask x y =
    match x with
    | XI p ->
      (match y with
       | XI q -> double_mask (sub_mask p q)
       | XO q -> succ_double_mask (sub_mask p q)
       | XH -> IsPos (XO p))
    | XO p ->
      (match y with
       | XI q -> succ_double_mask (sub_mask_carry p q)
       | XO q -> double_mask (sub_mask p q)
       | XH -> IsPos (pred_double p))
    | XH -> (match y with
             | XH -> IsNul
             | _ -> IsNeg)

  (** val sub_mask_carry : positive -> positive -> mask **)

  and sub_mask_carry x y =
    match x with
    | XI p ->
      (match y with
       | XI q -> succ_double_mask (sub_mask_carry p q)
       | XO q -> double_mask (sub_mask p q)
       | XH -> IsPos (pred_double p))
    | XO p ->
      (match y with
       | XI q -> double_mask (sub_mask_carry p q)
       | XO q -> succ_double_mask (sub_mask_carry p q)
       | XH -> double_pred_mask p)
    | XH -> IsNeg

  (** val mul : positive -> positive -> positive **)

  let rec mul x y =
    match x with
    | XI p -> add y (XO (mul p y))
    | XO p -> XO (mul p y)
    | XH -> y

  (** val iter : ('a1 -> 'a1) -> 'a1 -> positive -> 'a1 **)

  let rec iter f x = function
  | XI n' -> f (iter f (iter f x n') n')
  | XO n' -> iter f (iter f x n') n'
  | XH -> f x

  (** val pow : positive -> positive -> positive **)

  let pow x =
    iter (mul x) XH

  (** val compare_cont : comparison -> positive -> positive -> comparison **)

  let rec compare_cont r x y =
    match x with
    | XI p ->
      (match y with
       | XI q -> compare_cont r p q
       | XO q -> compare_cont Gt p q
       | XH -> Gt)
    | XO p ->
      (match y with
       | XI q -> compare_cont Lt p q
       | XO q -> compare_cont r p q
       | XH -> Gt)
    | XH -> (match y with
             | XH -> r
             | _ -> Lt)

  (** val compare : positive -> positive -> comparison **)

  let compare =
    compare_cont Eq

  (** val eqb : positive -> positive -> bool **)

  let rec eqb p q =
    match p with
    | XI p0 -> (match q with
                | XI q0 -> eqb p0 q0
                | _ -> false)
    | XO p0 -> (match q with
                | XO q0 -> eqb p0 q0
                | _ -> false)
    | XH -> (match q with
             | XH -> true
             | _ -> false)

  (** val iter_op : ('a1 -> 'a1 -> 'a1) -> positive -> 'a1 -> 'a1 **)

  let rec iter_op op p a =
    match p with
    | XI p0 -> op a (iter_op op p0 (op a a))
    | XO p0 -> iter_op op p0 (op a a)
    | XH -> a

  (** val to_nat : positive -> nat **)

  let to_nat x =
    iter_op Coq__1.add x (S O)

  (** val of_succ_nat : nat -> positive **)

  let rec of_succ_nat = function
  | O -> XH
  | S x -> succ (of_succ_nat x)
 end

module N =
 struct
  (** val succ_double : n -> n **)

  let succ_double = function
  | N0 -> Npos XH
  | Npos p -> Npos (XI p)

  (** val double : n -> n **)

  let double = function
  | N0 -> N0
  | Npos p -> Npos (XO p)

  (** val succ : n -> n **)

  let succ = function
  | N0 -> Npos XH
  | Npos p -> Npos (Coq_Pos.succ p)

  (** val add : n -> n -> n **)

  let add n0 m =
    match n0 with
    | N0 -> m
    | Npos p -> (match m with
                 | N0 -> n0
                 | Npos q -> Npos (Coq_Pos.add p q))

  (** val sub : n -> n -> n **)

  let sub n0 m =
    match n0 with
    | N0 -> N0
    | Npos n' ->
      (match m with
       | N0 -> n0
       | Npos m' ->
         (match Coq_Pos.sub_mask n' m' with
          | Coq_Pos.IsPos p -> Npos p
          | _ -> N0))

  (** val mul : n -> n -> n **)

  let mul n0 m =
    match n0 with
    | N0 -> N0
    | Npos p -> (match m with
                 | N0 -> N0
                 | Npos q -> Npos (Coq_Pos.mul p q))

  (** val compare : n -> n -> comparison **)

  let compare n0 m =
    match n0 with
    | N0 -> (match m with
             | N0 -> Eq
             | Npos _ -> Lt)
    | Npos n' -> (match m with
                  | N0 -> Gt
                  | Npos m' -> Coq_Pos.compare n' m')

  (** val eqb : n -> n -> bool **)

  let eqb n0 m =
    match n0 with
    | N0 -> (match m with
             | N0 -> true
             | Npos _ -> false)
    | Npos p -> (match m with
                 | N0 -> false
                 | Npos q -> Coq_Pos.eqb p q)

  (** val leb : n -> n -> bool **)

  let leb x y =
    match compare x y with
    | Gt -> false
    | _ -> true

  (** val ltb : n -> n -> bool **)

  let ltb x y =
    match compare x y with
    | Lt -> true
    | _ -> false

  (** val pow : n -> n -> n **)

  let pow n0 = function
  | N0 -> Npos XH
  | Npos p0 -> (match n0 with
                | N0 -> N0
                | Npos q -> Npos (Coq_Pos.pow q p0))

  (** val pos_div_eucl : positive -> n -> n * n **)

  let rec pos_div_eucl a b =
    match a with
    | XI a' ->
      let q , r = pos_div_eucl a' b in
      let r' = succ_double r in
      if leb b r' then (succ_double q) , (sub r' b) else (double q) , r'
    | XO a' ->
      let q , r = pos_div_eucl a' b in
      let r' = double r in
      if leb b r' then (succ_double q) , (sub r' b) else (double q) , r'
    | XH ->
      (match b with
       | N0 -> N0 , (Npos XH)
       | Npos p -> (match p with
                    | XH -> (Npos XH) , N0
                    | _ -> N0 , (Npos XH)))

  (** val div_eucl : n -> n -> n * n **)

  let div_eucl a b =
    match a with
    | N0 -> N0 , N0
    | Npos na -> (match b with
                  | N0 -> N0 , a
                  | Npos _ -> pos_div_eucl na b)

  (** val div : n -> n -> n **)

  let div a b =
    fst (div_eucl a b)

  (** val modulo : n -> n -> n **)

  let modulo a b =
    snd (div_eucl a b)

  (** val to_nat : n -> nat **)

  let to_nat = function
  | N0 -> O
  | Npos p -> Coq_Pos.to_nat p

  (** val of_nat : nat -> n **)

  let of_nat = function
  | O -> N0
  | S n' -> Npos (Coq_Pos.of_succ_nat n')
 end

(** val nth_error : 'a1 list -> nat -> 'a1 option **)

let rec nth_error l = function
| O -> (match l with
        | [] -> None
        | x::_ -> Some x)
| S n1 -> (match l with
           | [] -> None
           | _::l0 -> nth_error l0 n1)

(** val rev : 'a1 list -> 'a1 list **)

let rec rev = function
| [] -> []
| x::l' -> app (rev l') (x::[])

(** val map : ('a1 -> 'a2) -> 'a1 list -> 'a2 list **)

let rec map f = function
| [] -> []
| a::t -> (f a)::(map f t)

(** val fold_right : ('a2 -> 'a1 -> 'a1) -> 'a1 -> 'a2 list -> 'a1 **)

let rec fold_right f a0 = function
| [] -> a0
| b::t -> f b (fold_right f a0 t)

(** val firstn : nat -> 'a1 list -> 'a1 list **)

let rec firstn n0 l =
  match n0 with
  | O -> []
  | S n1 -> (match l with
             | [] -> []
             | a::l0 -> a::(firstn n1 l0))

(** val skipn : nat -> 'a1 list -> 'a1 list **)

let rec skipn n0 l =
  match n0 with
  | O -> l
  | S n1 -> (match l with
             | [] -> []
             | _::l0 -> skipn n1 l0)

(** val seq : nat -> nat -> nat list **)

let rec seq start = function
| O -> []
| S len0 -> start::(seq (S start) len0)

(** val n_of_digits : bool list -> n **)

let rec n_of_digits = function
| [] -> N0
| b::l' ->
  N.add (if b then Npos XH else N0) (N.mul (Npos (XO XH)) (n_of_digits l'))

(** val n_of_ascii : char -> n **)

let n_of_ascii a =
  (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
    (fun a0 a1 a2 a3 a4 a5 a6 a7 ->
    n_of_digits (a0::(a1::(a2::(a3::(a4::(a5::(a6::(a7::[])))))))))
    a

(** val nat_of_ascii : char -> nat **)

let nat_of_ascii a =
  N.to_nat (n_of_ascii a)

(** val mod2 : nat -> bool **)

let rec mod2 = function
| O -> false
| S n1 -> (match n1 with
           | O -> true
           | S n' -> mod2 n')

(** val npow2 : nat -> n **)

let rec npow2 = function
| O -> Npos XH
| S n' -> N.mul (Npos (XO XH)) (npow2 n')

(** val nat_cast : nat -> nat -> 'a1 -> 'a1 **)

let rec nat_cast n0 m x =
  match n0 with
  | O -> (match m with
          | O -> id x
          | S _ -> assert false (* absurd case *))
  | S n1 ->
    (match m with
     | O -> assert false (* absurd case *)
     | S m0 -> nat_cast n1 m0 x)

type word =
| WO
| WS of bool * nat * word

(** val wordToNat : nat -> word -> nat **)

let rec wordToNat _ = function
| WO -> O
| WS (b, n0, w') ->
  if b
  then S (mul (wordToNat n0 w') (S (S O)))
  else mul (wordToNat n0 w') (S (S O))

(** val natToWord : nat -> nat -> word **)

let rec natToWord sz n0 =
  match sz with
  | O -> WO
  | S sz' -> WS ((mod2 n0), sz', (natToWord sz' (Nat.div2 n0)))

(** val wordToN : nat -> word -> n **)

let rec wordToN _ = function
| WO -> N0
| WS (b, n0, w') ->
  if b
  then N.succ (N.mul (Npos (XO XH)) (wordToN n0 w'))
  else N.mul (Npos (XO XH)) (wordToN n0 w')

(** val wzero : nat -> word **)

let wzero sz =
  natToWord sz O

(** val wzero' : nat -> word **)

let rec wzero' = function
| O -> WO
| S sz' -> WS (false, sz', (wzero' sz'))

(** val posToWord : nat -> positive -> word **)

let rec posToWord sz p =
  match sz with
  | O -> WO
  | S sz' ->
    (match p with
     | XI p' -> WS (true, sz', (posToWord sz' p'))
     | XO p' -> WS (false, sz', (posToWord sz' p'))
     | XH -> WS (true, sz', (wzero' sz')))

(** val nToWord : nat -> n -> word **)

let nToWord sz = function
| N0 -> wzero' sz
| Npos p -> posToWord sz p

(** val wones : nat -> word **)

let rec wones = function
| O -> WO
| S sz' -> WS (true, sz', (wones sz'))

(** val whd : nat -> word -> bool **)

let whd _ = function
| WO -> Obj.magic ()
| WS (b, _, _) -> b

(** val wtl : nat -> word -> word **)

let wtl _ = function
| WO -> Obj.magic ()
| WS (_, _, w') -> w'

(** val weqb : nat -> word -> word -> bool **)

let rec weqb _ x x0 =
  match x with
  | WO -> true
  | WS (b, n0, x') ->
    if eqb0 b (whd n0 x0) then weqb n0 x' (wtl n0 x0) else false

(** val combine : nat -> word -> nat -> word -> word **)

let rec combine _ w sz2 w' =
  match w with
  | WO -> w'
  | WS (b, n0, w'0) -> WS (b, (add n0 sz2), (combine n0 w'0 sz2 w'))

(** val split1 : nat -> nat -> word -> word **)

let rec split1 sz1 sz2 x =
  match sz1 with
  | O -> WO
  | S sz1' ->
    WS
      ((whd
         (let rec add0 n0 m =
            match n0 with
            | O -> m
            | S p -> S (add0 p m)
          in add0 sz1' sz2) x), sz1',
      (split1 sz1' sz2
        (wtl
          (let rec add0 n0 m =
             match n0 with
             | O -> m
             | S p -> S (add0 p m)
           in add0 sz1' sz2) x)))

(** val zext : nat -> word -> nat -> word **)

let zext sz w sz' =
  combine sz w sz' (wzero sz')

(** val wneg : nat -> word -> word **)

let wneg sz x =
  nToWord sz (N.sub (npow2 sz) (wordToN sz x))

(** val wordBin : (n -> n -> n) -> nat -> word -> word -> word **)

let wordBin f sz x y =
  nToWord sz (f (wordToN sz x) (wordToN sz y))

(** val wplus : nat -> word -> word -> word **)

let wplus =
  wordBin N.add

(** val wmult : nat -> word -> word -> word **)

let wmult =
  wordBin N.mul

(** val wdiv : nat -> word -> word -> word **)

let wdiv =
  wordBin N.div

(** val wmod : nat -> word -> word -> word **)

let wmod =
  wordBin N.modulo

(** val wminus : nat -> word -> word -> word **)

let wminus sz x y =
  wplus sz x (wneg sz y)

(** val wnot : nat -> word -> word **)

let rec wnot _ = function
| WO -> WO
| WS (b, n0, w') -> WS ((negb b), n0, (wnot n0 w'))

(** val bitwp : (bool -> bool -> bool) -> nat -> word -> word -> word **)

let rec bitwp f _ w1 x =
  match w1 with
  | WO -> WO
  | WS (b, n0, w1') -> WS ((f b (whd n0 x)), n0, (bitwp f n0 w1' (wtl n0 x)))

(** val wor : nat -> word -> word -> word **)

let wor =
  bitwp (||)

(** val wand : nat -> word -> word -> word **)

let wand =
  bitwp (&&)

(** val wxor : nat -> word -> word -> word **)

let wxor =
  bitwp xorb

(** val wlshift' : nat -> word -> nat -> word **)

let wlshift' sz w n0 =
  split1 sz n0
    (nat_cast (Nat.add n0 sz) (add sz n0) (combine n0 (wzero n0) sz w))

module Program =
 struct
  type stack_op_instr =
  | ADD
  | MUL
  | SUB
  | DIV
  | SDIV
  | MOD
  | SMOD
  | ADDMOD
  | MULMOD
  | EXP
  | SIGNEXTEND
  | LT
  | GT
  | SLT
  | SGT
  | EQ
  | ISZERO
  | AND
  | OR
  | XOR
  | NOT
  | BYTE
  | SHL
  | SHR
  | SAR
  | ADDRESS
  | BALANCE
  | ORIGIN
  | CALLER
  | CALLVALUE
  | CALLDATALOAD
  | CALLDATASIZE
  | CODESIZE
  | GASPRICE
  | EXTCODESIZE
  | RETURNDATASIZE
  | EXTCODEHASH
  | BLOCKHASH
  | COINBASE
  | TIMESTAMP
  | NUMBER
  | DIFFICULTY
  | GASLIMIT
  | CHAINID
  | SELFBALANCE
  | BASEFEE
  | GAS
  | JUMPI

  (** val eqb_stack_op_instr : stack_op_instr -> stack_op_instr -> bool **)

  let eqb_stack_op_instr a b =
    match a with
    | ADD -> (match b with
              | ADD -> true
              | _ -> false)
    | MUL -> (match b with
              | MUL -> true
              | _ -> false)
    | SUB -> (match b with
              | SUB -> true
              | _ -> false)
    | DIV -> (match b with
              | DIV -> true
              | _ -> false)
    | SDIV -> (match b with
               | SDIV -> true
               | _ -> false)
    | MOD -> (match b with
              | MOD -> true
              | _ -> false)
    | SMOD -> (match b with
               | SMOD -> true
               | _ -> false)
    | ADDMOD -> (match b with
                 | ADDMOD -> true
                 | _ -> false)
    | MULMOD -> (match b with
                 | MULMOD -> true
                 | _ -> false)
    | EXP -> (match b with
              | EXP -> true
              | _ -> false)
    | SIGNEXTEND -> (match b with
                     | SIGNEXTEND -> true
                     | _ -> false)
    | LT -> (match b with
             | LT -> true
             | _ -> false)
    | GT -> (match b with
             | GT -> true
             | _ -> false)
    | SLT -> (match b with
              | SLT -> true
              | _ -> false)
    | SGT -> (match b with
              | SGT -> true
              | _ -> false)
    | EQ -> (match b with
             | EQ -> true
             | _ -> false)
    | ISZERO -> (match b with
                 | ISZERO -> true
                 | _ -> false)
    | AND -> (match b with
              | AND -> true
              | _ -> false)
    | OR -> (match b with
             | OR -> true
             | _ -> false)
    | XOR -> (match b with
              | XOR -> true
              | _ -> false)
    | NOT -> (match b with
              | NOT -> true
              | _ -> false)
    | BYTE -> (match b with
               | BYTE -> true
               | _ -> false)
    | SHL -> (match b with
              | SHL -> true
              | _ -> false)
    | SHR -> (match b with
              | SHR -> true
              | _ -> false)
    | SAR -> (match b with
              | SAR -> true
              | _ -> false)
    | ADDRESS -> (match b with
                  | ADDRESS -> true
                  | _ -> false)
    | BALANCE -> (match b with
                  | BALANCE -> true
                  | _ -> false)
    | ORIGIN -> (match b with
                 | ORIGIN -> true
                 | _ -> false)
    | CALLER -> (match b with
                 | CALLER -> true
                 | _ -> false)
    | CALLVALUE -> (match b with
                    | CALLVALUE -> true
                    | _ -> false)
    | CALLDATALOAD -> (match b with
                       | CALLDATALOAD -> true
                       | _ -> false)
    | CALLDATASIZE -> (match b with
                       | CALLDATASIZE -> true
                       | _ -> false)
    | CODESIZE -> (match b with
                   | CODESIZE -> true
                   | _ -> false)
    | GASPRICE -> (match b with
                   | GASPRICE -> true
                   | _ -> false)
    | EXTCODESIZE -> (match b with
                      | EXTCODESIZE -> true
                      | _ -> false)
    | RETURNDATASIZE -> (match b with
                         | RETURNDATASIZE -> true
                         | _ -> false)
    | EXTCODEHASH -> (match b with
                      | EXTCODEHASH -> true
                      | _ -> false)
    | BLOCKHASH -> (match b with
                    | BLOCKHASH -> true
                    | _ -> false)
    | COINBASE -> (match b with
                   | COINBASE -> true
                   | _ -> false)
    | TIMESTAMP -> (match b with
                    | TIMESTAMP -> true
                    | _ -> false)
    | NUMBER -> (match b with
                 | NUMBER -> true
                 | _ -> false)
    | DIFFICULTY -> (match b with
                     | DIFFICULTY -> true
                     | _ -> false)
    | GASLIMIT -> (match b with
                   | GASLIMIT -> true
                   | _ -> false)
    | CHAINID -> (match b with
                  | CHAINID -> true
                  | _ -> false)
    | SELFBALANCE -> (match b with
                      | SELFBALANCE -> true
                      | _ -> false)
    | BASEFEE -> (match b with
                  | BASEFEE -> true
                  | _ -> false)
    | GAS -> (match b with
              | GAS -> true
              | _ -> false)
    | JUMPI -> (match b with
                | JUMPI -> true
                | _ -> false)

  type instr =
  | PUSH of nat * n
  | METAPUSH of n * n
  | POP
  | DUP of nat
  | SWAP of nat
  | MLOAD
  | MSTORE
  | MSTORE8
  | SLOAD
  | SSTORE
  | SHA3
  | KECCAK256
  | OpInstr of stack_op_instr

  type block = instr list
 end

module Constants =
 struct
  (** val coq_EVMByteSize : nat **)

  let coq_EVMByteSize =
    S (S (S (S (S (S (S (S O)))))))

  (** val coq_BytesInEVMWord : nat **)

  let coq_BytesInEVMWord =
    S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S O)))))))))))))))))))))))))))))))

  (** val coq_EVMWordSize : nat **)

  let coq_EVMWordSize =
    mul coq_BytesInEVMWord coq_EVMByteSize

  type coq_EVMWord = word

  (** val coq_ByteInEVMAddr : nat **)

  let coq_ByteInEVMAddr =
    S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      O)))))))))))))))))))

  (** val coq_EVMAddrSize : nat **)

  let coq_EVMAddrSize =
    mul coq_ByteInEVMAddr coq_EVMByteSize

  type coq_EVMAddr = word

  (** val coq_WZero : coq_EVMWord **)

  let coq_WZero =
    natToWord coq_EVMWordSize O

  (** val coq_WOne : coq_EVMWord **)

  let coq_WOne =
    natToWord coq_EVMWordSize (S O)

  (** val coq_AZero : coq_EVMAddr **)

  let coq_AZero =
    natToWord coq_EVMAddrSize O

  (** val coq_StackSize : nat **)

  let coq_StackSize =
    S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
      (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S

 end

module ExecutionState =
 struct
  type code_info =
  | CodeInfo of nat * word * Constants.coq_EVMWord

  type block_info =
  | BlockInfo of nat * word * Constants.coq_EVMWord * Constants.coq_EVMWord

  type chunk =
  | Chunk of nat * word

  type context =
  | Ctx of Constants.coq_EVMAddr
     * (Constants.coq_EVMAddr -> Constants.coq_EVMWord)
     * Constants.coq_EVMAddr * Constants.coq_EVMAddr * Constants.coq_EVMWord
     * chunk * (Constants.coq_EVMAddr -> code_info) * Constants.coq_EVMWord
     * chunk * (Constants.coq_EVMWord -> block_info) * Constants.coq_EVMAddr
     * Constants.coq_EVMWord * Constants.coq_EVMWord * Constants.coq_EVMWord
     * Constants.coq_EVMWord * (nat -> word -> Constants.coq_EVMWord)
     * (n -> n -> Constants.coq_EVMWord) * nat * nat * nat * nat

  (** val empty_context : context **)

  let empty_context =
    Ctx (Constants.coq_AZero, (fun _ -> Constants.coq_WZero),
      Constants.coq_AZero, Constants.coq_AZero, Constants.coq_WZero, (Chunk
      (O, WO)), (fun _ -> CodeInfo (O, WO, Constants.coq_WZero)),
      Constants.coq_WZero, (Chunk (O, WO)), (fun _ -> BlockInfo (O, WO,
      Constants.coq_WZero, Constants.coq_WZero)), Constants.coq_AZero,
      Constants.coq_WZero, Constants.coq_WZero, Constants.coq_WZero,
      Constants.coq_WZero, (fun _ _ -> Constants.coq_WZero), (fun cat v ->
      nToWord Constants.coq_EVMWordSize (N.add cat v)), O, O, O, O)

  (** val get_address_ctx : context -> Constants.coq_EVMAddr **)

  let get_address_ctx = function
  | Ctx (x, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _) -> x

  (** val get_balance_ctx :
      context -> Constants.coq_EVMAddr -> Constants.coq_EVMWord **)

  let get_balance_ctx = function
  | Ctx (_, x, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _) -> x

  (** val get_origin_ctx : context -> Constants.coq_EVMAddr **)

  let get_origin_ctx = function
  | Ctx (_, _, x, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _) -> x

  (** val get_caller_ctx : context -> Constants.coq_EVMAddr **)

  let get_caller_ctx = function
  | Ctx (_, _, _, x, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _) -> x

  (** val get_callvalue_ctx : context -> Constants.coq_EVMWord **)

  let get_callvalue_ctx = function
  | Ctx (_, _, _, _, x, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _) -> x

  (** val get_data_ctx : context -> chunk **)

  let get_data_ctx = function
  | Ctx (_, _, _, _, _, x, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _) -> x

  (** val get_code_ctx : context -> Constants.coq_EVMAddr -> code_info **)

  let get_code_ctx = function
  | Ctx (_, _, _, _, _, _, x, _, _, _, _, _, _, _, _, _, _, _, _, _, _) -> x

  (** val get_gasprice_ctx : context -> Constants.coq_EVMWord **)

  let get_gasprice_ctx = function
  | Ctx (_, _, _, _, _, _, _, x, _, _, _, _, _, _, _, _, _, _, _, _, _) -> x

  (** val get_outdata_ctx : context -> chunk **)

  let get_outdata_ctx = function
  | Ctx (_, _, _, _, _, _, _, _, x, _, _, _, _, _, _, _, _, _, _, _, _) -> x

  (** val get_blocks_ctx : context -> Constants.coq_EVMWord -> block_info **)

  let get_blocks_ctx = function
  | Ctx (_, _, _, _, _, _, _, _, _, x, _, _, _, _, _, _, _, _, _, _, _) -> x

  (** val get_miner_ctx : context -> Constants.coq_EVMAddr **)

  let get_miner_ctx = function
  | Ctx (_, _, _, _, _, _, _, _, _, _, x, _, _, _, _, _, _, _, _, _, _) -> x

  (** val get_currblock_ctx : context -> Constants.coq_EVMWord **)

  let get_currblock_ctx = function
  | Ctx (_, _, _, _, _, _, _, _, _, _, _, x, _, _, _, _, _, _, _, _, _) -> x

  (** val get_gaslimit_ctx : context -> Constants.coq_EVMWord **)

  let get_gaslimit_ctx = function
  | Ctx (_, _, _, _, _, _, _, _, _, _, _, _, x, _, _, _, _, _, _, _, _) -> x

  (** val get_chainid_ctx : context -> Constants.coq_EVMWord **)

  let get_chainid_ctx = function
  | Ctx (_, _, _, _, _, _, _, _, _, _, _, _, _, x, _, _, _, _, _, _, _) -> x

  (** val get_basefee_ctx : context -> Constants.coq_EVMWord **)

  let get_basefee_ctx = function
  | Ctx (_, _, _, _, _, _, _, _, _, _, _, _, _, _, x, _, _, _, _, _, _) -> x
 end

module Misc =
 struct
  type ('k, 'v) map = 'k -> 'v

  (** val map_option : ('a1 -> 'a2 option) -> 'a1 list -> 'a2 list option **)

  let rec map_option f = function
  | [] -> Some []
  | elem::rs ->
    let elem_oval = f elem in
    let rs_oval = map_option f rs in
    (match elem_oval with
     | Some elem_val ->
       (match rs_oval with
        | Some rs_val -> Some (elem_val::rs_val)
        | None -> None)
     | None -> None)

  (** val fold_right_two_lists :
      ('a1 -> 'a2 -> bool) -> 'a1 list -> 'a2 list -> bool **)

  let rec fold_right_two_lists f v w =
    match v with
    | [] -> (match w with
             | [] -> true
             | _::_ -> false)
    | vh::vt ->
      (match w with
       | [] -> false
       | wh::wt -> if f vh wh then fold_right_two_lists f vt wt else false)

  (** val firstn_e : nat -> 'a1 list -> 'a1 list option **)

  let firstn_e n0 l =
    if leb n0 (length l) then Some (firstn n0 l) else None

  (** val skipn_e : nat -> 'a1 list -> 'a1 list option **)

  let skipn_e n0 l =
    if leb n0 (length l) then Some (skipn n0 l) else None

  (** val push : 'a1 -> 'a1 list -> 'a1 list option **)

  let push v stk =
    if ltb (length stk) Constants.coq_StackSize then Some (v::stk) else None

  (** val pop : 'a1 list -> 'a1 list option **)

  let pop = function
  | [] -> None
  | _::stk' -> Some stk'

  (** val dup : nat -> 'a1 list -> 'a1 list option **)

  let dup k stk =
    if (||)
         ((||) (eqb k O)
           (ltb (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
             O)))))))))))))))) k)) (leb Constants.coq_StackSize (length stk))
    then None
    else (match nth_error stk (pred k) with
          | Some x -> Some (x::stk)
          | None -> None)

  (** val swap : nat -> 'a1 list -> 'a1 list option **)

  let swap k stk =
    if (||) (eqb k O)
         (ltb (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
           O)))))))))))))))) k)
    then None
    else let o = nth_error stk k in
         (match o with
          | Some v ->
            (match stk with
             | [] -> None
             | h::t ->
               Some
                 (app (v::[])
                   (app (firstn (sub k (S O)) t)
                     (app (h::[]) (skipn (add k (S O)) stk)))))
          | None -> None)
 end

module StackOpInstrs =
 struct
  type stack_op_impl =
  | OpImp of nat
     * (ExecutionState.context -> Constants.coq_EVMWord list ->
       Constants.coq_EVMWord) * __ option * __ option

  type stack_op_instr_map = (Program.stack_op_instr, stack_op_impl) Misc.map

  (** val empty_imap : 'a1 -> (Program.stack_op_instr, 'a1) Misc.map **)

  let empty_imap def _ =
    def

  (** val updatei :
      (Program.stack_op_instr, 'a1) Misc.map -> Program.stack_op_instr -> 'a1
      -> Program.stack_op_instr -> 'a1 **)

  let updatei m x v x' =
    if Program.eqb_stack_op_instr x x' then v else m x'

  (** val evm_add :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_add _ = function
  | [] -> Constants.coq_WZero
  | a::l ->
    (match l with
     | [] -> Constants.coq_WZero
     | b::l0 ->
       (match l0 with
        | [] -> wplus Constants.coq_EVMWordSize a b
        | _::_ -> Constants.coq_WZero))

  (** val evm_mul :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_mul _ = function
  | [] -> Constants.coq_WZero
  | a::l ->
    (match l with
     | [] -> Constants.coq_WZero
     | b::l0 ->
       (match l0 with
        | [] -> wmult Constants.coq_EVMWordSize a b
        | _::_ -> Constants.coq_WZero))

  (** val evm_sub :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_sub _ = function
  | [] -> Constants.coq_WZero
  | a::l ->
    (match l with
     | [] -> Constants.coq_WZero
     | b::l0 ->
       (match l0 with
        | [] -> wminus Constants.coq_EVMWordSize a b
        | _::_ -> Constants.coq_WZero))

  (** val evm_div :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_div _ = function
  | [] -> Constants.coq_WZero
  | a::l ->
    (match l with
     | [] -> Constants.coq_WZero
     | b::l0 ->
       (match l0 with
        | [] -> wdiv Constants.coq_EVMWordSize a b
        | _::_ -> Constants.coq_WZero))

  (** val evm_sdiv :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_sdiv _ _ =
    Constants.coq_WZero

  (** val evm_mod :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_mod _ = function
  | [] -> Constants.coq_WZero
  | a::l ->
    (match l with
     | [] -> Constants.coq_WZero
     | b::l0 ->
       (match l0 with
        | [] ->
          if weqb Constants.coq_EVMWordSize b Constants.coq_WZero
          then Constants.coq_WZero
          else wmod Constants.coq_EVMWordSize a b
        | _::_ -> Constants.coq_WZero))

  (** val evm_smod :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_smod _ _ =
    Constants.coq_WZero

  (** val evm_addmod :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_addmod _ = function
  | [] -> Constants.coq_WZero
  | a::l ->
    (match l with
     | [] -> Constants.coq_WZero
     | b::l0 ->
       (match l0 with
        | [] -> Constants.coq_WZero
        | c::l1 ->
          (match l1 with
           | [] ->
             wmod Constants.coq_EVMWordSize
               (wplus Constants.coq_EVMWordSize a b) c
           | _::_ -> Constants.coq_WZero)))

  (** val evm_mulmod :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_mulmod _ = function
  | [] -> Constants.coq_WZero
  | a::l ->
    (match l with
     | [] -> Constants.coq_WZero
     | b::l0 ->
       (match l0 with
        | [] -> Constants.coq_WZero
        | c::l1 ->
          (match l1 with
           | [] ->
             wmod Constants.coq_EVMWordSize
               (wmult Constants.coq_EVMWordSize a b) c
           | _::_ -> Constants.coq_WZero)))

  (** val evm_exp :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_exp _ = function
  | [] -> Constants.coq_WZero
  | a::l ->
    (match l with
     | [] -> Constants.coq_WZero
     | b::l0 ->
       (match l0 with
        | [] -> wordBin N.pow Constants.coq_EVMWordSize a b
        | _::_ -> Constants.coq_WZero))

  (** val evm_signextend :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_signextend _ _ =
    Constants.coq_WZero

  (** val evm_lt :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_lt _ = function
  | [] -> Constants.coq_WZero
  | a::l ->
    (match l with
     | [] -> Constants.coq_WZero
     | b::l0 ->
       (match l0 with
        | [] ->
          if N.ltb (wordToN Constants.coq_EVMWordSize a)
               (wordToN Constants.coq_EVMWordSize b)
          then Constants.coq_WOne
          else Constants.coq_WZero
        | _::_ -> Constants.coq_WZero))

  (** val evm_gt :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_gt ctx = function
  | [] -> Constants.coq_WZero
  | a::l ->
    (match l with
     | [] -> Constants.coq_WZero
     | b::l0 ->
       (match l0 with
        | [] -> evm_lt ctx (b::(a::[]))
        | _::_ -> Constants.coq_WZero))

  (** val evm_slt :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_slt _ _ =
    Constants.coq_WZero

  (** val evm_sgt :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_sgt _ _ =
    Constants.coq_WZero

  (** val evm_eq :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_eq _ = function
  | [] -> Constants.coq_WZero
  | a::l ->
    (match l with
     | [] -> Constants.coq_WZero
     | b::l0 ->
       (match l0 with
        | [] ->
          if weqb Constants.coq_EVMWordSize a b
          then Constants.coq_WOne
          else Constants.coq_WZero
        | _::_ -> Constants.coq_WZero))

  (** val evm_iszero :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_iszero ctx = function
  | [] -> Constants.coq_WZero
  | a::l ->
    (match l with
     | [] -> evm_eq ctx (a::(Constants.coq_WZero::[]))
     | _::_ -> Constants.coq_WZero)

  (** val evm_and :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_and _ = function
  | [] -> Constants.coq_WZero
  | a::l ->
    (match l with
     | [] -> Constants.coq_WZero
     | b::l0 ->
       (match l0 with
        | [] -> wand Constants.coq_EVMWordSize a b
        | _::_ -> Constants.coq_WZero))

  (** val evm_or :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_or _ = function
  | [] -> Constants.coq_WZero
  | a::l ->
    (match l with
     | [] -> Constants.coq_WZero
     | b::l0 ->
       (match l0 with
        | [] -> wor Constants.coq_EVMWordSize a b
        | _::_ -> Constants.coq_WZero))

  (** val evm_xor :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_xor _ = function
  | [] -> Constants.coq_WZero
  | a::l ->
    (match l with
     | [] -> Constants.coq_WZero
     | b::l0 ->
       (match l0 with
        | [] -> wxor Constants.coq_EVMWordSize a b
        | _::_ -> Constants.coq_WZero))

  (** val evm_not :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_not _ = function
  | [] -> Constants.coq_WZero
  | a::l ->
    (match l with
     | [] -> wnot Constants.coq_EVMWordSize a
     | _::_ -> Constants.coq_WZero)

  (** val evm_byte :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_byte _ _ =
    Constants.coq_WZero

  (** val evm_shl :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_shl _ = function
  | [] -> Constants.coq_WZero
  | a::l ->
    (match l with
     | [] -> Constants.coq_WZero
     | b::l0 ->
       (match l0 with
        | [] ->
          wlshift' Constants.coq_EVMWordSize b
            (wordToNat Constants.coq_EVMWordSize a)
        | _::_ -> Constants.coq_WZero))

  (** val evm_shr :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_shr _ = function
  | [] -> Constants.coq_WZero
  | shift::l ->
    (match l with
     | [] -> Constants.coq_WZero
     | value::l0 ->
       (match l0 with
        | [] ->
          wdiv Constants.coq_EVMWordSize value
            (wlshift' Constants.coq_EVMWordSize Constants.coq_WOne
              (wordToNat Constants.coq_EVMWordSize shift))
        | _::_ -> Constants.coq_WZero))

  (** val evm_sar :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_sar _ _ =
    Constants.coq_WZero

  (** val evm_address :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_address ctx _ =
    let diff = sub Constants.coq_EVMWordSize Constants.coq_EVMAddrSize in
    zext Constants.coq_EVMAddrSize (ExecutionState.get_address_ctx ctx) diff

  (** val evm_balance :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_balance ctx = function
  | [] -> Constants.coq_WZero
  | a::l ->
    (match l with
     | [] ->
       let diff = sub Constants.coq_EVMWordSize Constants.coq_EVMAddrSize in
       let address = split1 Constants.coq_EVMAddrSize diff a in
       ExecutionState.get_balance_ctx ctx address
     | _::_ -> Constants.coq_WZero)

  (** val evm_origin :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_origin ctx _ =
    let diff = sub Constants.coq_EVMWordSize Constants.coq_EVMAddrSize in
    zext Constants.coq_EVMAddrSize (ExecutionState.get_origin_ctx ctx) diff

  (** val evm_caller :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_caller ctx _ =
    let diff = sub Constants.coq_EVMWordSize Constants.coq_EVMAddrSize in
    zext Constants.coq_EVMAddrSize (ExecutionState.get_caller_ctx ctx) diff

  (** val evm_callvalue :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_callvalue ctx _ =
    ExecutionState.get_callvalue_ctx ctx

  (** val evm_calldataload :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_calldataload _ _ =
    Constants.coq_WZero

  (** val evm_calldatasize :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_calldatasize ctx _ =
    let ExecutionState.Chunk (size, _) = ExecutionState.get_data_ctx ctx in
    natToWord Constants.coq_EVMWordSize size

  (** val evm_codesize :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_codesize ctx _ =
    let address = ExecutionState.get_address_ctx ctx in
    let info = ExecutionState.get_code_ctx ctx address in
    let ExecutionState.CodeInfo (size, _, _) = info in
    natToWord Constants.coq_EVMWordSize size

  (** val evm_gasprice :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_gasprice ctx _ =
    ExecutionState.get_gasprice_ctx ctx

  (** val evm_extcodesize :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_extcodesize ctx = function
  | [] -> Constants.coq_WZero
  | a::l ->
    (match l with
     | [] ->
       let diff = sub Constants.coq_EVMWordSize Constants.coq_EVMAddrSize in
       let address = split1 Constants.coq_EVMAddrSize diff a in
       let info = ExecutionState.get_code_ctx ctx address in
       let ExecutionState.CodeInfo (size, _, _) = info in
       natToWord Constants.coq_EVMWordSize size
     | _::_ -> Constants.coq_WZero)

  (** val evm_returndatasize :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_returndatasize ctx _ =
    let ExecutionState.Chunk (size, _) = ExecutionState.get_outdata_ctx ctx in
    natToWord Constants.coq_EVMWordSize size

  (** val evm_extcodehash :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_extcodehash ctx = function
  | [] -> Constants.coq_WZero
  | a::l ->
    (match l with
     | [] ->
       let diff = sub Constants.coq_EVMWordSize Constants.coq_EVMAddrSize in
       let address = split1 Constants.coq_EVMAddrSize diff a in
       let info = ExecutionState.get_code_ctx ctx address in
       let ExecutionState.CodeInfo (_, _, hash) = info in hash
     | _::_ -> Constants.coq_WZero)

  (** val evm_blockhash :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_blockhash _ _ =
    Constants.coq_WZero

  (** val evm_coinbase :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_coinbase ctx _ =
    let diff = sub Constants.coq_EVMWordSize Constants.coq_EVMAddrSize in
    zext Constants.coq_EVMAddrSize (ExecutionState.get_miner_ctx ctx) diff

  (** val evm_timestamp :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_timestamp ctx _ =
    let curr_block = ExecutionState.get_currblock_ctx ctx in
    let info = ExecutionState.get_blocks_ctx ctx curr_block in
    let ExecutionState.BlockInfo (_, _, timestamp, _) = info in timestamp

  (** val evm_number :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_number _ _ =
    Constants.coq_WZero

  (** val evm_difficulty :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_difficulty _ _ =
    Constants.coq_WZero

  (** val evm_gaslimit :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_gaslimit ctx _ =
    ExecutionState.get_gaslimit_ctx ctx

  (** val evm_chainid :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_chainid ctx _ =
    ExecutionState.get_chainid_ctx ctx

  (** val evm_selfbalance :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_selfbalance ctx _ =
    let address = ExecutionState.get_address_ctx ctx in
    ExecutionState.get_balance_ctx ctx address

  (** val evm_basefee :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_basefee ctx _ =
    ExecutionState.get_basefee_ctx ctx

  (** val evm_gas :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_gas _ _ =
    Constants.coq_WZero

  (** val evm_jumpi :
      ExecutionState.context -> Constants.coq_EVMWord list ->
      Constants.coq_EVMWord **)

  let evm_jumpi _ = function
  | [] -> Constants.coq_WZero
  | a::l ->
    (match l with
     | [] -> Constants.coq_WZero
     | b::l0 ->
       (match l0 with
        | [] ->
          if weqb Constants.coq_EVMWordSize b Constants.coq_WZero
          then Constants.coq_WZero
          else a
        | _::_ -> Constants.coq_WZero))

  (** val evm_stack_opm : stack_op_instr_map **)

  let evm_stack_opm =
    updatei
      (updatei
        (updatei
          (updatei
            (updatei
              (updatei
                (updatei
                  (updatei
                    (updatei
                      (updatei
                        (updatei
                          (updatei
                            (updatei
                              (updatei
                                (updatei
                                  (updatei
                                    (updatei
                                      (updatei
                                        (updatei
                                          (updatei
                                            (updatei
                                              (updatei
                                                (updatei
                                                  (updatei
                                                    (updatei
                                                      (updatei
                                                        (updatei
                                                          (updatei
                                                            (updatei
                                                              (updatei
                                                                (updatei
                                                                  (updatei
                                                                    (updatei
                                                                    (updatei
                                                                    (updatei
                                                                    (updatei
                                                                    (updatei
                                                                    (updatei
                                                                    (updatei
                                                                    (updatei
                                                                    (updatei
                                                                    (updatei
                                                                    (updatei
                                                                    (updatei
                                                                    (updatei
                                                                    (updatei
                                                                    (updatei
                                                                    (updatei
                                                                    (empty_imap
                                                                    (OpImp
                                                                    (O,
                                                                    (fun _ _ ->
                                                                    Constants.coq_WZero),
                                                                    None,
                                                                    None)))
                                                                    Program.JUMPI
                                                                    (OpImp
                                                                    ((S (S
                                                                    O)),
                                                                    evm_jumpi,
                                                                    None,
                                                                    (Some
                                                                    __))))
                                                                    Program.GAS
                                                                    (OpImp
                                                                    (O,
                                                                    evm_gas,
                                                                    None,
                                                                    (Some
                                                                    __))))
                                                                    Program.BASEFEE
                                                                    (OpImp
                                                                    (O,
                                                                    evm_basefee,
                                                                    None,
                                                                    None)))
                                                                    Program.SELFBALANCE
                                                                    (OpImp
                                                                    (O,
                                                                    evm_selfbalance,
                                                                    None,
                                                                    None)))
                                                                    Program.CHAINID
                                                                    (OpImp
                                                                    (O,
                                                                    evm_chainid,
                                                                    None,
                                                                    None)))
                                                                    Program.GASLIMIT
                                                                    (OpImp
                                                                    (O,
                                                                    evm_gaslimit,
                                                                    None,
                                                                    None)))
                                                                    Program.DIFFICULTY
                                                                    (OpImp
                                                                    (O,
                                                                    evm_difficulty,
                                                                    None,
                                                                    None)))
                                                                    Program.NUMBER
                                                                    (OpImp
                                                                    (O,
                                                                    evm_number,
                                                                    None,
                                                                    None)))
                                                                    Program.TIMESTAMP
                                                                    (OpImp
                                                                    (O,
                                                                    evm_timestamp,
                                                                    None,
                                                                    None)))
                                                                    Program.COINBASE
                                                                    (OpImp
                                                                    (O,
                                                                    evm_coinbase,
                                                                    None,
                                                                    None)))
                                                                    Program.BLOCKHASH
                                                                    (OpImp
                                                                    ((S O),
                                                                    evm_blockhash,
                                                                    None,
                                                                    None)))
                                                                    Program.EXTCODEHASH
                                                                    (OpImp
                                                                    ((S O),
                                                                    evm_extcodehash,
                                                                    None,
                                                                    None)))
                                                                    Program.RETURNDATASIZE
                                                                    (OpImp
                                                                    (O,
                                                                    evm_returndatasize,
                                                                    None,
                                                                    None)))
                                                                    Program.EXTCODESIZE
                                                                    (OpImp
                                                                    ((S O),
                                                                    evm_extcodesize,
                                                                    None,
                                                                    None)))
                                                                    Program.GASPRICE
                                                                    (OpImp
                                                                    (O,
                                                                    evm_gasprice,
                                                                    None,
                                                                    None)))
                                                                    Program.CODESIZE
                                                                    (OpImp
                                                                    (O,
                                                                    evm_codesize,
                                                                    None,
                                                                    None)))
                                                                    Program.CALLDATASIZE
                                                                    (OpImp
                                                                    (O,
                                                                    evm_calldatasize,
                                                                    None,
                                                                    None)))
                                                                  Program.CALLDATALOAD
                                                                  (OpImp ((S
                                                                  O),
                                                                  evm_calldataload,
                                                                  None,
                                                                  None)))
                                                                Program.CALLVALUE
                                                                (OpImp (O,
                                                                evm_callvalue,
                                                                None, None)))
                                                              Program.CALLER
                                                              (OpImp (O,
                                                              evm_caller,
                                                              None, None)))
                                                            Program.ORIGIN
                                                            (OpImp (O,
                                                            evm_origin, None,
                                                            None)))
                                                          Program.BALANCE
                                                          (OpImp ((S O),
                                                          evm_balance, None,
                                                          None)))
                                                        Program.ADDRESS
                                                        (OpImp (O,
                                                        evm_address, None,
                                                        None))) Program.SAR
                                                      (OpImp ((S (S O)),
                                                      evm_sar, None, None)))
                                                    Program.SHR (OpImp ((S (S
                                                    O)), evm_shr, None, (Some
                                                    __)))) Program.SHL (OpImp
                                                  ((S (S O)), evm_shl, None,
                                                  (Some __)))) Program.BYTE
                                                (OpImp ((S (S O)), evm_byte,
                                                None, None))) Program.NOT
                                              (OpImp ((S O), evm_not, None,
                                              (Some __)))) Program.XOR (OpImp
                                            ((S (S O)), evm_xor, (Some __),
                                            (Some __)))) Program.OR (OpImp
                                          ((S (S O)), evm_or, (Some __),
                                          (Some __)))) Program.AND (OpImp ((S
                                        (S O)), evm_and, (Some __), (Some
                                        __)))) Program.ISZERO (OpImp ((S O),
                                      evm_iszero, None, (Some __))))
                                    Program.EQ (OpImp ((S (S O)), evm_eq,
                                    (Some __), (Some __)))) Program.SGT
                                  (OpImp ((S (S O)), evm_sgt, None, None)))
                                Program.SLT (OpImp ((S (S O)), evm_slt, None,
                                None))) Program.GT (OpImp ((S (S O)), evm_gt,
                              None, (Some __)))) Program.LT (OpImp ((S (S
                            O)), evm_lt, None, (Some __))))
                          Program.SIGNEXTEND (OpImp ((S (S O)),
                          evm_signextend, None, None))) Program.EXP (OpImp
                        ((S (S O)), evm_exp, None, (Some __))))
                      Program.MULMOD (OpImp ((S (S (S O))), evm_mulmod, None,
                      (Some __)))) Program.ADDMOD (OpImp ((S (S (S O))),
                    evm_addmod, None, (Some __)))) Program.SMOD (OpImp ((S (S
                  O)), evm_smod, None, None))) Program.MOD (OpImp ((S (S O)),
                evm_mod, None, (Some __)))) Program.SDIV (OpImp ((S (S O)),
              evm_sdiv, None, None))) Program.DIV (OpImp ((S (S O)), evm_div,
            None, (Some __)))) Program.SUB (OpImp ((S (S O)), evm_sub, None,
          (Some __)))) Program.MUL (OpImp ((S (S O)), evm_mul, (Some __),
        (Some __)))) Program.ADD (OpImp ((S (S O)), evm_add, (Some __), (Some
      __)))
 end

module SymbolicState =
 struct
  type sstack_val =
  | Val of Constants.coq_EVMWord
  | InStackVar of nat
  | FreshVar of nat

  type sstack = sstack_val list

  type 'a memory_update =
  | U_MSTORE of 'a * 'a
  | U_MSTORE8 of 'a * 'a

  type 'a memory_updates = 'a memory_update list

  type smemory = sstack_val memory_updates

  (** val empty_smemory : smemory **)

  let empty_smemory =
    []

  type 'a storage_update =
  | U_SSTORE of 'a * 'a

  type 'a storage_updates = 'a storage_update list

  type sstorage = sstack_val storage_updates

  (** val empty_sstorage : sstorage **)

  let empty_sstorage =
    []

  type smap_value =
  | SymBasicVal of sstack_val
  | SymMETAPUSH of n * n
  | SymOp of Program.stack_op_instr * sstack_val list
  | SymMLOAD of sstack_val * smemory
  | SymSLOAD of sstack_val * sstorage
  | SymSHA3 of sstack_val * sstack_val * smemory

  type sbinding = nat * smap_value

  type sbindings = sbinding list

  type smap =
  | SymMap of nat * sbindings

  (** val get_maxidx_smap : smap -> nat **)

  let get_maxidx_smap = function
  | SymMap (maxidx, _) -> maxidx

  (** val get_bindings_smap : smap -> sbindings **)

  let get_bindings_smap = function
  | SymMap (_, sb) -> sb

  (** val empty_smap : smap **)

  let empty_smap =
    SymMap (O, [])

  (** val add_to_smap : smap -> smap_value -> nat * smap **)

  let add_to_smap sm value =
    let SymMap (maxidx, bindings) = sm in
    let sm' = SymMap ((S maxidx), ((maxidx , value)::bindings)) in
    maxidx , sm'

  type follow_in_smap_ret_t =
  | FollowSmapVal of smap_value * nat * sbindings

  (** val is_fresh_var_smv : smap_value -> nat option **)

  let is_fresh_var_smv = function
  | SymBasicVal val0 -> (match val0 with
                         | FreshVar idx -> Some idx
                         | _ -> None)
  | _ -> None

  (** val follow_in_smap :
      sstack_val -> nat -> sbindings -> follow_in_smap_ret_t option **)

  let rec follow_in_smap sv maxidx sb =
    match sv with
    | FreshVar idx ->
      (match sb with
       | [] -> None
       | s::sb' ->
         let key , smv = s in
         if eqb key idx
         then (match is_fresh_var_smv smv with
               | Some idx' -> follow_in_smap (FreshVar idx') key sb'
               | None -> Some (FollowSmapVal (smv, key, sb')))
         else follow_in_smap sv key sb')
    | x -> Some (FollowSmapVal ((SymBasicVal x), maxidx, sb))

  type sstate =
  | SymExState of nat * sstack * smemory * sstorage * smap

  (** val make_sst :
      nat -> sstack -> smemory -> sstorage -> smap -> sstate **)

  let make_sst instk_height sstk smem sstrg sm =
    SymExState (instk_height, sstk, smem, sstrg, sm)

  (** val gen_empty_sstate : nat -> sstate **)

  let gen_empty_sstate instk_height =
    let ids = seq O instk_height in
    let sstk = map (fun x -> InStackVar x) ids in
    make_sst instk_height sstk empty_smemory empty_sstorage empty_smap

  (** val get_instk_height_sst : sstate -> nat **)

  let get_instk_height_sst = function
  | SymExState (instk_height, _, _, _, _) -> instk_height

  (** val get_stack_sst : sstate -> sstack **)

  let get_stack_sst = function
  | SymExState (_, sstk, _, _, _) -> sstk

  (** val set_stack_sst : sstate -> sstack -> sstate **)

  let set_stack_sst sst sstk =
    let SymExState (instk_height, _, smem, sstrg, sm) = sst in
    SymExState (instk_height, sstk, smem, sstrg, sm)

  (** val get_memory_sst : sstate -> smemory **)

  let get_memory_sst = function
  | SymExState (_, _, smem, _, _) -> smem

  (** val set_memory_sst : sstate -> smemory -> sstate **)

  let set_memory_sst sst smem =
    let SymExState (instk_height, sstk, _, sstrg, sm) = sst in
    SymExState (instk_height, sstk, smem, sstrg, sm)

  (** val get_storage_sst : sstate -> sstorage **)

  let get_storage_sst = function
  | SymExState (_, _, _, sstrg, _) -> sstrg

  (** val set_storage_sst : sstate -> sstorage -> sstate **)

  let set_storage_sst sst sstrg =
    let SymExState (instk_height, sstk, smem, _, sm) = sst in
    SymExState (instk_height, sstk, smem, sstrg, sm)

  (** val get_smap_sst : sstate -> smap **)

  let get_smap_sst = function
  | SymExState (_, _, _, _, sm) -> sm

  (** val set_smap_sst : sstate -> smap -> sstate **)

  let set_smap_sst sst sm =
    let SymExState (instk_height, sstk, smem, sstrg, _) = sst in
    SymExState (instk_height, sstk, smem, sstrg, sm)
 end

module SymbolicStateCmp =
 struct
  type sstack_val_cmp_t =
    SymbolicState.sstack_val -> SymbolicState.sstack_val -> nat ->
    SymbolicState.sbindings -> nat -> SymbolicState.sbindings -> nat ->
    StackOpInstrs.stack_op_instr_map -> bool

  type smemory_cmp_t =
    SymbolicState.smemory -> SymbolicState.smemory -> nat ->
    SymbolicState.sbindings -> nat -> SymbolicState.sbindings -> nat ->
    StackOpInstrs.stack_op_instr_map -> bool

  type smemory_cmp_ext_t = sstack_val_cmp_t -> smemory_cmp_t

  type sstorage_cmp_t =
    SymbolicState.sstorage -> SymbolicState.sstorage -> nat ->
    SymbolicState.sbindings -> nat -> SymbolicState.sbindings -> nat ->
    StackOpInstrs.stack_op_instr_map -> bool

  type sstorage_cmp_ext_t = sstack_val_cmp_t -> sstorage_cmp_t

  type sha3_cmp_t =
    SymbolicState.sstack_val -> SymbolicState.sstack_val ->
    SymbolicState.smemory -> SymbolicState.sstack_val ->
    SymbolicState.sstack_val -> SymbolicState.smemory -> nat ->
    SymbolicState.sbindings -> nat -> SymbolicState.sbindings -> nat ->
    StackOpInstrs.stack_op_instr_map -> bool

  type sha3_cmp_ext_t = sstack_val_cmp_t -> sha3_cmp_t

  type sstack_val_cmp_ext_1_t = nat -> sstack_val_cmp_t

  type sstack_val_cmp_ext_2_t =
    smemory_cmp_ext_t -> sstorage_cmp_ext_t -> sha3_cmp_ext_t ->
    sstack_val_cmp_ext_1_t
 end

module SymbolicStateCmpImpl =
 struct
  (** val compare_sstack :
      SymbolicStateCmp.sstack_val_cmp_t -> SymbolicState.sstack ->
      SymbolicState.sstack -> nat -> SymbolicState.sbindings -> nat ->
      SymbolicState.sbindings -> nat -> StackOpInstrs.stack_op_instr_map ->
      bool **)

  let compare_sstack sstack_val_cmp sstk1 sstk2 maxidx1 sb1 maxidx2 sb2 instk_height ops =
    Misc.fold_right_two_lists (fun e1 e2 ->
      sstack_val_cmp e1 e2 maxidx1 sb1 maxidx2 sb2 instk_height ops) sstk1
      sstk2

  (** val compare_smemory :
      SymbolicStateCmp.smemory_cmp_t -> SymbolicState.smemory ->
      SymbolicState.smemory -> nat -> SymbolicState.sbindings -> nat ->
      SymbolicState.sbindings -> nat -> StackOpInstrs.stack_op_instr_map ->
      bool **)

  let compare_smemory smemory_cmp =
    smemory_cmp

  (** val compare_sstorage :
      SymbolicStateCmp.sstorage_cmp_t -> SymbolicState.sstorage ->
      SymbolicState.sstorage -> nat -> SymbolicState.sbindings -> nat ->
      SymbolicState.sbindings -> nat -> StackOpInstrs.stack_op_instr_map ->
      bool **)

  let compare_sstorage sstorage_cmp =
    sstorage_cmp

  (** val sstate_cmp :
      SymbolicStateCmp.sstack_val_cmp_t -> SymbolicStateCmp.smemory_cmp_t ->
      SymbolicStateCmp.sstorage_cmp_t -> SymbolicState.sstate ->
      SymbolicState.sstate -> StackOpInstrs.stack_op_instr_map -> bool **)

  let sstate_cmp sstack_val_cmp smemory_cmp sstorage_cmp sst1 sst2 ops =
    let instk_height1 = SymbolicState.get_instk_height_sst sst1 in
    let sstk1 = SymbolicState.get_stack_sst sst1 in
    let smem1 = SymbolicState.get_memory_sst sst1 in
    let sstrg1 = SymbolicState.get_storage_sst sst1 in
    let m1 = SymbolicState.get_smap_sst sst1 in
    let maxidx1 = SymbolicState.get_maxidx_smap m1 in
    let sb1 = SymbolicState.get_bindings_smap m1 in
    let instk_height2 = SymbolicState.get_instk_height_sst sst2 in
    let sstk2 = SymbolicState.get_stack_sst sst2 in
    let smem2 = SymbolicState.get_memory_sst sst2 in
    let sstrg2 = SymbolicState.get_storage_sst sst2 in
    let m2 = SymbolicState.get_smap_sst sst2 in
    let maxidx2 = SymbolicState.get_maxidx_smap m2 in
    let sb2 = SymbolicState.get_bindings_smap m2 in
    if eqb instk_height1 instk_height2
    then if compare_sstack sstack_val_cmp sstk1 sstk2 maxidx1 sb1 maxidx2 sb2
              instk_height1 ops
         then if compare_smemory smemory_cmp smem1 smem2 maxidx1 sb1 maxidx2
                   sb2 instk_height1 ops
              then compare_sstorage sstorage_cmp sstrg1 sstrg2 maxidx1 sb1
                     maxidx2 sb2 instk_height1 ops
              else false
         else false
    else false
 end

module Optimizations_Common =
 struct
  (** val follow_to_val :
      SymbolicState.sstack_val -> nat -> SymbolicState.sbindings ->
      Constants.coq_EVMWord option **)

  let follow_to_val sv maxidx sb =
    match SymbolicState.follow_in_smap sv maxidx sb with
    | Some f ->
      let SymbolicState.FollowSmapVal (smv, _, _) = f in
      (match smv with
       | SymbolicState.SymBasicVal val0 ->
         (match val0 with
          | SymbolicState.Val v -> Some v
          | _ -> None)
       | _ -> None)
    | None -> None

  (** val follow_to_val_args :
      SymbolicState.sstack -> nat -> SymbolicState.sbindings ->
      Constants.coq_EVMWord list option **)

  let follow_to_val_args args maxidx sb =
    let f_follow_list = fun sv' -> follow_to_val sv' maxidx sb in
    Misc.map_option f_follow_list args

  (** val two_exp_160_minus_1 : Constants.coq_EVMWord **)

  let two_exp_160_minus_1 =
    let diff = sub Constants.coq_EVMWordSize Constants.coq_EVMAddrSize in
    zext Constants.coq_EVMAddrSize (wones Constants.coq_EVMAddrSize) diff
 end

module Optimizations_Def =
 struct
  type opt_smap_value_type =
    SymbolicState.smap_value -> SymbolicStateCmp.sstack_val_cmp_t ->
    SymbolicState.sbindings -> nat -> nat -> StackOpInstrs.stack_op_instr_map
    -> SymbolicState.smap_value * bool

  (** val optimize_first_sbindings :
      opt_smap_value_type -> SymbolicStateCmp.sstack_val_cmp_t ->
      SymbolicState.sbindings -> nat -> SymbolicState.sbindings * bool **)

  let rec optimize_first_sbindings opt_sbinding fcmp sb instk_height =
    match sb with
    | [] -> sb , false
    | s::rs ->
      let n0 , val0 = s in
      let val' , b =
        opt_sbinding val0 fcmp rs n0 instk_height StackOpInstrs.evm_stack_opm
      in
      if b
      then ((n0 , val')::rs) , true
      else let rs' , flag =
             optimize_first_sbindings opt_sbinding fcmp rs instk_height
           in
           ((n0 , val0)::rs') , flag

  (** val optimize_first_sstate :
      opt_smap_value_type -> SymbolicStateCmp.sstack_val_cmp_t ->
      SymbolicState.sstate -> SymbolicState.sstate * bool **)

  let optimize_first_sstate opt fcmp = function
  | SymbolicState.SymExState (instk_height, sstk, smem, sstg, sm) ->
    let SymbolicState.SymMap (maxid, bindings) = sm in
    let bindings' , flag =
      optimize_first_sbindings opt fcmp bindings instk_height
    in
    (SymbolicState.SymExState (instk_height, sstk, smem, sstg,
    (SymbolicState.SymMap (maxid, bindings')))) , flag

  type opt_entry =
    opt_smap_value_type
    (* singleton inductive, whose constructor was OpEntry *)

  type opt_pipeline = opt_entry list

  (** val optimize_first_opt_entry_sstate :
      opt_entry -> SymbolicStateCmp.sstack_val_cmp_t -> SymbolicState.sstate
      -> SymbolicState.sstate * bool **)

  let optimize_first_opt_entry_sstate =
    optimize_first_sstate

  (** val apply_opt_n_times :
      opt_entry -> SymbolicStateCmp.sstack_val_cmp_t -> nat ->
      SymbolicState.sstate -> SymbolicState.sstate * bool **)

  let rec apply_opt_n_times opt_e fcmp n0 sst =
    match n0 with
    | O -> sst , false
    | S n' ->
      let sst' , b = optimize_first_opt_entry_sstate opt_e fcmp sst in
      if b
      then let sst'' , _ = apply_opt_n_times opt_e fcmp n' sst' in
           sst'' , true
      else sst' , false

  (** val apply_opt_n_times_pipeline_once :
      opt_pipeline -> SymbolicStateCmp.sstack_val_cmp_t -> nat ->
      SymbolicState.sstate -> SymbolicState.sstate * bool **)

  let rec apply_opt_n_times_pipeline_once pipe fcmp n0 sst =
    match pipe with
    | [] -> sst , false
    | opt_e::rp ->
      let sst' , flag1 = apply_opt_n_times opt_e fcmp n0 sst in
      let sst'' , flag2 = apply_opt_n_times_pipeline_once rp fcmp n0 sst' in
      sst'' , ((||) flag1 flag2)

  (** val apply_opt_n_times_pipeline_k :
      opt_pipeline -> SymbolicStateCmp.sstack_val_cmp_t -> nat -> nat ->
      SymbolicState.sstate -> SymbolicState.sstate * bool **)

  let rec apply_opt_n_times_pipeline_k pipe fcmp n0 k sst =
    match k with
    | O -> sst , false
    | S k' ->
      let sst' , b = apply_opt_n_times_pipeline_once pipe fcmp n0 sst in
      if b
      then let sst'' , _ = apply_opt_n_times_pipeline_k pipe fcmp n0 k' sst'
           in
           sst'' , true
      else sst' , false
 end

module Opt_add_zero =
 struct
  (** val optimize_add_zero_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_add_zero_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.ADD ->
         (match args with
          | [] -> val0 , false
          | arg1::l ->
            (match l with
             | [] -> val0 , false
             | arg2::l0 ->
               (match l0 with
                | [] ->
                  if fcmp arg1 (SymbolicState.Val Constants.coq_WZero) maxid
                       sb maxid sb instk_height ops
                  then (SymbolicState.SymBasicVal arg2) , true
                  else if fcmp arg2 (SymbolicState.Val Constants.coq_WZero)
                            maxid sb maxid sb instk_height ops
                       then (SymbolicState.SymBasicVal arg1) , true
                       else val0 , false
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_eval =
 struct
  (** val optimize_eval_sbinding : Optimizations_Def.opt_smap_value_type **)

  let optimize_eval_sbinding val0 _ sb maxid _ ops =
    match val0 with
    | SymbolicState.SymOp (op, args) ->
      (match Optimizations_Common.follow_to_val_args args maxid sb with
       | Some vargs ->
         let StackOpInstrs.OpImp (nargs, f, _, hctx_indep) = ops op in
         (match hctx_indep with
          | Some _ ->
            if eqb (length args) nargs
            then (SymbolicState.SymBasicVal (SymbolicState.Val
                   (f ExecutionState.empty_context vargs))) , true
            else val0 , false
          | None -> val0 , false)
       | None -> val0 , false)
    | _ -> val0 , false
 end

module Opt_not_not =
 struct
  (** val optimize_not_not_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_not_not_sbinding val0 _ sb maxid _ _ =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.NOT ->
         (match args with
          | [] -> val0 , false
          | arg1::l ->
            (match l with
             | [] ->
               (match SymbolicState.follow_in_smap arg1 maxid sb with
                | Some f ->
                  let SymbolicState.FollowSmapVal (smv, _, _) = f in
                  (match smv with
                   | SymbolicState.SymOp (label0, args0) ->
                     (match label0 with
                      | Program.NOT ->
                        (match args0 with
                         | [] -> val0 , false
                         | arg2::l0 ->
                           (match l0 with
                            | [] -> (SymbolicState.SymBasicVal arg2) , true
                            | _::_ -> val0 , false))
                      | _ -> val0 , false)
                   | _ -> val0 , false)
                | None -> val0 , false)
             | _::_ -> val0 , false))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_and_and1 =
 struct
  (** val optimize_and_and1_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_and_and1_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.AND ->
         (match args with
          | [] -> val0 , false
          | arg1::l ->
            (match l with
             | [] -> val0 , false
             | arg2::l0 ->
               (match l0 with
                | [] ->
                  (match SymbolicState.follow_in_smap arg2 maxid sb with
                   | Some f ->
                     let SymbolicState.FollowSmapVal (smv, idx', sb') = f in
                     (match smv with
                      | SymbolicState.SymOp (label0, args0) ->
                        (match label0 with
                         | Program.AND ->
                           (match args0 with
                            | [] -> val0 , false
                            | arg21::l1 ->
                              (match l1 with
                               | [] -> val0 , false
                               | arg22::l2 ->
                                 (match l2 with
                                  | [] ->
                                    if fcmp arg1 arg21 maxid sb idx' sb'
                                         instk_height ops
                                    then (SymbolicState.SymOp (Program.AND,
                                           (arg1::(arg22::[])))) , true
                                    else if fcmp arg1 arg22 maxid sb idx' sb'
                                              instk_height ops
                                         then (SymbolicState.SymOp
                                                (Program.AND,
                                                (arg1::(arg21::[])))) , true
                                         else val0 , false
                                  | _::_ -> val0 , false)))
                         | _ -> val0 , false)
                      | _ -> val0 , false)
                   | None -> val0 , false)
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_and_and2 =
 struct
  (** val optimize_and_and2_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_and_and2_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.AND ->
         (match args with
          | [] -> val0 , false
          | arg1::l ->
            (match l with
             | [] -> val0 , false
             | arg2::l0 ->
               (match l0 with
                | [] ->
                  (match SymbolicState.follow_in_smap arg1 maxid sb with
                   | Some f ->
                     let SymbolicState.FollowSmapVal (smv, idx', sb') = f in
                     (match smv with
                      | SymbolicState.SymOp (label0, args0) ->
                        (match label0 with
                         | Program.AND ->
                           (match args0 with
                            | [] -> val0 , false
                            | arg11::l1 ->
                              (match l1 with
                               | [] -> val0 , false
                               | arg12::l2 ->
                                 (match l2 with
                                  | [] ->
                                    if fcmp arg11 arg2 idx' sb' maxid sb
                                         instk_height ops
                                    then (SymbolicState.SymOp (Program.AND,
                                           (arg11::(arg12::[])))) , true
                                    else if fcmp arg12 arg2 idx' sb' maxid sb
                                              instk_height ops
                                         then (SymbolicState.SymOp
                                                (Program.AND,
                                                (arg11::(arg12::[])))) , true
                                         else val0 , false
                                  | _::_ -> val0 , false)))
                         | _ -> val0 , false)
                      | _ -> val0 , false)
                   | None -> val0 , false)
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_and_origin =
 struct
  (** val is_origin_mask :
      SymbolicState.sstack_val -> SymbolicState.sstack_val ->
      SymbolicStateCmp.sstack_val_cmp_t -> nat -> nat ->
      SymbolicState.sbindings -> StackOpInstrs.stack_op_instr_map -> bool **)

  let is_origin_mask sv1 sv2 fcmp maxid instk_height sb ops =
    match SymbolicState.follow_in_smap sv1 maxid sb with
    | Some f ->
      let SymbolicState.FollowSmapVal (smv, _, _) = f in
      (match smv with
       | SymbolicState.SymOp (label, args) ->
         (match label with
          | Program.ORIGIN ->
            (match args with
             | [] ->
               fcmp sv2 (SymbolicState.Val
                 Optimizations_Common.two_exp_160_minus_1) maxid sb maxid sb
                 instk_height ops
             | _::_ -> false)
          | _ -> false)
       | _ -> false)
    | None -> false

  (** val optimize_and_origin_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_and_origin_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.AND ->
         (match args with
          | [] -> val0 , false
          | arg1::l ->
            (match l with
             | [] -> val0 , false
             | arg2::l0 ->
               (match l0 with
                | [] ->
                  if (||)
                       (is_origin_mask arg1 arg2 fcmp maxid instk_height sb
                         ops)
                       (is_origin_mask arg2 arg1 fcmp maxid instk_height sb
                         ops)
                  then (SymbolicState.SymOp (Program.ORIGIN, [])) , true
                  else val0 , false
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_mul_shl =
 struct
  (** val is_shl_1 :
      SymbolicState.sstack_val -> SymbolicStateCmp.sstack_val_cmp_t -> nat ->
      nat -> SymbolicState.sbindings -> StackOpInstrs.stack_op_instr_map ->
      SymbolicState.sstack_val option **)

  let is_shl_1 sv fcmp maxid instk_height sb ops =
    match SymbolicState.follow_in_smap sv maxid sb with
    | Some f ->
      let SymbolicState.FollowSmapVal (smv, _, _) = f in
      (match smv with
       | SymbolicState.SymOp (label, args) ->
         (match label with
          | Program.SHL ->
            (match args with
             | [] -> None
             | arg1::l ->
               (match l with
                | [] -> None
                | arg2::l0 ->
                  (match l0 with
                   | [] ->
                     if fcmp arg2 (SymbolicState.Val Constants.coq_WOne)
                          maxid sb maxid sb instk_height ops
                     then Some arg1
                     else None
                   | _::_ -> None)))
          | _ -> None)
       | _ -> None)
    | None -> None

  (** val optimize_mul_shl_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_mul_shl_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.MUL ->
         (match args with
          | [] -> val0 , false
          | arg1::l ->
            (match l with
             | [] -> val0 , false
             | arg2::l0 ->
               (match l0 with
                | [] ->
                  (match is_shl_1 arg1 fcmp maxid instk_height sb ops with
                   | Some x ->
                     (SymbolicState.SymOp (Program.SHL,
                       (x::(arg2::[])))) , true
                   | None ->
                     (match is_shl_1 arg2 fcmp maxid instk_height sb ops with
                      | Some x ->
                        (SymbolicState.SymOp (Program.SHL,
                          (x::(arg1::[])))) , true
                      | None -> val0 , false))
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_div_shl =
 struct
  (** val is_shl_1 :
      SymbolicState.sstack_val -> SymbolicStateCmp.sstack_val_cmp_t -> nat ->
      nat -> SymbolicState.sbindings -> StackOpInstrs.stack_op_instr_map ->
      SymbolicState.sstack_val option **)

  let is_shl_1 sv fcmp maxid instk_height sb ops =
    match SymbolicState.follow_in_smap sv maxid sb with
    | Some f ->
      let SymbolicState.FollowSmapVal (smv, _, _) = f in
      (match smv with
       | SymbolicState.SymOp (label, args) ->
         (match label with
          | Program.SHL ->
            (match args with
             | [] -> None
             | arg1::l ->
               (match l with
                | [] -> None
                | arg2::l0 ->
                  (match l0 with
                   | [] ->
                     if fcmp arg2 (SymbolicState.Val Constants.coq_WOne)
                          maxid sb maxid sb instk_height ops
                     then Some arg1
                     else None
                   | _::_ -> None)))
          | _ -> None)
       | _ -> None)
    | None -> None

  (** val optimize_div_shl_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_div_shl_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.DIV ->
         (match args with
          | [] -> val0 , false
          | x::l ->
            (match l with
             | [] -> val0 , false
             | arg2::l0 ->
               (match l0 with
                | [] ->
                  (match is_shl_1 arg2 fcmp maxid instk_height sb ops with
                   | Some y ->
                     (SymbolicState.SymOp (Program.SHR, (y::(x::[])))) , true
                   | None -> val0 , false)
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_shr_zero_x =
 struct
  (** val optimize_shr_zero_x_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_shr_zero_x_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.SHR ->
         (match args with
          | [] -> val0 , false
          | zero::l ->
            (match l with
             | [] -> val0 , false
             | x::l0 ->
               (match l0 with
                | [] ->
                  if fcmp zero (SymbolicState.Val Constants.coq_WZero) maxid
                       sb maxid sb instk_height ops
                  then (SymbolicState.SymBasicVal x) , true
                  else val0 , false
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_shr_x_zero =
 struct
  (** val optimize_shr_x_zero_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_shr_x_zero_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.SHR ->
         (match args with
          | [] -> val0 , false
          | _::l ->
            (match l with
             | [] -> val0 , false
             | zero::l0 ->
               (match l0 with
                | [] ->
                  if fcmp zero (SymbolicState.Val Constants.coq_WZero) maxid
                       sb maxid sb instk_height ops
                  then (SymbolicState.SymBasicVal (SymbolicState.Val
                         Constants.coq_WZero)) , true
                  else val0 , false
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_eq_zero =
 struct
  (** val optimize_eq_zero_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_eq_zero_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.EQ ->
         (match args with
          | [] -> val0 , false
          | arg1::l ->
            (match l with
             | [] -> val0 , false
             | arg2::l0 ->
               (match l0 with
                | [] ->
                  if fcmp arg1 (SymbolicState.Val Constants.coq_WZero) maxid
                       sb maxid sb instk_height ops
                  then (SymbolicState.SymOp (Program.ISZERO,
                         (arg2::[]))) , true
                  else if fcmp arg2 (SymbolicState.Val Constants.coq_WZero)
                            maxid sb maxid sb instk_height ops
                       then (SymbolicState.SymOp (Program.ISZERO,
                              (arg1::[]))) , true
                       else val0 , false
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_sub_x_x =
 struct
  (** val optimize_sub_x_x_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_sub_x_x_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.SUB ->
         (match args with
          | [] -> val0 , false
          | arg1::l ->
            (match l with
             | [] -> val0 , false
             | arg2::l0 ->
               (match l0 with
                | [] ->
                  if fcmp arg1 arg2 maxid sb maxid sb instk_height ops
                  then (SymbolicState.SymBasicVal (SymbolicState.Val
                         Constants.coq_WZero)) , true
                  else val0 , false
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_and_zero =
 struct
  (** val optimize_and_zero_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_and_zero_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.AND ->
         (match args with
          | [] -> val0 , false
          | arg1::l ->
            (match l with
             | [] -> val0 , false
             | arg2::l0 ->
               (match l0 with
                | [] ->
                  if fcmp arg1 (SymbolicState.Val Constants.coq_WZero) maxid
                       sb maxid sb instk_height ops
                  then (SymbolicState.SymBasicVal (SymbolicState.Val
                         Constants.coq_WZero)) , true
                  else if fcmp arg2 (SymbolicState.Val Constants.coq_WZero)
                            maxid sb maxid sb instk_height ops
                       then (SymbolicState.SymBasicVal (SymbolicState.Val
                              Constants.coq_WZero)) , true
                       else val0 , false
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_div_one =
 struct
  (** val optimize_div_one_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_div_one_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.DIV ->
         (match args with
          | [] -> val0 , false
          | arg1::l ->
            (match l with
             | [] -> val0 , false
             | arg2::l0 ->
               (match l0 with
                | [] ->
                  if fcmp arg2 (SymbolicState.Val Constants.coq_WOne) maxid
                       sb maxid sb instk_height ops
                  then (SymbolicState.SymBasicVal arg1) , true
                  else val0 , false
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_lt_x_one =
 struct
  (** val optimize_lt_x_one_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_lt_x_one_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.LT ->
         (match args with
          | [] -> val0 , false
          | arg1::l ->
            (match l with
             | [] -> val0 , false
             | arg2::l0 ->
               (match l0 with
                | [] ->
                  if fcmp arg2 (SymbolicState.Val Constants.coq_WOne) maxid
                       sb maxid sb instk_height ops
                  then (SymbolicState.SymOp (Program.ISZERO,
                         (arg1::[]))) , true
                  else val0 , false
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_gt_one_x =
 struct
  (** val optimize_gt_one_x_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_gt_one_x_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.GT ->
         (match args with
          | [] -> val0 , false
          | arg1::l ->
            (match l with
             | [] -> val0 , false
             | arg2::l0 ->
               (match l0 with
                | [] ->
                  if fcmp arg1 (SymbolicState.Val Constants.coq_WOne) maxid
                       sb maxid sb instk_height ops
                  then (SymbolicState.SymOp (Program.ISZERO,
                         (arg2::[]))) , true
                  else val0 , false
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_and_address =
 struct
  (** val is_address_mask :
      SymbolicState.sstack_val -> SymbolicState.sstack_val ->
      SymbolicStateCmp.sstack_val_cmp_t -> nat -> nat ->
      SymbolicState.sbindings -> StackOpInstrs.stack_op_instr_map -> bool **)

  let is_address_mask sv1 sv2 fcmp maxid instk_height sb ops =
    match SymbolicState.follow_in_smap sv1 maxid sb with
    | Some f ->
      let SymbolicState.FollowSmapVal (smv, _, _) = f in
      (match smv with
       | SymbolicState.SymOp (label, args) ->
         (match label with
          | Program.ADDRESS ->
            (match args with
             | [] ->
               fcmp sv2 (SymbolicState.Val
                 Optimizations_Common.two_exp_160_minus_1) maxid sb maxid sb
                 instk_height ops
             | _::_ -> false)
          | _ -> false)
       | _ -> false)
    | None -> false

  (** val optimize_and_address_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_and_address_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.AND ->
         (match args with
          | [] -> val0 , false
          | arg1::l ->
            (match l with
             | [] -> val0 , false
             | arg2::l0 ->
               (match l0 with
                | [] ->
                  if (||)
                       (is_address_mask arg1 arg2 fcmp maxid instk_height sb
                         ops)
                       (is_address_mask arg2 arg1 fcmp maxid instk_height sb
                         ops)
                  then (SymbolicState.SymOp (Program.ADDRESS, [])) , true
                  else val0 , false
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_mul_one =
 struct
  (** val optimize_mul_one_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_mul_one_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.MUL ->
         (match args with
          | [] -> val0 , false
          | arg1::l ->
            (match l with
             | [] -> val0 , false
             | arg2::l0 ->
               (match l0 with
                | [] ->
                  if fcmp arg1 (SymbolicState.Val Constants.coq_WOne) maxid
                       sb maxid sb instk_height ops
                  then (SymbolicState.SymBasicVal arg2) , true
                  else if fcmp arg2 (SymbolicState.Val Constants.coq_WOne)
                            maxid sb maxid sb instk_height ops
                       then (SymbolicState.SymBasicVal arg1) , true
                       else val0 , false
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_iszero_gt =
 struct
  (** val is_gt_zero :
      SymbolicState.sstack_val -> SymbolicStateCmp.sstack_val_cmp_t -> nat ->
      nat -> SymbolicState.sbindings -> StackOpInstrs.stack_op_instr_map ->
      SymbolicState.sstack_val option **)

  let is_gt_zero sv fcmp maxid instk_height sb ops =
    match SymbolicState.follow_in_smap sv maxid sb with
    | Some f ->
      let SymbolicState.FollowSmapVal (smv, _, _) = f in
      (match smv with
       | SymbolicState.SymOp (label, args) ->
         (match label with
          | Program.GT ->
            (match args with
             | [] -> None
             | arg1::l ->
               (match l with
                | [] -> None
                | arg2::l0 ->
                  (match l0 with
                   | [] ->
                     if fcmp arg2 (SymbolicState.Val Constants.coq_WZero)
                          maxid sb maxid sb instk_height ops
                     then Some arg1
                     else None
                   | _::_ -> None)))
          | _ -> None)
       | _ -> None)
    | None -> None

  (** val optimize_iszero_gt_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_iszero_gt_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.ISZERO ->
         (match args with
          | [] -> val0 , false
          | arg::l ->
            (match l with
             | [] ->
               (match is_gt_zero arg fcmp maxid instk_height sb ops with
                | Some x ->
                  (SymbolicState.SymOp (Program.ISZERO, (x::[]))) , true
                | None -> val0 , false)
             | _::_ -> val0 , false))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_eq_iszero =
 struct
  (** val is_iszero :
      SymbolicState.sstack_val -> SymbolicStateCmp.sstack_val_cmp_t -> nat ->
      nat -> SymbolicState.sbindings -> StackOpInstrs.stack_op_instr_map ->
      SymbolicState.sstack_val option **)

  let is_iszero sv _ maxid _ sb _ =
    match SymbolicState.follow_in_smap sv maxid sb with
    | Some f ->
      let SymbolicState.FollowSmapVal (smv, _, _) = f in
      (match smv with
       | SymbolicState.SymOp (label, args) ->
         (match label with
          | Program.ISZERO ->
            (match args with
             | [] -> None
             | arg::l -> (match l with
                          | [] -> Some arg
                          | _::_ -> None))
          | _ -> None)
       | _ -> None)
    | None -> None

  (** val optimize_eq_iszero_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_eq_iszero_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.EQ ->
         (match args with
          | [] -> val0 , false
          | arg1::l ->
            (match l with
             | [] -> val0 , false
             | arg2::l0 ->
               (match l0 with
                | [] ->
                  (match is_iszero arg1 fcmp maxid instk_height sb ops with
                   | Some x ->
                     if fcmp arg2 (SymbolicState.Val Constants.coq_WOne)
                          maxid sb maxid sb instk_height ops
                     then (SymbolicState.SymOp (Program.ISZERO,
                            (x::[]))) , true
                     else val0 , false
                   | None ->
                     (match is_iszero arg2 fcmp maxid instk_height sb ops with
                      | Some x ->
                        if fcmp arg1 (SymbolicState.Val Constants.coq_WOne)
                             maxid sb maxid sb instk_height ops
                        then (SymbolicState.SymOp (Program.ISZERO,
                               (x::[]))) , true
                        else val0 , false
                      | None -> val0 , false))
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_and_caller =
 struct
  (** val is_caller_mask :
      SymbolicState.sstack_val -> SymbolicState.sstack_val ->
      SymbolicStateCmp.sstack_val_cmp_t -> nat -> nat ->
      SymbolicState.sbindings -> StackOpInstrs.stack_op_instr_map -> bool **)

  let is_caller_mask sv1 sv2 fcmp maxid instk_height sb ops =
    match SymbolicState.follow_in_smap sv1 maxid sb with
    | Some f ->
      let SymbolicState.FollowSmapVal (smv, _, _) = f in
      (match smv with
       | SymbolicState.SymOp (label, args) ->
         (match label with
          | Program.CALLER ->
            (match args with
             | [] ->
               fcmp sv2 (SymbolicState.Val
                 Optimizations_Common.two_exp_160_minus_1) maxid sb maxid sb
                 instk_height ops
             | _::_ -> false)
          | _ -> false)
       | _ -> false)
    | None -> false

  (** val optimize_and_caller_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_and_caller_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.AND ->
         (match args with
          | [] -> val0 , false
          | arg1::l ->
            (match l with
             | [] -> val0 , false
             | arg2::l0 ->
               (match l0 with
                | [] ->
                  if (||)
                       (is_caller_mask arg1 arg2 fcmp maxid instk_height sb
                         ops)
                       (is_caller_mask arg2 arg1 fcmp maxid instk_height sb
                         ops)
                  then (SymbolicState.SymOp (Program.CALLER, [])) , true
                  else val0 , false
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_iszero3 =
 struct
  (** val optimize_iszero3_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_iszero3_sbinding val0 _ sb maxid _ _ =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.ISZERO ->
         (match args with
          | [] -> val0 , false
          | arg1::l ->
            (match l with
             | [] ->
               (match SymbolicState.follow_in_smap arg1 maxid sb with
                | Some f ->
                  let SymbolicState.FollowSmapVal (smv, idx', sb') = f in
                  (match smv with
                   | SymbolicState.SymOp (label0, args0) ->
                     (match label0 with
                      | Program.ISZERO ->
                        (match args0 with
                         | [] -> val0 , false
                         | arg2::l0 ->
                           (match l0 with
                            | [] ->
                              (match SymbolicState.follow_in_smap arg2 idx'
                                       sb' with
                               | Some f0 ->
                                 let SymbolicState.FollowSmapVal (smv0, _, _) =
                                   f0
                                 in
                                 (match smv0 with
                                  | SymbolicState.SymOp (label1, args1) ->
                                    (match label1 with
                                     | Program.ISZERO ->
                                       (match args1 with
                                        | [] -> val0 , false
                                        | arg3::l1 ->
                                          (match l1 with
                                           | [] ->
                                             (SymbolicState.SymOp
                                               (Program.ISZERO,
                                               (arg3::[]))) , true
                                           | _::_ -> val0 , false))
                                     | _ -> val0 , false)
                                  | _ -> val0 , false)
                               | None -> val0 , false)
                            | _::_ -> val0 , false))
                      | _ -> val0 , false)
                   | _ -> val0 , false)
                | None -> val0 , false)
             | _::_ -> val0 , false))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_add_sub =
 struct
  (** val is_sub_x :
      SymbolicState.sstack_val -> SymbolicState.sstack_val ->
      SymbolicStateCmp.sstack_val_cmp_t -> nat -> nat ->
      SymbolicState.sbindings -> StackOpInstrs.stack_op_instr_map ->
      SymbolicState.sstack_val option **)

  let is_sub_x sv x fcmp maxid instk_height sb ops =
    match SymbolicState.follow_in_smap sv maxid sb with
    | Some f ->
      let SymbolicState.FollowSmapVal (smv, _, _) = f in
      (match smv with
       | SymbolicState.SymOp (label, args) ->
         (match label with
          | Program.SUB ->
            (match args with
             | [] -> None
             | arg1::l ->
               (match l with
                | [] -> None
                | arg2::l0 ->
                  (match l0 with
                   | [] ->
                     if fcmp arg2 x maxid sb maxid sb instk_height ops
                     then Some arg1
                     else None
                   | _::_ -> None)))
          | _ -> None)
       | _ -> None)
    | None -> None

  (** val optimize_add_sub_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_add_sub_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.ADD ->
         (match args with
          | [] -> val0 , false
          | arg1::l ->
            (match l with
             | [] -> val0 , false
             | arg2::l0 ->
               (match l0 with
                | [] ->
                  (match is_sub_x arg1 arg2 fcmp maxid instk_height sb ops with
                   | Some y -> (SymbolicState.SymBasicVal y) , true
                   | None ->
                     (match is_sub_x arg2 arg1 fcmp maxid instk_height sb ops with
                      | Some y -> (SymbolicState.SymBasicVal y) , true
                      | None -> val0 , false))
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_shl_zero_x =
 struct
  (** val optimize_shl_zero_x_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_shl_zero_x_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.SHL ->
         (match args with
          | [] -> val0 , false
          | arg1::l ->
            (match l with
             | [] -> val0 , false
             | arg2::l0 ->
               (match l0 with
                | [] ->
                  if fcmp arg1 (SymbolicState.Val Constants.coq_WZero) maxid
                       sb maxid sb instk_height ops
                  then (SymbolicState.SymBasicVal arg2) , true
                  else val0 , false
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_sub_zero =
 struct
  (** val optimize_sub_zero_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_sub_zero_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.SUB ->
         (match args with
          | [] -> val0 , false
          | arg1::l ->
            (match l with
             | [] -> val0 , false
             | arg2::l0 ->
               (match l0 with
                | [] ->
                  if fcmp arg2 (SymbolicState.Val Constants.coq_WZero) maxid
                       sb maxid sb instk_height ops
                  then (SymbolicState.SymBasicVal arg1) , true
                  else val0 , false
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_shl_x_zero =
 struct
  (** val optimize_shl_x_zero_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_shl_x_zero_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.SHL ->
         (match args with
          | [] -> val0 , false
          | _::l ->
            (match l with
             | [] -> val0 , false
             | arg2::l0 ->
               (match l0 with
                | [] ->
                  if fcmp arg2 (SymbolicState.Val Constants.coq_WZero) maxid
                       sb maxid sb instk_height ops
                  then (SymbolicState.SymBasicVal (SymbolicState.Val
                         Constants.coq_WZero)) , true
                  else val0 , false
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_mul_zero =
 struct
  (** val optimize_mul_zero_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_mul_zero_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.MUL ->
         (match args with
          | [] -> val0 , false
          | arg1::l ->
            (match l with
             | [] -> val0 , false
             | arg2::l0 ->
               (match l0 with
                | [] ->
                  if fcmp arg1 (SymbolicState.Val Constants.coq_WZero) maxid
                       sb maxid sb instk_height ops
                  then (SymbolicState.SymBasicVal (SymbolicState.Val
                         Constants.coq_WZero)) , true
                  else if fcmp arg2 (SymbolicState.Val Constants.coq_WZero)
                            maxid sb maxid sb instk_height ops
                       then (SymbolicState.SymBasicVal (SymbolicState.Val
                              Constants.coq_WZero)) , true
                       else val0 , false
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_div_x_x =
 struct
  (** val eq_and_diff_zero :
      SymbolicState.sstack_val -> SymbolicState.sstack_val ->
      SymbolicStateCmp.sstack_val_cmp_t -> nat -> SymbolicState.sbindings ->
      nat -> StackOpInstrs.stack_op_instr_map -> bool **)

  let eq_and_diff_zero arg1 arg2 fcmp maxid sb instk_height ops =
    if fcmp arg1 arg2 maxid sb maxid sb instk_height ops
    then (match SymbolicState.follow_in_smap arg2 maxid sb with
          | Some f ->
            let SymbolicState.FollowSmapVal (smv, _, _) = f in
            (match smv with
             | SymbolicState.SymBasicVal val0 ->
               (match val0 with
                | SymbolicState.Val v ->
                  negb (weqb Constants.coq_EVMWordSize v Constants.coq_WZero)
                | _ -> false)
             | _ -> false)
          | None -> false)
    else false

  (** val optimize_div_x_x_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_div_x_x_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.DIV ->
         (match args with
          | [] -> val0 , false
          | arg1::l ->
            (match l with
             | [] -> val0 , false
             | arg2::l0 ->
               (match l0 with
                | [] ->
                  if eq_and_diff_zero arg1 arg2 fcmp maxid sb instk_height ops
                  then (SymbolicState.SymBasicVal (SymbolicState.Val
                         Constants.coq_WOne)) , true
                  else val0 , false
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_div_zero =
 struct
  (** val optimize_div_zero_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_div_zero_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.DIV ->
         (match args with
          | [] -> val0 , false
          | _::l ->
            (match l with
             | [] -> val0 , false
             | arg2::l0 ->
               (match l0 with
                | [] ->
                  if fcmp arg2 (SymbolicState.Val Constants.coq_WZero) maxid
                       sb maxid sb instk_height ops
                  then (SymbolicState.SymBasicVal (SymbolicState.Val
                         Constants.coq_WZero)) , true
                  else val0 , false
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_mod_one =
 struct
  (** val optimize_mod_one_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_mod_one_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.MOD ->
         (match args with
          | [] -> val0 , false
          | _::l ->
            (match l with
             | [] -> val0 , false
             | arg2::l0 ->
               (match l0 with
                | [] ->
                  if fcmp arg2 (SymbolicState.Val Constants.coq_WOne) maxid
                       sb maxid sb instk_height ops
                  then (SymbolicState.SymBasicVal (SymbolicState.Val
                         Constants.coq_WZero)) , true
                  else val0 , false
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_mod_zero =
 struct
  (** val optimize_mod_zero_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_mod_zero_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.MOD ->
         (match args with
          | [] -> val0 , false
          | _::l ->
            (match l with
             | [] -> val0 , false
             | arg2::l0 ->
               (match l0 with
                | [] ->
                  if fcmp arg2 (SymbolicState.Val Constants.coq_WZero) maxid
                       sb maxid sb instk_height ops
                  then (SymbolicState.SymBasicVal (SymbolicState.Val
                         Constants.coq_WZero)) , true
                  else val0 , false
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_mod_x_x =
 struct
  (** val optimize_mod_x_x_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_mod_x_x_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.MOD ->
         (match args with
          | [] -> val0 , false
          | arg1::l ->
            (match l with
             | [] -> val0 , false
             | arg2::l0 ->
               (match l0 with
                | [] ->
                  if fcmp arg1 arg2 maxid sb maxid sb instk_height ops
                  then (SymbolicState.SymBasicVal (SymbolicState.Val
                         Constants.coq_WZero)) , true
                  else val0 , false
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_exp_x_zero =
 struct
  (** val optimize_exp_x_zero_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_exp_x_zero_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.EXP ->
         (match args with
          | [] -> val0 , false
          | _::l ->
            (match l with
             | [] -> val0 , false
             | arg2::l0 ->
               (match l0 with
                | [] ->
                  if fcmp arg2 (SymbolicState.Val Constants.coq_WZero) maxid
                       sb maxid sb instk_height ops
                  then (SymbolicState.SymBasicVal (SymbolicState.Val
                         Constants.coq_WOne)) , true
                  else val0 , false
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_exp_x_one =
 struct
  (** val optimize_exp_x_one_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_exp_x_one_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.EXP ->
         (match args with
          | [] -> val0 , false
          | arg1::l ->
            (match l with
             | [] -> val0 , false
             | arg2::l0 ->
               (match l0 with
                | [] ->
                  if fcmp arg2 (SymbolicState.Val Constants.coq_WOne) maxid
                       sb maxid sb instk_height ops
                  then (SymbolicState.SymBasicVal arg1) , true
                  else val0 , false
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_exp_one_x =
 struct
  (** val optimize_exp_one_x_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_exp_one_x_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.EXP ->
         (match args with
          | [] -> val0 , false
          | arg1::l ->
            (match l with
             | [] -> val0 , false
             | _::l0 ->
               (match l0 with
                | [] ->
                  if fcmp arg1 (SymbolicState.Val Constants.coq_WOne) maxid
                       sb maxid sb instk_height ops
                  then (SymbolicState.SymBasicVal (SymbolicState.Val
                         Constants.coq_WOne)) , true
                  else val0 , false
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_exp_zero_x =
 struct
  (** val optimize_exp_zero_x_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_exp_zero_x_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.EXP ->
         (match args with
          | [] -> val0 , false
          | arg1::l ->
            (match l with
             | [] -> val0 , false
             | arg2::l0 ->
               (match l0 with
                | [] ->
                  if fcmp arg1 (SymbolicState.Val Constants.coq_WZero) maxid
                       sb maxid sb instk_height ops
                  then (SymbolicState.SymOp (Program.ISZERO,
                         (arg2::[]))) , true
                  else val0 , false
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_exp_two_x =
 struct
  (** val coq_WTwo : Constants.coq_EVMWord **)

  let coq_WTwo =
    natToWord Constants.coq_EVMWordSize (S (S O))

  (** val optimize_exp_two_x_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_exp_two_x_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.EXP ->
         (match args with
          | [] -> val0 , false
          | arg1::l ->
            (match l with
             | [] -> val0 , false
             | arg2::l0 ->
               (match l0 with
                | [] ->
                  if fcmp arg1 (SymbolicState.Val coq_WTwo) maxid sb maxid sb
                       instk_height ops
                  then (SymbolicState.SymOp (Program.SHL,
                         (arg2::((SymbolicState.Val
                         Constants.coq_WOne)::[])))) , true
                  else val0 , false
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_gt_zero_x =
 struct
  (** val optimize_gt_zero_x_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_gt_zero_x_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.GT ->
         (match args with
          | [] -> val0 , false
          | arg1::l ->
            (match l with
             | [] -> val0 , false
             | _::l0 ->
               (match l0 with
                | [] ->
                  if fcmp arg1 (SymbolicState.Val Constants.coq_WZero) maxid
                       sb maxid sb instk_height ops
                  then (SymbolicState.SymBasicVal (SymbolicState.Val
                         Constants.coq_WZero)) , true
                  else val0 , false
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_gt_x_x =
 struct
  (** val optimize_gt_x_x_sbinding : Optimizations_Def.opt_smap_value_type **)

  let optimize_gt_x_x_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.GT ->
         (match args with
          | [] -> val0 , false
          | arg1::l ->
            (match l with
             | [] -> val0 , false
             | arg2::l0 ->
               (match l0 with
                | [] ->
                  if fcmp arg1 arg2 maxid sb maxid sb instk_height ops
                  then (SymbolicState.SymBasicVal (SymbolicState.Val
                         Constants.coq_WZero)) , true
                  else val0 , false
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_lt_x_zero =
 struct
  (** val optimize_lt_x_zero_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_lt_x_zero_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.LT ->
         (match args with
          | [] -> val0 , false
          | _::l ->
            (match l with
             | [] -> val0 , false
             | arg2::l0 ->
               (match l0 with
                | [] ->
                  if fcmp arg2 (SymbolicState.Val Constants.coq_WZero) maxid
                       sb maxid sb instk_height ops
                  then (SymbolicState.SymBasicVal (SymbolicState.Val
                         Constants.coq_WZero)) , true
                  else val0 , false
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_lt_x_x =
 struct
  (** val optimize_lt_x_x_sbinding : Optimizations_Def.opt_smap_value_type **)

  let optimize_lt_x_x_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.LT ->
         (match args with
          | [] -> val0 , false
          | arg1::l ->
            (match l with
             | [] -> val0 , false
             | arg2::l0 ->
               (match l0 with
                | [] ->
                  if fcmp arg1 arg2 maxid sb maxid sb instk_height ops
                  then (SymbolicState.SymBasicVal (SymbolicState.Val
                         Constants.coq_WZero)) , true
                  else val0 , false
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_eq_x_x =
 struct
  (** val optimize_eq_x_x_sbinding : Optimizations_Def.opt_smap_value_type **)

  let optimize_eq_x_x_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.EQ ->
         (match args with
          | [] -> val0 , false
          | arg1::l ->
            (match l with
             | [] -> val0 , false
             | arg2::l0 ->
               (match l0 with
                | [] ->
                  if fcmp arg1 arg2 maxid sb maxid sb instk_height ops
                  then (SymbolicState.SymBasicVal (SymbolicState.Val
                         Constants.coq_WOne)) , true
                  else val0 , false
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_iszero_sub =
 struct
  (** val is_sub :
      SymbolicState.sstack_val -> SymbolicStateCmp.sstack_val_cmp_t -> nat ->
      nat -> SymbolicState.sbindings -> StackOpInstrs.stack_op_instr_map ->
      SymbolicState.sstack_val list option **)

  let is_sub sv _ maxid _ sb _ =
    match SymbolicState.follow_in_smap sv maxid sb with
    | Some f ->
      let SymbolicState.FollowSmapVal (smv, _, _) = f in
      (match smv with
       | SymbolicState.SymOp (label, args) ->
         (match label with
          | Program.SUB ->
            (match args with
             | [] -> None
             | arg1::l ->
               (match l with
                | [] -> None
                | arg2::l0 ->
                  (match l0 with
                   | [] -> Some (arg1::(arg2::[]))
                   | _::_ -> None)))
          | _ -> None)
       | _ -> None)
    | None -> None

  (** val optimize_iszero_sub_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_iszero_sub_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.ISZERO ->
         (match args with
          | [] -> val0 , false
          | arg1::l ->
            (match l with
             | [] ->
               (match is_sub arg1 fcmp maxid instk_height sb ops with
                | Some args0 ->
                  (SymbolicState.SymOp (Program.EQ, args0)) , true
                | None -> val0 , false)
             | _::_ -> val0 , false))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_iszero_lt =
 struct
  (** val is_lt_zero :
      SymbolicState.sstack_val -> SymbolicStateCmp.sstack_val_cmp_t -> nat ->
      nat -> SymbolicState.sbindings -> StackOpInstrs.stack_op_instr_map ->
      SymbolicState.sstack_val option **)

  let is_lt_zero sv fcmp maxid instk_height sb ops =
    match SymbolicState.follow_in_smap sv maxid sb with
    | Some f ->
      let SymbolicState.FollowSmapVal (smv, _, _) = f in
      (match smv with
       | SymbolicState.SymOp (label, args) ->
         (match label with
          | Program.LT ->
            (match args with
             | [] -> None
             | arg1::l ->
               (match l with
                | [] -> None
                | arg2::l0 ->
                  (match l0 with
                   | [] ->
                     if fcmp arg1 (SymbolicState.Val Constants.coq_WZero)
                          maxid sb maxid sb instk_height ops
                     then Some arg2
                     else None
                   | _::_ -> None)))
          | _ -> None)
       | _ -> None)
    | None -> None

  (** val optimize_iszero_lt_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_iszero_lt_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.ISZERO ->
         (match args with
          | [] -> val0 , false
          | arg::l ->
            (match l with
             | [] ->
               (match is_lt_zero arg fcmp maxid instk_height sb ops with
                | Some x ->
                  (SymbolicState.SymOp (Program.ISZERO, (x::[]))) , true
                | None -> val0 , false)
             | _::_ -> val0 , false))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_iszero_xor =
 struct
  (** val is_xor :
      SymbolicState.sstack_val -> SymbolicStateCmp.sstack_val_cmp_t -> nat ->
      nat -> SymbolicState.sbindings -> StackOpInstrs.stack_op_instr_map ->
      SymbolicState.sstack_val list option **)

  let is_xor sv _ maxid _ sb _ =
    match SymbolicState.follow_in_smap sv maxid sb with
    | Some f ->
      let SymbolicState.FollowSmapVal (smv, _, _) = f in
      (match smv with
       | SymbolicState.SymOp (label, args) ->
         (match label with
          | Program.XOR ->
            (match args with
             | [] -> None
             | arg1::l ->
               (match l with
                | [] -> None
                | arg2::l0 ->
                  (match l0 with
                   | [] -> Some (arg1::(arg2::[]))
                   | _::_ -> None)))
          | _ -> None)
       | _ -> None)
    | None -> None

  (** val optimize_iszero_xor_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_iszero_xor_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.ISZERO ->
         (match args with
          | [] -> val0 , false
          | arg1::l ->
            (match l with
             | [] ->
               (match is_xor arg1 fcmp maxid instk_height sb ops with
                | Some args0 ->
                  (SymbolicState.SymOp (Program.EQ, args0)) , true
                | None -> val0 , false)
             | _::_ -> val0 , false))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_iszero2_gt =
 struct
  (** val optimize_iszero2_gt_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_iszero2_gt_sbinding val0 _ sb maxid _ _ =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.ISZERO ->
         (match args with
          | [] -> val0 , false
          | arg1::l ->
            (match l with
             | [] ->
               (match SymbolicState.follow_in_smap arg1 maxid sb with
                | Some f ->
                  let SymbolicState.FollowSmapVal (smv, idx', sb') = f in
                  (match smv with
                   | SymbolicState.SymOp (label0, args0) ->
                     (match label0 with
                      | Program.ISZERO ->
                        (match args0 with
                         | [] -> val0 , false
                         | arg2::l0 ->
                           (match l0 with
                            | [] ->
                              (match SymbolicState.follow_in_smap arg2 idx'
                                       sb' with
                               | Some f0 ->
                                 let SymbolicState.FollowSmapVal (smv0, _, _) =
                                   f0
                                 in
                                 (match smv0 with
                                  | SymbolicState.SymOp (label1, args1) ->
                                    (match label1 with
                                     | Program.GT ->
                                       (match args1 with
                                        | [] -> val0 , false
                                        | x::l1 ->
                                          (match l1 with
                                           | [] -> val0 , false
                                           | y::l2 ->
                                             (match l2 with
                                              | [] ->
                                                (SymbolicState.SymOp
                                                  (Program.GT,
                                                  (x::(y::[])))) , true
                                              | _::_ -> val0 , false)))
                                     | _ -> val0 , false)
                                  | _ -> val0 , false)
                               | None -> val0 , false)
                            | _::_ -> val0 , false))
                      | _ -> val0 , false)
                   | _ -> val0 , false)
                | None -> val0 , false)
             | _::_ -> val0 , false))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_iszero2_lt =
 struct
  (** val optimize_iszero2_lt_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_iszero2_lt_sbinding val0 _ sb maxid _ _ =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.ISZERO ->
         (match args with
          | [] -> val0 , false
          | arg1::l ->
            (match l with
             | [] ->
               (match SymbolicState.follow_in_smap arg1 maxid sb with
                | Some f ->
                  let SymbolicState.FollowSmapVal (smv, idx', sb') = f in
                  (match smv with
                   | SymbolicState.SymOp (label0, args0) ->
                     (match label0 with
                      | Program.ISZERO ->
                        (match args0 with
                         | [] -> val0 , false
                         | arg2::l0 ->
                           (match l0 with
                            | [] ->
                              (match SymbolicState.follow_in_smap arg2 idx'
                                       sb' with
                               | Some f0 ->
                                 let SymbolicState.FollowSmapVal (smv0, _, _) =
                                   f0
                                 in
                                 (match smv0 with
                                  | SymbolicState.SymOp (label1, args1) ->
                                    (match label1 with
                                     | Program.LT ->
                                       (match args1 with
                                        | [] -> val0 , false
                                        | x::l1 ->
                                          (match l1 with
                                           | [] -> val0 , false
                                           | y::l2 ->
                                             (match l2 with
                                              | [] ->
                                                (SymbolicState.SymOp
                                                  (Program.LT,
                                                  (x::(y::[])))) , true
                                              | _::_ -> val0 , false)))
                                     | _ -> val0 , false)
                                  | _ -> val0 , false)
                               | None -> val0 , false)
                            | _::_ -> val0 , false))
                      | _ -> val0 , false)
                   | _ -> val0 , false)
                | None -> val0 , false)
             | _::_ -> val0 , false))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_iszero2_eq =
 struct
  (** val optimize_iszero2_eq_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_iszero2_eq_sbinding val0 _ sb maxid _ _ =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.ISZERO ->
         (match args with
          | [] -> val0 , false
          | arg1::l ->
            (match l with
             | [] ->
               (match SymbolicState.follow_in_smap arg1 maxid sb with
                | Some f ->
                  let SymbolicState.FollowSmapVal (smv, idx', sb') = f in
                  (match smv with
                   | SymbolicState.SymOp (label0, args0) ->
                     (match label0 with
                      | Program.ISZERO ->
                        (match args0 with
                         | [] -> val0 , false
                         | arg2::l0 ->
                           (match l0 with
                            | [] ->
                              (match SymbolicState.follow_in_smap arg2 idx'
                                       sb' with
                               | Some f0 ->
                                 let SymbolicState.FollowSmapVal (smv0, _, _) =
                                   f0
                                 in
                                 (match smv0 with
                                  | SymbolicState.SymOp (label1, args1) ->
                                    (match label1 with
                                     | Program.EQ ->
                                       (match args1 with
                                        | [] -> val0 , false
                                        | x::l1 ->
                                          (match l1 with
                                           | [] -> val0 , false
                                           | y::l2 ->
                                             (match l2 with
                                              | [] ->
                                                (SymbolicState.SymOp
                                                  (Program.EQ,
                                                  (x::(y::[])))) , true
                                              | _::_ -> val0 , false)))
                                     | _ -> val0 , false)
                                  | _ -> val0 , false)
                               | None -> val0 , false)
                            | _::_ -> val0 , false))
                      | _ -> val0 , false)
                   | _ -> val0 , false)
                | None -> val0 , false)
             | _::_ -> val0 , false))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_xor_x_x =
 struct
  (** val optimize_xor_x_x_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_xor_x_x_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.XOR ->
         (match args with
          | [] -> val0 , false
          | arg1::l ->
            (match l with
             | [] -> val0 , false
             | arg2::l0 ->
               (match l0 with
                | [] ->
                  if fcmp arg1 arg2 maxid sb maxid sb instk_height ops
                  then (SymbolicState.SymBasicVal (SymbolicState.Val
                         Constants.coq_WZero)) , true
                  else val0 , false
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module Opt_xor_zero =
 struct
  (** val optimize_xor_zero_sbinding :
      Optimizations_Def.opt_smap_value_type **)

  let optimize_xor_zero_sbinding val0 fcmp sb maxid instk_height ops =
    match val0 with
    | SymbolicState.SymOp (label, args) ->
      (match label with
       | Program.XOR ->
         (match args with
          | [] -> val0 , false
          | arg1::l ->
            (match l with
             | [] -> val0 , false
             | arg2::l0 ->
               (match l0 with
                | [] ->
                  if fcmp arg1 (SymbolicState.Val Constants.coq_WZero) maxid
                       sb maxid sb instk_height ops
                  then (SymbolicState.SymBasicVal arg2) , true
                  else if fcmp arg2 (SymbolicState.Val Constants.coq_WZero)
                            maxid sb maxid sb instk_height ops
                       then (SymbolicState.SymBasicVal arg1) , true
                       else val0 , false
                | _::_ -> val0 , false)))
       | _ -> val0 , false)
    | _ -> val0 , false
 end

module MemoryOpsSolvers =
 struct
  type mload_solver_type =
    SymbolicState.sstack_val -> SymbolicState.smemory -> nat ->
    SymbolicState.smap -> StackOpInstrs.stack_op_instr_map ->
    SymbolicState.smap_value

  type mload_solver_ext_type =
    SymbolicStateCmp.sstack_val_cmp_ext_1_t -> SymbolicState.sstack_val ->
    SymbolicState.smemory -> nat -> SymbolicState.smap ->
    StackOpInstrs.stack_op_instr_map -> SymbolicState.smap_value

  type smemory_updater_type =
    SymbolicState.sstack_val SymbolicState.memory_update ->
    SymbolicState.smemory -> nat -> SymbolicState.smap ->
    StackOpInstrs.stack_op_instr_map -> SymbolicState.smemory

  type smemory_updater_ext_type =
    SymbolicStateCmp.sstack_val_cmp_ext_1_t -> SymbolicState.sstack_val
    SymbolicState.memory_update -> SymbolicState.smemory -> nat ->
    SymbolicState.smap -> StackOpInstrs.stack_op_instr_map ->
    SymbolicState.smemory
 end

module StorageOpsSolvers =
 struct
  type sload_solver_type =
    SymbolicState.sstack_val -> SymbolicState.sstorage -> nat ->
    SymbolicState.smap -> StackOpInstrs.stack_op_instr_map ->
    SymbolicState.smap_value

  type sload_solver_ext_type =
    SymbolicStateCmp.sstack_val_cmp_ext_1_t -> SymbolicState.sstack_val ->
    SymbolicState.sstorage -> nat -> SymbolicState.smap ->
    StackOpInstrs.stack_op_instr_map -> SymbolicState.smap_value

  type sstorage_updater_type =
    SymbolicState.sstack_val SymbolicState.storage_update ->
    SymbolicState.sstorage -> nat -> SymbolicState.smap ->
    StackOpInstrs.stack_op_instr_map -> SymbolicState.sstorage

  type sstorage_updater_ext_type =
    SymbolicStateCmp.sstack_val_cmp_ext_1_t -> SymbolicState.sstack_val
    SymbolicState.storage_update -> SymbolicState.sstorage -> nat ->
    SymbolicState.smap -> StackOpInstrs.stack_op_instr_map ->
    SymbolicState.sstorage
 end

module SymbolicExecution =
 struct
  (** val push_s :
      Constants.coq_EVMWord -> SymbolicState.sstate ->
      StackOpInstrs.stack_op_instr_map -> SymbolicState.sstate option **)

  let push_s value sst _ =
    let sstk = SymbolicState.get_stack_sst sst in
    (match Misc.push (SymbolicState.Val value) sstk with
     | Some sstk' -> Some (SymbolicState.set_stack_sst sst sstk')
     | None -> None)

  (** val metapush_s :
      n -> n -> SymbolicState.sstate -> StackOpInstrs.stack_op_instr_map ->
      SymbolicState.sstate option **)

  let metapush_s cat value sst _ =
    let sstk = SymbolicState.get_stack_sst sst in
    let sm = SymbolicState.get_smap_sst sst in
    let v = SymbolicState.SymMETAPUSH (cat, value) in
    let key , sm' = SymbolicState.add_to_smap sm v in
    (match Misc.push (SymbolicState.FreshVar key) sstk with
     | Some sstk' ->
       let sst' = SymbolicState.set_stack_sst sst sstk' in
       let sst'' = SymbolicState.set_smap_sst sst' sm' in Some sst''
     | None -> None)

  (** val pop_s :
      SymbolicState.sstate -> StackOpInstrs.stack_op_instr_map ->
      SymbolicState.sstate option **)

  let pop_s sst _ =
    let sstk = SymbolicState.get_stack_sst sst in
    (match Misc.pop sstk with
     | Some sstk' -> Some (SymbolicState.set_stack_sst sst sstk')
     | None -> None)

  (** val dup_s :
      nat -> SymbolicState.sstate -> StackOpInstrs.stack_op_instr_map ->
      SymbolicState.sstate option **)

  let dup_s k sst _ =
    let sstk = SymbolicState.get_stack_sst sst in
    (match Misc.dup k sstk with
     | Some sstk' -> Some (SymbolicState.set_stack_sst sst sstk')
     | None -> None)

  (** val swap_s :
      nat -> SymbolicState.sstate -> StackOpInstrs.stack_op_instr_map ->
      SymbolicState.sstate option **)

  let swap_s k sst _ =
    let sstk = SymbolicState.get_stack_sst sst in
    (match Misc.swap k sstk with
     | Some sstk' -> Some (SymbolicState.set_stack_sst sst sstk')
     | None -> None)

  (** val mload_s :
      MemoryOpsSolvers.mload_solver_type -> SymbolicState.sstate ->
      StackOpInstrs.stack_op_instr_map -> SymbolicState.sstate option **)

  let mload_s mload_solver sst ops =
    let sm = SymbolicState.get_smap_sst sst in
    let smem = SymbolicState.get_memory_sst sst in
    (match SymbolicState.get_stack_sst sst with
     | [] -> None
     | soffset::sstk ->
       let smv =
         mload_solver soffset smem (SymbolicState.get_instk_height_sst sst)
           (SymbolicState.get_smap_sst sst) ops
       in
       let key , sm' = SymbolicState.add_to_smap sm smv in
       let sst' =
         SymbolicState.set_stack_sst sst ((SymbolicState.FreshVar key)::sstk)
       in
       let sst'' = SymbolicState.set_smap_sst sst' sm' in Some sst'')

  (** val sload_s :
      StorageOpsSolvers.sload_solver_type -> SymbolicState.sstate ->
      StackOpInstrs.stack_op_instr_map -> SymbolicState.sstate option **)

  let sload_s sload_solver sst ops =
    let sm = SymbolicState.get_smap_sst sst in
    let sstrg = SymbolicState.get_storage_sst sst in
    (match SymbolicState.get_stack_sst sst with
     | [] -> None
     | skey::sstk ->
       let smv =
         sload_solver skey sstrg (SymbolicState.get_instk_height_sst sst)
           (SymbolicState.get_smap_sst sst) ops
       in
       let key , sm' = SymbolicState.add_to_smap sm smv in
       let sst' =
         SymbolicState.set_stack_sst sst ((SymbolicState.FreshVar key)::sstk)
       in
       let sst'' = SymbolicState.set_smap_sst sst' sm' in Some sst'')

  (** val sha3_s :
      SymbolicState.sstate -> StackOpInstrs.stack_op_instr_map ->
      SymbolicState.sstate option **)

  let sha3_s sst _ =
    let sm = SymbolicState.get_smap_sst sst in
    let smem = SymbolicState.get_memory_sst sst in
    (match SymbolicState.get_stack_sst sst with
     | [] -> None
     | soffset::l ->
       (match l with
        | [] -> None
        | ssize::sstk ->
          let sv = SymbolicState.SymSHA3 (soffset, ssize, smem) in
          let key , sm' = SymbolicState.add_to_smap sm sv in
          let sst' =
            SymbolicState.set_stack_sst sst ((SymbolicState.FreshVar
              key)::sstk)
          in
          let sst'' = SymbolicState.set_smap_sst sst' sm' in Some sst''))

  (** val mstore8_s :
      MemoryOpsSolvers.smemory_updater_type -> SymbolicState.sstate ->
      StackOpInstrs.stack_op_instr_map -> SymbolicState.sstate option **)

  let mstore8_s smem_updater sst ops =
    match SymbolicState.get_stack_sst sst with
    | [] -> None
    | soffset::l ->
      (match l with
       | [] -> None
       | svalue::sstk ->
         let smem = SymbolicState.get_memory_sst sst in
         let smem' =
           smem_updater (SymbolicState.U_MSTORE8 (soffset, svalue)) smem
             (SymbolicState.get_instk_height_sst sst)
             (SymbolicState.get_smap_sst sst) ops
         in
         let sst' = SymbolicState.set_memory_sst sst smem' in
         let sst'' = SymbolicState.set_stack_sst sst' sstk in Some sst'')

  (** val mstore_s :
      MemoryOpsSolvers.smemory_updater_type -> SymbolicState.sstate ->
      StackOpInstrs.stack_op_instr_map -> SymbolicState.sstate option **)

  let mstore_s smem_updater sst ops =
    match SymbolicState.get_stack_sst sst with
    | [] -> None
    | soffset::l ->
      (match l with
       | [] -> None
       | svalue::sstk ->
         let smem = SymbolicState.get_memory_sst sst in
         let smem' =
           smem_updater (SymbolicState.U_MSTORE (soffset, svalue)) smem
             (SymbolicState.get_instk_height_sst sst)
             (SymbolicState.get_smap_sst sst) ops
         in
         let sst' = SymbolicState.set_memory_sst sst smem' in
         let sst'' = SymbolicState.set_stack_sst sst' sstk in Some sst'')

  (** val sstore_s :
      StorageOpsSolvers.sstorage_updater_type -> SymbolicState.sstate ->
      StackOpInstrs.stack_op_instr_map -> SymbolicState.sstate option **)

  let sstore_s sstrg_updater sst ops =
    match SymbolicState.get_stack_sst sst with
    | [] -> None
    | skey::l ->
      (match l with
       | [] -> None
       | svalue::sstk ->
         let sstrg = SymbolicState.get_storage_sst sst in
         let sstrg' =
           sstrg_updater (SymbolicState.U_SSTORE (skey, svalue)) sstrg
             (SymbolicState.get_instk_height_sst sst)
             (SymbolicState.get_smap_sst sst) ops
         in
         let sst' = SymbolicState.set_storage_sst sst sstrg' in
         let sst'' = SymbolicState.set_stack_sst sst' sstk in Some sst'')

  (** val exec_stack_op_intsr_s :
      Program.stack_op_instr -> SymbolicState.sstate ->
      StackOpInstrs.stack_op_instr_map -> SymbolicState.sstate option **)

  let exec_stack_op_intsr_s label sst ops =
    let StackOpInstrs.OpImp (nb_args, _, _, _) = ops label in
    let sstk = SymbolicState.get_stack_sst sst in
    (match Misc.firstn_e nb_args sstk with
     | Some s1 ->
       (match Misc.skipn_e nb_args sstk with
        | Some s2 ->
          let sm = SymbolicState.get_smap_sst sst in
          let v = SymbolicState.SymOp (label, s1) in
          let key , sm' = SymbolicState.add_to_smap sm v in
          let sst' =
            SymbolicState.set_stack_sst sst ((SymbolicState.FreshVar key)::s2)
          in
          let sst'' = SymbolicState.set_smap_sst sst' sm' in Some sst''
        | None -> None)
     | None -> None)

  (** val evm_exec_instr_s :
      MemoryOpsSolvers.smemory_updater_type ->
      StorageOpsSolvers.sstorage_updater_type ->
      MemoryOpsSolvers.mload_solver_type ->
      StorageOpsSolvers.sload_solver_type -> Program.instr ->
      SymbolicState.sstate -> StackOpInstrs.stack_op_instr_map ->
      SymbolicState.sstate option **)

  let evm_exec_instr_s smem_updater sstrg_updater mload_solver sload_solver inst sst ops =
    match inst with
    | Program.PUSH (_, w) ->
      push_s (nToWord Constants.coq_EVMWordSize w) sst ops
    | Program.METAPUSH (cat, v) -> metapush_s cat v sst ops
    | Program.POP -> pop_s sst ops
    | Program.DUP pos -> dup_s pos sst ops
    | Program.SWAP pos -> swap_s pos sst ops
    | Program.MLOAD -> mload_s mload_solver sst ops
    | Program.MSTORE -> mstore_s smem_updater sst ops
    | Program.MSTORE8 -> mstore8_s smem_updater sst ops
    | Program.SLOAD -> sload_s sload_solver sst ops
    | Program.SSTORE -> sstore_s sstrg_updater sst ops
    | Program.OpInstr label -> exec_stack_op_intsr_s label sst ops
    | _ -> sha3_s sst ops

  (** val evm_exec_block_s :
      MemoryOpsSolvers.smemory_updater_type ->
      StorageOpsSolvers.sstorage_updater_type ->
      MemoryOpsSolvers.mload_solver_type ->
      StorageOpsSolvers.sload_solver_type -> Program.block ->
      SymbolicState.sstate -> StackOpInstrs.stack_op_instr_map ->
      SymbolicState.sstate option **)

  let rec evm_exec_block_s smem_updater sstrg_updater mload_solver sload_solver p sst ops =
    match p with
    | [] -> Some sst
    | instr0::instrs' ->
      (match evm_exec_instr_s smem_updater sstrg_updater mload_solver
               sload_solver instr0 sst ops with
       | Some sst' ->
         evm_exec_block_s smem_updater sstrg_updater mload_solver
           sload_solver instrs' sst' ops
       | None -> None)

  (** val evm_sym_exec :
      MemoryOpsSolvers.smemory_updater_type ->
      StorageOpsSolvers.sstorage_updater_type ->
      MemoryOpsSolvers.mload_solver_type ->
      StorageOpsSolvers.sload_solver_type -> Program.block -> nat ->
      StackOpInstrs.stack_op_instr_map -> SymbolicState.sstate option **)

  let evm_sym_exec smem_updater sstrg_updater mload_solver sload_solver p instk_height ops =
    let sst = SymbolicState.gen_empty_sstate instk_height in
    evm_exec_block_s smem_updater sstrg_updater mload_solver sload_solver p
      sst ops
 end

module StorageOpsSolversImpl =
 struct
  (** val trivial_sload_solver :
      SymbolicStateCmp.sstack_val_cmp_ext_1_t -> SymbolicState.sstack_val ->
      SymbolicState.sstorage -> nat -> SymbolicState.smap ->
      StackOpInstrs.stack_op_instr_map -> SymbolicState.smap_value **)

  let trivial_sload_solver _ skey sstrg _ _ _ =
    SymbolicState.SymSLOAD (skey, sstrg)

  (** val trivial_sstorage_updater :
      SymbolicStateCmp.sstack_val_cmp_ext_1_t -> SymbolicState.sstack_val
      SymbolicState.storage_update -> SymbolicState.sstorage -> nat ->
      SymbolicState.smap -> StackOpInstrs.stack_op_instr_map ->
      SymbolicState.sstack_val SymbolicState.storage_update list **)

  let trivial_sstorage_updater _ update sstrg _ _ _ =
    update::sstrg

  (** val not_eq_keys :
      SymbolicState.sstack_val -> SymbolicState.sstack_val -> bool **)

  let not_eq_keys skey skey' =
    match skey with
    | SymbolicState.Val v1 ->
      (match skey' with
       | SymbolicState.Val v2 -> negb (weqb Constants.coq_EVMWordSize v1 v2)
       | _ -> false)
    | _ -> false

  (** val basic_sload_solver :
      SymbolicStateCmp.sstack_val_cmp_ext_1_t -> SymbolicState.sstack_val ->
      SymbolicState.sstorage -> nat -> SymbolicState.smap ->
      StackOpInstrs.stack_op_instr_map -> SymbolicState.smap_value **)

  let rec basic_sload_solver sstack_val_cmp skey sstrg instk_height m ops =
    match sstrg with
    | [] -> SymbolicState.SymSLOAD (skey, [])
    | s::sstrg' ->
      let SymbolicState.U_SSTORE (skey', svalue) = s in
      if sstack_val_cmp (S (SymbolicState.get_maxidx_smap m)) skey skey'
           (SymbolicState.get_maxidx_smap m)
           (SymbolicState.get_bindings_smap m)
           (SymbolicState.get_maxidx_smap m)
           (SymbolicState.get_bindings_smap m) instk_height ops
      then SymbolicState.SymBasicVal svalue
      else if not_eq_keys skey skey'
           then basic_sload_solver sstack_val_cmp skey sstrg' instk_height m
                  ops
           else SymbolicState.SymSLOAD (skey, sstrg)

  (** val basic_sload_updater_remove_dups :
      SymbolicStateCmp.sstack_val_cmp_ext_1_t -> SymbolicState.sstack_val ->
      SymbolicState.sstorage -> nat -> SymbolicState.smap ->
      StackOpInstrs.stack_op_instr_map -> SymbolicState.sstack_val
      SymbolicState.storage_update list **)

  let rec basic_sload_updater_remove_dups sstack_val_cmp skey sstrg instk_height m ops =
    match sstrg with
    | [] -> []
    | s::sstrg' ->
      let SymbolicState.U_SSTORE (skey', svalue) = s in
      if sstack_val_cmp (S (SymbolicState.get_maxidx_smap m)) skey skey'
           (SymbolicState.get_maxidx_smap m)
           (SymbolicState.get_bindings_smap m)
           (SymbolicState.get_maxidx_smap m)
           (SymbolicState.get_bindings_smap m) instk_height ops
      then basic_sload_updater_remove_dups sstack_val_cmp skey sstrg'
             instk_height m ops
      else if not_eq_keys skey skey'
           then (SymbolicState.U_SSTORE (skey',
                  svalue))::(basic_sload_updater_remove_dups sstack_val_cmp
                              skey sstrg' instk_height m ops)
           else sstrg

  (** val basic_sstorage_updater :
      SymbolicStateCmp.sstack_val_cmp_ext_1_t -> SymbolicState.sstack_val
      SymbolicState.storage_update -> SymbolicState.sstorage -> nat ->
      SymbolicState.smap -> StackOpInstrs.stack_op_instr_map ->
      SymbolicState.sstack_val SymbolicState.storage_update list **)

  let basic_sstorage_updater sstack_val_cmp update sstrg instk_height m ops =
    let SymbolicState.U_SSTORE (skey, _) = update in
    update::(basic_sload_updater_remove_dups sstack_val_cmp skey sstrg
              instk_height m ops)
 end

module MemoryOpsSolversImpl =
 struct
  (** val trivial_mload_solver :
      SymbolicStateCmp.sstack_val_cmp_ext_1_t -> SymbolicState.sstack_val ->
      SymbolicState.smemory -> nat -> SymbolicState.smap ->
      StackOpInstrs.stack_op_instr_map -> SymbolicState.smap_value **)

  let trivial_mload_solver _ soffset smem _ _ _ =
    SymbolicState.SymMLOAD (soffset, smem)

  (** val trivial_smemory_updater :
      SymbolicStateCmp.sstack_val_cmp_ext_1_t -> SymbolicState.sstack_val
      SymbolicState.memory_update -> SymbolicState.smemory -> nat ->
      SymbolicState.smap -> StackOpInstrs.stack_op_instr_map ->
      SymbolicState.sstack_val SymbolicState.memory_update list **)

  let trivial_smemory_updater _ update smem _ _ _ =
    update::smem

  (** val memory_slots_do_not_overlap :
      SymbolicState.sstack_val -> SymbolicState.sstack_val -> n -> n -> bool **)

  let memory_slots_do_not_overlap soffset soffset' size size' =
    match soffset with
    | SymbolicState.Val v1 ->
      (match soffset' with
       | SymbolicState.Val v2 ->
         let addr = wordToN Constants.coq_EVMWordSize v1 in
         let addr' = wordToN Constants.coq_EVMWordSize v2 in
         (||) (N.ltb (N.add addr size) addr') (N.ltb (N.add addr' size') addr)
       | _ -> false)
    | _ -> false

  (** val basic_mload_solver :
      SymbolicStateCmp.sstack_val_cmp_ext_1_t -> SymbolicState.sstack_val ->
      SymbolicState.smemory -> nat -> SymbolicState.smap ->
      StackOpInstrs.stack_op_instr_map -> SymbolicState.smap_value **)

  let rec basic_mload_solver sstack_val_cmp soffset smem instk_height m ops =
    match smem with
    | [] -> SymbolicState.SymMLOAD (soffset, [])
    | m0::smem' ->
      (match m0 with
       | SymbolicState.U_MSTORE (soffset', svalue) ->
         if sstack_val_cmp (S (SymbolicState.get_maxidx_smap m)) soffset
              soffset' (SymbolicState.get_maxidx_smap m)
              (SymbolicState.get_bindings_smap m)
              (SymbolicState.get_maxidx_smap m)
              (SymbolicState.get_bindings_smap m) instk_height ops
         then SymbolicState.SymBasicVal svalue
         else if memory_slots_do_not_overlap soffset soffset' (Npos (XI (XI
                   (XI (XI XH))))) (Npos (XI (XI (XI (XI XH)))))
              then basic_mload_solver sstack_val_cmp soffset smem'
                     instk_height m ops
              else SymbolicState.SymMLOAD (soffset, smem)
       | SymbolicState.U_MSTORE8 (soffset', _) ->
         if memory_slots_do_not_overlap soffset soffset' (Npos (XI (XI (XI
              (XI XH))))) N0
         then basic_mload_solver sstack_val_cmp soffset smem' instk_height m
                ops
         else SymbolicState.SymMLOAD (soffset, smem))

  (** val mstore8_is_included_in_mstore :
      SymbolicState.sstack_val -> SymbolicState.sstack_val -> bool **)

  let mstore8_is_included_in_mstore soffset_mstore8 soffset_mstore =
    match soffset_mstore8 with
    | SymbolicState.Val v1 ->
      (match soffset_mstore with
       | SymbolicState.Val v2 ->
         let addr_mstore8 = wordToN Constants.coq_EVMWordSize v1 in
         let addr_mstore = wordToN Constants.coq_EVMWordSize v2 in
         (&&) (N.leb addr_mstore addr_mstore8)
           (N.leb addr_mstore8
             (N.add addr_mstore (Npos (XI (XI (XI (XI XH)))))))
       | _ -> false)
    | _ -> false

  (** val basic_smemory_updater_remove_mstore_dups :
      SymbolicStateCmp.sstack_val_cmp_ext_1_t -> SymbolicState.sstack_val ->
      SymbolicState.smemory -> nat -> SymbolicState.smap ->
      StackOpInstrs.stack_op_instr_map -> SymbolicState.sstack_val
      SymbolicState.memory_update list **)

  let rec basic_smemory_updater_remove_mstore_dups sstack_val_cmp soffset_mstore smem instk_height m ops =
    match smem with
    | [] -> []
    | m0::smem' ->
      (match m0 with
       | SymbolicState.U_MSTORE (soffset', svalue) ->
         if sstack_val_cmp (S (SymbolicState.get_maxidx_smap m))
              soffset_mstore soffset' (SymbolicState.get_maxidx_smap m)
              (SymbolicState.get_bindings_smap m)
              (SymbolicState.get_maxidx_smap m)
              (SymbolicState.get_bindings_smap m) instk_height ops
         then basic_smemory_updater_remove_mstore_dups sstack_val_cmp
                soffset_mstore smem' instk_height m ops
         else (SymbolicState.U_MSTORE (soffset',
                svalue))::(basic_smemory_updater_remove_mstore_dups
                            sstack_val_cmp soffset_mstore smem' instk_height
                            m ops)
       | SymbolicState.U_MSTORE8 (soffset', svalue) ->
         if mstore8_is_included_in_mstore soffset' soffset_mstore
         then basic_smemory_updater_remove_mstore_dups sstack_val_cmp
                soffset_mstore smem' instk_height m ops
         else (SymbolicState.U_MSTORE8 (soffset',
                svalue))::(basic_smemory_updater_remove_mstore_dups
                            sstack_val_cmp soffset_mstore smem' instk_height
                            m ops))

  (** val basic_smemory_updater_remove_mstore8_dups :
      SymbolicStateCmp.sstack_val_cmp_ext_1_t -> SymbolicState.sstack_val ->
      SymbolicState.smemory -> nat -> SymbolicState.smap ->
      StackOpInstrs.stack_op_instr_map -> SymbolicState.sstack_val
      SymbolicState.memory_update list **)

  let rec basic_smemory_updater_remove_mstore8_dups sstack_val_cmp soffset_mstore8 smem instk_height m ops =
    match smem with
    | [] -> []
    | m0::smem' ->
      (match m0 with
       | SymbolicState.U_MSTORE (soffset', svalue) ->
         (SymbolicState.U_MSTORE (soffset',
           svalue))::(basic_smemory_updater_remove_mstore8_dups
                       sstack_val_cmp soffset_mstore8 smem' instk_height m
                       ops)
       | SymbolicState.U_MSTORE8 (soffset', svalue) ->
         if sstack_val_cmp (S (SymbolicState.get_maxidx_smap m))
              soffset_mstore8 soffset' (SymbolicState.get_maxidx_smap m)
              (SymbolicState.get_bindings_smap m)
              (SymbolicState.get_maxidx_smap m)
              (SymbolicState.get_bindings_smap m) instk_height ops
         then basic_smemory_updater_remove_mstore8_dups sstack_val_cmp
                soffset_mstore8 smem' instk_height m ops
         else (SymbolicState.U_MSTORE8 (soffset',
                svalue))::(basic_smemory_updater_remove_mstore8_dups
                            sstack_val_cmp soffset_mstore8 smem' instk_height
                            m ops))

  (** val basic_smemory_updater :
      SymbolicStateCmp.sstack_val_cmp_ext_1_t -> SymbolicState.sstack_val
      SymbolicState.memory_update -> SymbolicState.smemory -> nat ->
      SymbolicState.smap -> StackOpInstrs.stack_op_instr_map ->
      SymbolicState.sstack_val SymbolicState.memory_update list **)

  let basic_smemory_updater sstack_val_cmp update smem instk_height m ops =
    match update with
    | SymbolicState.U_MSTORE (soffset, _) ->
      update::(basic_smemory_updater_remove_mstore_dups sstack_val_cmp
                soffset smem instk_height m ops)
    | SymbolicState.U_MSTORE8 (soffset, _) ->
      update::(basic_smemory_updater_remove_mstore8_dups sstack_val_cmp
                soffset smem instk_height m ops)
 end

module SStackValCmpImpl =
 struct
  (** val trivial_compare_sstack_val :
      SymbolicStateCmp.smemory_cmp_ext_t ->
      SymbolicStateCmp.sstorage_cmp_ext_t -> SymbolicStateCmp.sha3_cmp_ext_t
      -> nat -> SymbolicState.sstack_val -> SymbolicState.sstack_val -> nat
      -> SymbolicState.sbindings -> nat -> SymbolicState.sbindings -> nat ->
      StackOpInstrs.stack_op_instr_map -> bool **)

  let trivial_compare_sstack_val _ _ _ _ _ _ _ _ _ _ _ _ =
    false

  (** val basic_compare_sstack_val :
      SymbolicStateCmp.smemory_cmp_ext_t ->
      SymbolicStateCmp.sstorage_cmp_ext_t -> SymbolicStateCmp.sha3_cmp_ext_t
      -> nat -> SymbolicState.sstack_val -> SymbolicState.sstack_val -> nat
      -> SymbolicState.sbindings -> nat -> SymbolicState.sbindings -> nat ->
      StackOpInstrs.stack_op_instr_map -> bool **)

  let rec basic_compare_sstack_val smemory_cmp sstorage_cmp sha3_cmp d sv1 sv2 maxidx1 sb1 maxidx2 sb2 instk_height ops =
    match d with
    | O -> false
    | S d' ->
      let basic_compare_sstack_val_rec =
        basic_compare_sstack_val smemory_cmp sstorage_cmp sha3_cmp d'
      in
      (match SymbolicState.follow_in_smap sv1 maxidx1 sb1 with
       | Some f ->
         let SymbolicState.FollowSmapVal (smv1, maxidx1', sb1') = f in
         (match SymbolicState.follow_in_smap sv2 maxidx2 sb2 with
          | Some f0 ->
            let SymbolicState.FollowSmapVal (smv2, maxidx2', sb2') = f0 in
            (match smv1 with
             | SymbolicState.SymBasicVal sv1' ->
               (match smv2 with
                | SymbolicState.SymBasicVal sv2' ->
                  (match sv1' with
                   | SymbolicState.Val w1 ->
                     (match sv2' with
                      | SymbolicState.Val w2 ->
                        weqb Constants.coq_EVMWordSize w1 w2
                      | _ -> false)
                   | SymbolicState.InStackVar n1 ->
                     (match sv2' with
                      | SymbolicState.InStackVar n2 ->
                        (&&) (eqb n1 n2)
                          ((&&) (ltb n1 instk_height) (ltb n2 instk_height))
                      | _ -> false)
                   | SymbolicState.FreshVar _ -> false)
                | _ -> false)
             | SymbolicState.SymMETAPUSH (cat1, v1) ->
               (match smv2 with
                | SymbolicState.SymMETAPUSH (cat2, v2) ->
                  (&&) (N.eqb cat1 cat2) (N.eqb v1 v2)
                | _ -> false)
             | SymbolicState.SymOp (label1, args1) ->
               (match smv2 with
                | SymbolicState.SymOp (label2, args2) ->
                  if Program.eqb_stack_op_instr label1 label2
                  then let StackOpInstrs.OpImp (_, _, h_Comm, _) = ops label1
                       in
                       if Misc.fold_right_two_lists (fun e1 e2 ->
                            basic_compare_sstack_val_rec e1 e2 maxidx1' sb1'
                              maxidx2' sb2' instk_height ops) args1 args2
                       then true
                       else (match h_Comm with
                             | Some _ ->
                               (match args1 with
                                | [] -> false
                                | a1::l ->
                                  (match l with
                                   | [] -> false
                                   | a2::l0 ->
                                     (match l0 with
                                      | [] ->
                                        (match args2 with
                                         | [] -> false
                                         | b1::l1 ->
                                           (match l1 with
                                            | [] -> false
                                            | b2::l2 ->
                                              (match l2 with
                                               | [] ->
                                                 if basic_compare_sstack_val_rec
                                                      a1 b2 maxidx1' sb1'
                                                      maxidx2' sb2'
                                                      instk_height ops
                                                 then basic_compare_sstack_val_rec
                                                        a2 b1 maxidx1' sb1'
                                                        maxidx2' sb2'
                                                        instk_height ops
                                                 else false
                                               | _::_ -> false)))
                                      | _::_ -> false)))
                             | None -> false)
                  else false
                | _ -> false)
             | SymbolicState.SymMLOAD (soffset1, smem1) ->
               (match smv2 with
                | SymbolicState.SymMLOAD (soffset2, smem2) ->
                  if basic_compare_sstack_val smemory_cmp sstorage_cmp
                       sha3_cmp d' soffset1 soffset2 maxidx1' sb1' maxidx2'
                       sb2' instk_height ops
                  then smemory_cmp basic_compare_sstack_val_rec smem1 smem2
                         maxidx1' sb1' maxidx2' sb2' instk_height ops
                  else false
                | _ -> false)
             | SymbolicState.SymSLOAD (skey1, sstrg1) ->
               (match smv2 with
                | SymbolicState.SymSLOAD (skey2, sstrg2) ->
                  if basic_compare_sstack_val smemory_cmp sstorage_cmp
                       sha3_cmp d' skey1 skey2 maxidx1' sb1' maxidx2' sb2'
                       instk_height ops
                  then sstorage_cmp basic_compare_sstack_val_rec sstrg1
                         sstrg2 maxidx1' sb1' maxidx2' sb2' instk_height ops
                  else false
                | _ -> false)
             | SymbolicState.SymSHA3 (soffset1, ssize1, smem1) ->
               (match smv2 with
                | SymbolicState.SymSHA3 (soffset2, ssize2, smem2) ->
                  if if basic_compare_sstack_val_rec soffset1 soffset2
                          maxidx1' sb1' maxidx2' sb2' instk_height ops
                     then if basic_compare_sstack_val_rec ssize1 ssize2
                               maxidx1' sb1' maxidx2' sb2' instk_height ops
                          then smemory_cmp basic_compare_sstack_val_rec smem1
                                 smem2 maxidx1' sb1' maxidx2' sb2'
                                 instk_height ops
                          else false
                     else false
                  then true
                  else sha3_cmp basic_compare_sstack_val_rec soffset1 ssize1
                         smem1 soffset2 ssize2 smem2 maxidx1' sb1' maxidx2'
                         sb2' instk_height ops
                | _ -> false))
          | None -> false)
       | None -> false)
 end

module MemoryCmpImpl =
 struct
  (** val trivial_memory_cmp :
      SymbolicStateCmp.sstack_val_cmp_t -> SymbolicState.smemory ->
      SymbolicState.smemory -> nat -> SymbolicState.sbindings -> nat ->
      SymbolicState.sbindings -> nat -> StackOpInstrs.stack_op_instr_map ->
      bool **)

  let trivial_memory_cmp _ smem1 smem2 _ _ _ _ _ _ =
    match smem1 with
    | [] -> (match smem2 with
             | [] -> true
             | _::_ -> false)
    | _::_ -> false

  (** val basic_memory_cmp :
      SymbolicStateCmp.sstack_val_cmp_t -> SymbolicState.smemory ->
      SymbolicState.smemory -> nat -> SymbolicState.sbindings -> nat ->
      SymbolicState.sbindings -> nat -> StackOpInstrs.stack_op_instr_map ->
      bool **)

  let rec basic_memory_cmp sstack_val_cmp smem1 smem2 maxidx1 sb1 maxidx2 sb2 instk_height ops =
    match smem1 with
    | [] -> (match smem2 with
             | [] -> true
             | _::_ -> false)
    | m::sstrg1' ->
      (match m with
       | SymbolicState.U_MSTORE (soffset1, svalue1) ->
         (match smem2 with
          | [] -> false
          | m0::sstrg2' ->
            (match m0 with
             | SymbolicState.U_MSTORE (soffset2, svalue2) ->
               if sstack_val_cmp soffset1 soffset2 maxidx1 sb1 maxidx2 sb2
                    instk_height ops
               then if sstack_val_cmp svalue1 svalue2 maxidx1 sb1 maxidx2 sb2
                         instk_height ops
                    then basic_memory_cmp sstack_val_cmp sstrg1' sstrg2'
                           maxidx1 sb1 maxidx2 sb2 instk_height ops
                    else false
               else false
             | SymbolicState.U_MSTORE8 (_, _) -> false))
       | SymbolicState.U_MSTORE8 (soffset1, svalue1) ->
         (match smem2 with
          | [] -> false
          | m0::sstrg2' ->
            (match m0 with
             | SymbolicState.U_MSTORE (_, _) -> false
             | SymbolicState.U_MSTORE8 (soffset2, svalue2) ->
               if sstack_val_cmp soffset1 soffset2 maxidx1 sb1 maxidx2 sb2
                    instk_height ops
               then if sstack_val_cmp svalue1 svalue2 maxidx1 sb1 maxidx2 sb2
                         instk_height ops
                    then basic_memory_cmp sstack_val_cmp sstrg1' sstrg2'
                           maxidx1 sb1 maxidx2 sb2 instk_height ops
                    else false
               else false)))

  (** val swap_memory_update :
      SymbolicState.sstack_val SymbolicState.memory_update ->
      SymbolicState.sstack_val SymbolicState.memory_update -> nat ->
      SymbolicState.sbindings -> bool **)

  let swap_memory_update u1 u2 maxid sb =
    match u1 with
    | SymbolicState.U_MSTORE (offset1, _) ->
      (match u2 with
       | SymbolicState.U_MSTORE (offset2, _) ->
         (match SymbolicState.follow_in_smap offset1 maxid sb with
          | Some f ->
            let SymbolicState.FollowSmapVal (smv, _, _) = f in
            (match smv with
             | SymbolicState.SymBasicVal val0 ->
               (match val0 with
                | SymbolicState.Val v1 ->
                  (match SymbolicState.follow_in_smap offset2 maxid sb with
                   | Some f0 ->
                     let SymbolicState.FollowSmapVal (smv0, _, _) = f0 in
                     (match smv0 with
                      | SymbolicState.SymBasicVal val1 ->
                        (match val1 with
                         | SymbolicState.Val v2 ->
                           N.ltb
                             (N.add (wordToN Constants.coq_EVMWordSize v2)
                               (Npos (XI (XI (XI (XI XH))))))
                             (wordToN Constants.coq_EVMWordSize v1)
                         | _ -> false)
                      | _ -> false)
                   | None -> false)
                | _ -> false)
             | _ -> false)
          | None -> false)
       | SymbolicState.U_MSTORE8 (offset2, _) ->
         (match SymbolicState.follow_in_smap offset1 maxid sb with
          | Some f ->
            let SymbolicState.FollowSmapVal (smv, _, _) = f in
            (match smv with
             | SymbolicState.SymBasicVal val0 ->
               (match val0 with
                | SymbolicState.Val v1 ->
                  (match SymbolicState.follow_in_smap offset2 maxid sb with
                   | Some f0 ->
                     let SymbolicState.FollowSmapVal (smv0, _, _) = f0 in
                     (match smv0 with
                      | SymbolicState.SymBasicVal val1 ->
                        (match val1 with
                         | SymbolicState.Val v2 ->
                           N.ltb (wordToN Constants.coq_EVMWordSize v2)
                             (wordToN Constants.coq_EVMWordSize v1)
                         | _ -> false)
                      | _ -> false)
                   | None -> false)
                | _ -> false)
             | _ -> false)
          | None -> false))
    | SymbolicState.U_MSTORE8 (offset1, _) ->
      (match u2 with
       | SymbolicState.U_MSTORE (offset2, _) ->
         (match SymbolicState.follow_in_smap offset1 maxid sb with
          | Some f ->
            let SymbolicState.FollowSmapVal (smv, _, _) = f in
            (match smv with
             | SymbolicState.SymBasicVal val0 ->
               (match val0 with
                | SymbolicState.Val v1 ->
                  (match SymbolicState.follow_in_smap offset2 maxid sb with
                   | Some f0 ->
                     let SymbolicState.FollowSmapVal (smv0, _, _) = f0 in
                     (match smv0 with
                      | SymbolicState.SymBasicVal val1 ->
                        (match val1 with
                         | SymbolicState.Val v2 ->
                           N.ltb
                             (N.add (wordToN Constants.coq_EVMWordSize v2)
                               (Npos (XI (XI (XI (XI XH))))))
                             (wordToN Constants.coq_EVMWordSize v1)
                         | _ -> false)
                      | _ -> false)
                   | None -> false)
                | _ -> false)
             | _ -> false)
          | None -> false)
       | SymbolicState.U_MSTORE8 (offset2, _) ->
         (match SymbolicState.follow_in_smap offset1 maxid sb with
          | Some f ->
            let SymbolicState.FollowSmapVal (smv, _, _) = f in
            (match smv with
             | SymbolicState.SymBasicVal val0 ->
               (match val0 with
                | SymbolicState.Val v1 ->
                  (match SymbolicState.follow_in_smap offset2 maxid sb with
                   | Some f0 ->
                     let SymbolicState.FollowSmapVal (smv0, _, _) = f0 in
                     (match smv0 with
                      | SymbolicState.SymBasicVal val1 ->
                        (match val1 with
                         | SymbolicState.Val v2 ->
                           N.ltb (wordToN Constants.coq_EVMWordSize v2)
                             (wordToN Constants.coq_EVMWordSize v1)
                         | _ -> false)
                      | _ -> false)
                   | None -> false)
                | _ -> false)
             | _ -> false)
          | None -> false))

  (** val reorder_updates' :
      nat -> SymbolicState.smemory -> nat -> SymbolicState.sbindings ->
      bool * SymbolicState.smemory **)

  let rec reorder_updates' d smem maxidx sb =
    match d with
    | O -> false , smem
    | S d' ->
      (match smem with
       | [] -> false , smem
       | u1::l ->
         (match l with
          | [] -> false , smem
          | u2::smem' ->
            if swap_memory_update u1 u2 maxidx sb
            then let _ , smem'' = reorder_updates' d' (u1::smem') maxidx sb in
                 true , (u2::smem'')
            else let r , smem'' = reorder_updates' d' (u2::smem') maxidx sb in
                 r , (u1::smem'')))

  (** val reorder_memory_updates :
      nat -> nat -> SymbolicState.smemory -> nat -> SymbolicState.sbindings
      -> SymbolicState.smemory **)

  let rec reorder_memory_updates d n0 smem maxidx sb =
    match d with
    | O -> smem
    | S d' ->
      let changed , smem' = reorder_updates' n0 smem maxidx sb in
      if changed then reorder_memory_updates d' n0 smem' maxidx sb else smem'

  (** val po_memory_cmp :
      SymbolicStateCmp.sstack_val_cmp_t -> SymbolicState.smemory ->
      SymbolicState.smemory -> nat -> SymbolicState.sbindings -> nat ->
      SymbolicState.sbindings -> nat -> StackOpInstrs.stack_op_instr_map ->
      bool **)

  let po_memory_cmp sstack_val_cmp smem1 smem2 maxidx1 sb1 maxidx2 sb2 instk_height ops =
    let n1 = length smem1 in
    let n2 = length smem2 in
    if eqb n1 n2
    then let smem1' = reorder_memory_updates n1 n1 smem1 maxidx1 sb1 in
         let smem2' = reorder_memory_updates n2 n2 smem2 maxidx2 sb2 in
         basic_memory_cmp sstack_val_cmp smem1' smem2' maxidx1 sb1 maxidx2
           sb2 instk_height ops
    else false
 end

module SHA3CmpImplSoundness =
 struct
  (** val trivial_sha3_cmp :
      SymbolicStateCmp.sstack_val_cmp_t -> SymbolicState.sstack_val ->
      SymbolicState.sstack_val -> SymbolicState.smemory ->
      SymbolicState.sstack_val -> SymbolicState.sstack_val ->
      SymbolicState.smemory -> nat -> SymbolicState.sbindings -> nat ->
      SymbolicState.sbindings -> nat -> StackOpInstrs.stack_op_instr_map ->
      bool **)

  let trivial_sha3_cmp _ _ _ _ _ _ _ _ _ _ _ _ _ =
    false
 end

module StorageCmpImpl =
 struct
  type sstorage_cmp_t =
    SymbolicState.sstorage -> SymbolicState.sstorage -> nat ->
    SymbolicState.sbindings -> nat -> SymbolicState.sbindings -> nat ->
    StackOpInstrs.stack_op_instr_map -> bool

  type sstorage_cmp_ext_t =
    SymbolicStateCmp.sstack_val_cmp_t -> sstorage_cmp_t

  (** val trivial_storage_cmp :
      SymbolicStateCmp.sstack_val_cmp_t -> SymbolicState.sstorage ->
      SymbolicState.sstorage -> nat -> SymbolicState.sbindings -> nat ->
      SymbolicState.sbindings -> nat -> StackOpInstrs.stack_op_instr_map ->
      bool **)

  let trivial_storage_cmp _ sstrg1 sstrg2 _ _ _ _ _ _ =
    match sstrg1 with
    | [] -> (match sstrg2 with
             | [] -> true
             | _::_ -> false)
    | _::_ -> false

  (** val basic_storage_cmp :
      SymbolicStateCmp.sstack_val_cmp_t -> SymbolicState.sstorage ->
      SymbolicState.sstorage -> nat -> SymbolicState.sbindings -> nat ->
      SymbolicState.sbindings -> nat -> StackOpInstrs.stack_op_instr_map ->
      bool **)

  let rec basic_storage_cmp sstack_val_cmp sstrg1 sstrg2 maxidx1 sb1 maxidx2 sb2 instk_height ops =
    match sstrg1 with
    | [] -> (match sstrg2 with
             | [] -> true
             | _::_ -> false)
    | s::sstrg1' ->
      let SymbolicState.U_SSTORE (skey1, svalue1) = s in
      (match sstrg2 with
       | [] -> false
       | s0::sstrg2' ->
         let SymbolicState.U_SSTORE (skey2, svalue2) = s0 in
         if sstack_val_cmp skey1 skey2 maxidx1 sb1 maxidx2 sb2 instk_height
              ops
         then if sstack_val_cmp svalue1 svalue2 maxidx1 sb1 maxidx2 sb2
                   instk_height ops
              then basic_storage_cmp sstack_val_cmp sstrg1' sstrg2' maxidx1
                     sb1 maxidx2 sb2 instk_height ops
              else false
         else false)

  (** val swap_storage_update :
      SymbolicState.sstack_val SymbolicState.storage_update ->
      SymbolicState.sstack_val SymbolicState.storage_update -> nat ->
      SymbolicState.sbindings -> bool **)

  let swap_storage_update u1 u2 maxid sb =
    let SymbolicState.U_SSTORE (key1, _) = u1 in
    let SymbolicState.U_SSTORE (key2, _) = u2 in
    (match SymbolicState.follow_in_smap key1 maxid sb with
     | Some f ->
       let SymbolicState.FollowSmapVal (smv, _, _) = f in
       (match smv with
        | SymbolicState.SymBasicVal val0 ->
          (match val0 with
           | SymbolicState.Val v1 ->
             (match SymbolicState.follow_in_smap key2 maxid sb with
              | Some f0 ->
                let SymbolicState.FollowSmapVal (smv0, _, _) = f0 in
                (match smv0 with
                 | SymbolicState.SymBasicVal val1 ->
                   (match val1 with
                    | SymbolicState.Val v2 ->
                      N.ltb (wordToN Constants.coq_EVMWordSize v2)
                        (wordToN Constants.coq_EVMWordSize v1)
                    | _ -> false)
                 | _ -> false)
              | None -> false)
           | _ -> false)
        | _ -> false)
     | None -> false)

  (** val reorder_updates' :
      nat -> SymbolicState.sstorage -> nat -> SymbolicState.sbindings ->
      bool * SymbolicState.sstorage **)

  let rec reorder_updates' d sstrg maxid sb =
    match d with
    | O -> false , sstrg
    | S d' ->
      (match sstrg with
       | [] -> false , sstrg
       | u1::l ->
         (match l with
          | [] -> false , sstrg
          | u2::sstrg' ->
            if swap_storage_update u1 u2 maxid sb
            then let _ , sstrg'' = reorder_updates' d' (u1::sstrg') maxid sb
                 in
                 true , (u2::sstrg'')
            else let r , sstrg'' = reorder_updates' d' (u2::sstrg') maxid sb
                 in
                 r , (u1::sstrg'')))

  (** val reorder_storage_updates :
      nat -> nat -> SymbolicState.sstorage -> nat -> SymbolicState.sbindings
      -> SymbolicState.sstorage **)

  let rec reorder_storage_updates d n0 sstrg maxid sb =
    match d with
    | O -> sstrg
    | S d' ->
      let changed , sstrg' = reorder_updates' n0 sstrg maxid sb in
      if changed
      then reorder_storage_updates d' n0 sstrg' maxid sb
      else sstrg'

  (** val po_storage_cmp :
      SymbolicStateCmp.sstack_val_cmp_t -> SymbolicState.sstorage ->
      SymbolicState.sstorage -> nat -> SymbolicState.sbindings -> nat ->
      SymbolicState.sbindings -> nat -> StackOpInstrs.stack_op_instr_map ->
      bool **)

  let po_storage_cmp sstack_val_cmp sstrg1 sstrg2 maxidx1 sb1 maxidx2 sb2 instk_height ops =
    let n1 = length sstrg1 in
    let n2 = length sstrg2 in
    if eqb n1 n2
    then let sstrg1' = reorder_storage_updates n1 n1 sstrg1 maxidx1 sb1 in
         let sstrg2' = reorder_storage_updates n2 n2 sstrg2 maxidx2 sb2 in
         basic_storage_cmp sstack_val_cmp sstrg1' sstrg2' maxidx1 sb1 maxidx2
           sb2 instk_height ops
    else false
 end

module BlockEquivChecker =
 struct
  type mload_solver_v =
    MemoryOpsSolvers.mload_solver_ext_type
    (* singleton inductive, whose constructor was MLoadSolver *)

  type available_mload_solvers =
  | MLoadSolver_Trivial
  | MLoadSolver_Basic

  (** val get_mload_solver : available_mload_solvers -> mload_solver_v **)

  let get_mload_solver = function
  | MLoadSolver_Trivial -> MemoryOpsSolversImpl.trivial_mload_solver
  | MLoadSolver_Basic -> MemoryOpsSolversImpl.basic_mload_solver

  type sload_solver_v =
    StorageOpsSolvers.sload_solver_ext_type
    (* singleton inductive, whose constructor was SLoadSolver *)

  type available_sload_solvers =
  | SLoadSolver_Trivial
  | SLoadSolver_Basic

  (** val get_sload_solver : available_sload_solvers -> sload_solver_v **)

  let get_sload_solver = function
  | SLoadSolver_Trivial -> StorageOpsSolversImpl.trivial_sload_solver
  | SLoadSolver_Basic -> StorageOpsSolversImpl.basic_sload_solver

  type smemory_updater_v =
    MemoryOpsSolvers.smemory_updater_ext_type
    (* singleton inductive, whose constructor was SMemUpdater *)

  type available_smemory_updaters =
  | SMemUpdater_Trivial
  | SMemUpdater_Basic

  (** val get_smemory_updater :
      available_smemory_updaters -> smemory_updater_v **)

  let get_smemory_updater = function
  | SMemUpdater_Trivial -> MemoryOpsSolversImpl.trivial_smemory_updater
  | SMemUpdater_Basic -> MemoryOpsSolversImpl.basic_smemory_updater

  type sstorage_updater_v =
    StorageOpsSolvers.sstorage_updater_ext_type
    (* singleton inductive, whose constructor was SStrgUpdater *)

  type available_sstorage_updaters =
  | SStrgUpdater_Trivial
  | SStrgUpdater_Basic

  (** val get_sstorage_updater :
      available_sstorage_updaters -> sstorage_updater_v **)

  let get_sstorage_updater = function
  | SStrgUpdater_Trivial -> StorageOpsSolversImpl.trivial_sstorage_updater
  | SStrgUpdater_Basic -> StorageOpsSolversImpl.basic_sstorage_updater

  type smemory_cmp_v =
    SymbolicStateCmp.smemory_cmp_ext_t
    (* singleton inductive, whose constructor was SMemCmp *)

  type available_memory_cmp =
  | SMemCmp_Trivial
  | SMemCmp_Basic
  | SMemCmp_PO

  (** val get_memory_cmp : available_memory_cmp -> smemory_cmp_v **)

  let get_memory_cmp = function
  | SMemCmp_Trivial -> MemoryCmpImpl.trivial_memory_cmp
  | SMemCmp_Basic -> MemoryCmpImpl.basic_memory_cmp
  | SMemCmp_PO -> MemoryCmpImpl.po_memory_cmp

  type sstorage_cmp_v =
    StorageCmpImpl.sstorage_cmp_ext_t
    (* singleton inductive, whose constructor was SStrgCmp *)

  type available_storage_cmp =
  | SStrgCmp_Trivial
  | SStrgCmp_Basic
  | SStrgCmp_PO

  (** val get_storage_cmp : available_storage_cmp -> sstorage_cmp_v **)

  let get_storage_cmp = function
  | SStrgCmp_Trivial -> StorageCmpImpl.trivial_storage_cmp
  | SStrgCmp_Basic -> StorageCmpImpl.basic_storage_cmp
  | SStrgCmp_PO -> StorageCmpImpl.po_storage_cmp

  type sha3_cmp_v =
    SymbolicStateCmp.sha3_cmp_ext_t
    (* singleton inductive, whose constructor was SHA3Cmp *)

  (** val get_sha3_cmp : __ -> sha3_cmp_v **)

  let get_sha3_cmp _ =
    SHA3CmpImplSoundness.trivial_sha3_cmp

  type sstack_val_cmp_v =
    SymbolicStateCmp.sstack_val_cmp_ext_2_t
    (* singleton inductive, whose constructor was SStackValCmp *)

  type available_sstack_val_cmp =
  | SStackValCmp_Trivial
  | SStackValCmp_Basic

  (** val get_sstack_val_cmp :
      available_sstack_val_cmp -> sstack_val_cmp_v **)

  let get_sstack_val_cmp = function
  | SStackValCmp_Trivial -> SStackValCmpImpl.trivial_compare_sstack_val
  | SStackValCmp_Basic -> SStackValCmpImpl.basic_compare_sstack_val

  type available_optimization_step =
  | OPT_eval
  | OPT_add_zero
  | OPT_not_not
  | OPT_and_and1
  | OPT_and_and2
  | OPT_and_origin
  | OPT_mul_shl
  | OPT_div_shl
  | OPT_shr_zero_x
  | OPT_shr_x_zero
  | OPT_eq_zero
  | OPT_sub_x_x
  | OPT_and_zero
  | OPT_div_one
  | OPT_lt_x_one
  | OPT_gt_one_x
  | OPT_and_address
  | OPT_mul_one
  | OPT_iszero_gt
  | OPT_eq_iszero
  | OPT_and_caller
  | OPT_iszero3
  | OPT_add_sub
  | OPT_shl_zero_x
  | OPT_sub_zero
  | OPT_shl_x_zero
  | OPT_mul_zero
  | OPT_div_x_x
  | OPT_div_zero
  | OPT_mod_one
  | OPT_mod_zero
  | OPT_mod_x_x
  | OPT_exp_x_zero
  | OPT_exp_x_one
  | OPT_exp_one_x
  | OPT_exp_zero_x
  | OPT_exp_two_x
  | OPT_gt_zero_x
  | OPT_gt_x_x
  | OPT_lt_x_zero
  | OPT_lt_x_x
  | OPT_eq_x_x
  | OPT_iszero_sub
  | OPT_iszero_lt
  | OPT_iszero_xor
  | OPT_iszero2_gt
  | OPT_iszero2_lt
  | OPT_iszero2_eq
  | OPT_xor_x_x
  | OPT_xor_zero

  type list_opt_steps = available_optimization_step list

  (** val get_optimization_step :
      available_optimization_step -> Optimizations_Def.opt_entry **)

  let get_optimization_step = function
  | OPT_eval -> Opt_eval.optimize_eval_sbinding
  | OPT_add_zero -> Opt_add_zero.optimize_add_zero_sbinding
  | OPT_not_not -> Opt_not_not.optimize_not_not_sbinding
  | OPT_and_and1 -> Opt_and_and1.optimize_and_and1_sbinding
  | OPT_and_and2 -> Opt_and_and2.optimize_and_and2_sbinding
  | OPT_and_origin -> Opt_and_origin.optimize_and_origin_sbinding
  | OPT_mul_shl -> Opt_mul_shl.optimize_mul_shl_sbinding
  | OPT_div_shl -> Opt_div_shl.optimize_div_shl_sbinding
  | OPT_shr_zero_x -> Opt_shr_zero_x.optimize_shr_zero_x_sbinding
  | OPT_shr_x_zero -> Opt_shr_x_zero.optimize_shr_x_zero_sbinding
  | OPT_eq_zero -> Opt_eq_zero.optimize_eq_zero_sbinding
  | OPT_sub_x_x -> Opt_sub_x_x.optimize_sub_x_x_sbinding
  | OPT_and_zero -> Opt_and_zero.optimize_and_zero_sbinding
  | OPT_div_one -> Opt_div_one.optimize_div_one_sbinding
  | OPT_lt_x_one -> Opt_lt_x_one.optimize_lt_x_one_sbinding
  | OPT_gt_one_x -> Opt_gt_one_x.optimize_gt_one_x_sbinding
  | OPT_and_address -> Opt_and_address.optimize_and_address_sbinding
  | OPT_mul_one -> Opt_mul_one.optimize_mul_one_sbinding
  | OPT_iszero_gt -> Opt_iszero_gt.optimize_iszero_gt_sbinding
  | OPT_eq_iszero -> Opt_eq_iszero.optimize_eq_iszero_sbinding
  | OPT_and_caller -> Opt_and_caller.optimize_and_caller_sbinding
  | OPT_iszero3 -> Opt_iszero3.optimize_iszero3_sbinding
  | OPT_add_sub -> Opt_add_sub.optimize_add_sub_sbinding
  | OPT_shl_zero_x -> Opt_shl_zero_x.optimize_shl_zero_x_sbinding
  | OPT_sub_zero -> Opt_sub_zero.optimize_sub_zero_sbinding
  | OPT_shl_x_zero -> Opt_shl_x_zero.optimize_shl_x_zero_sbinding
  | OPT_mul_zero -> Opt_mul_zero.optimize_mul_zero_sbinding
  | OPT_div_x_x -> Opt_div_x_x.optimize_div_x_x_sbinding
  | OPT_div_zero -> Opt_div_zero.optimize_div_zero_sbinding
  | OPT_mod_one -> Opt_mod_one.optimize_mod_one_sbinding
  | OPT_mod_zero -> Opt_mod_zero.optimize_mod_zero_sbinding
  | OPT_mod_x_x -> Opt_mod_x_x.optimize_mod_x_x_sbinding
  | OPT_exp_x_zero -> Opt_exp_x_zero.optimize_exp_x_zero_sbinding
  | OPT_exp_x_one -> Opt_exp_x_one.optimize_exp_x_one_sbinding
  | OPT_exp_one_x -> Opt_exp_one_x.optimize_exp_one_x_sbinding
  | OPT_exp_zero_x -> Opt_exp_zero_x.optimize_exp_zero_x_sbinding
  | OPT_exp_two_x -> Opt_exp_two_x.optimize_exp_two_x_sbinding
  | OPT_gt_zero_x -> Opt_gt_zero_x.optimize_gt_zero_x_sbinding
  | OPT_gt_x_x -> Opt_gt_x_x.optimize_gt_x_x_sbinding
  | OPT_lt_x_zero -> Opt_lt_x_zero.optimize_lt_x_zero_sbinding
  | OPT_lt_x_x -> Opt_lt_x_x.optimize_lt_x_x_sbinding
  | OPT_eq_x_x -> Opt_eq_x_x.optimize_eq_x_x_sbinding
  | OPT_iszero_sub -> Opt_iszero_sub.optimize_iszero_sub_sbinding
  | OPT_iszero_lt -> Opt_iszero_lt.optimize_iszero_lt_sbinding
  | OPT_iszero_xor -> Opt_iszero_xor.optimize_iszero_xor_sbinding
  | OPT_iszero2_gt -> Opt_iszero2_gt.optimize_iszero2_gt_sbinding
  | OPT_iszero2_lt -> Opt_iszero2_lt.optimize_iszero2_lt_sbinding
  | OPT_iszero2_eq -> Opt_iszero2_eq.optimize_iszero2_eq_sbinding
  | OPT_xor_x_x -> Opt_xor_x_x.optimize_xor_x_x_sbinding
  | OPT_xor_zero -> Opt_xor_zero.optimize_xor_zero_sbinding

  (** val all_optimization_steps : available_optimization_step list **)

  let all_optimization_steps =
    OPT_eval::(OPT_add_zero::(OPT_not_not::(OPT_and_and1::(OPT_and_and2::(OPT_and_origin::(OPT_div_shl::(OPT_mul_shl::(OPT_shr_zero_x::(OPT_shr_x_zero::(OPT_eq_zero::(OPT_sub_x_x::(OPT_and_zero::(OPT_div_one::(OPT_lt_x_one::(OPT_gt_one_x::(OPT_and_address::(OPT_mul_one::(OPT_iszero_gt::(OPT_eq_iszero::(OPT_and_caller::(OPT_iszero3::(OPT_add_sub::(OPT_shl_zero_x::(OPT_sub_zero::(OPT_shl_x_zero::(OPT_mul_zero::(OPT_div_x_x::(OPT_div_zero::(OPT_mod_one::(OPT_mod_zero::(OPT_mod_x_x::(OPT_exp_x_zero::(OPT_exp_x_one::(OPT_exp_one_x::(OPT_exp_zero_x::(OPT_exp_two_x::(OPT_gt_zero_x::(OPT_gt_x_x::(OPT_lt_x_zero::(OPT_lt_x_x::(OPT_eq_x_x::(OPT_iszero_sub::(OPT_iszero_lt::(OPT_iszero_xor::(OPT_iszero2_gt::(OPT_iszero2_lt::(OPT_iszero2_eq::(OPT_xor_x_x::(OPT_xor_zero::[])))))))))))))))))))))))))))))))))))))))))))))))))

  (** val all_optimization_steps' : available_optimization_step list **)

  let all_optimization_steps' =
    OPT_div_shl::(OPT_mul_shl::(OPT_eval::(OPT_add_zero::(OPT_not_not::(OPT_and_and1::(OPT_and_and2::(OPT_and_origin::(OPT_shr_zero_x::(OPT_shr_x_zero::(OPT_eq_zero::(OPT_sub_x_x::(OPT_and_zero::(OPT_div_one::(OPT_lt_x_one::(OPT_gt_one_x::(OPT_and_address::(OPT_mul_one::(OPT_iszero_gt::(OPT_eq_iszero::(OPT_and_caller::(OPT_iszero3::(OPT_add_sub::(OPT_shl_zero_x::(OPT_sub_zero::(OPT_shl_x_zero::(OPT_mul_zero::(OPT_div_x_x::(OPT_div_zero::(OPT_mod_one::(OPT_mod_zero::(OPT_mod_x_x::(OPT_exp_x_zero::(OPT_exp_x_one::(OPT_exp_one_x::(OPT_exp_zero_x::(OPT_exp_two_x::(OPT_gt_zero_x::(OPT_gt_x_x::(OPT_lt_x_zero::(OPT_lt_x_x::(OPT_eq_x_x::(OPT_iszero_sub::(OPT_iszero_lt::(OPT_iszero_xor::(OPT_iszero2_gt::(OPT_iszero2_lt::(OPT_iszero2_eq::(OPT_xor_x_x::(OPT_xor_zero::[])))))))))))))))))))))))))))))))))))))))))))))))))

  (** val get_pipeline : list_opt_steps -> Optimizations_Def.opt_pipeline **)

  let rec get_pipeline = function
  | [] -> []
  | tag::r -> (get_optimization_step tag)::(get_pipeline r)

  (** val evm_eq_block_chkr' :
      MemoryOpsSolvers.smemory_updater_ext_type ->
      StorageOpsSolvers.sstorage_updater_ext_type ->
      MemoryOpsSolvers.mload_solver_ext_type ->
      StorageOpsSolvers.sload_solver_ext_type ->
      SymbolicStateCmp.sstack_val_cmp_ext_2_t ->
      SymbolicStateCmp.smemory_cmp_ext_t -> StorageCmpImpl.sstorage_cmp_ext_t
      -> SymbolicStateCmp.sha3_cmp_ext_t -> Optimizations_Def.opt_pipeline ->
      nat -> nat -> Program.block -> Program.block -> nat -> bool **)

  let evm_eq_block_chkr' memory_updater storage_updater mload_solver sload_solver sstack_value_cmp_ext smemory_cmp_ext sstorage_cmp_ext sha3_cmp_ext opt_pipeline0 opt_step_rep opt_pipeline_rep opt_p p k =
    let sstack_value_cmp_1 =
      sstack_value_cmp_ext smemory_cmp_ext sstorage_cmp_ext sha3_cmp_ext
    in
    let memory_updater' = memory_updater sstack_value_cmp_1 in
    let storage_updater' = storage_updater sstack_value_cmp_1 in
    let mload_solver' = mload_solver sstack_value_cmp_1 in
    let sload_solver' = sload_solver sstack_value_cmp_1 in
    (match SymbolicExecution.evm_sym_exec memory_updater' storage_updater'
             mload_solver' sload_solver' opt_p k StackOpInstrs.evm_stack_opm with
     | Some sst_opt ->
       (match SymbolicExecution.evm_sym_exec memory_updater' storage_updater'
                mload_solver' sload_solver' p k StackOpInstrs.evm_stack_opm with
        | Some sst_p ->
          let maxid = S
            (max
              (SymbolicState.get_maxidx_smap
                (SymbolicState.get_smap_sst sst_opt))
              (SymbolicState.get_maxidx_smap
                (SymbolicState.get_smap_sst sst_p)))
          in
          let sstack_value_cmp = sstack_value_cmp_1 maxid in
          let opt =
            Optimizations_Def.apply_opt_n_times_pipeline_k opt_pipeline0
              sstack_value_cmp opt_step_rep opt_pipeline_rep
          in
          let sst_opt' , _ = opt sst_opt in
          let sst_p' , _ = opt sst_p in
          let smemory_cmp = smemory_cmp_ext sstack_value_cmp in
          let sstorage_cmp = sstorage_cmp_ext sstack_value_cmp in
          SymbolicStateCmpImpl.sstate_cmp sstack_value_cmp smemory_cmp
            sstorage_cmp sst_p' sst_opt' StackOpInstrs.evm_stack_opm
        | None -> false)
     | None -> false)

  (** val evm_eq_block_chkr_lazy :
      available_smemory_updaters -> available_sstorage_updaters ->
      available_mload_solvers -> available_sload_solvers ->
      available_sstack_val_cmp -> available_memory_cmp ->
      available_storage_cmp -> list_opt_steps -> nat -> nat -> Program.block
      -> Program.block -> nat -> bool **)

  let evm_eq_block_chkr_lazy memory_updater_tag storage_updater_tag mload_solver_tag sload_solver_tag sstack_value_cmp_tag memory_cmp_tag storage_cmp_tag optimization_steps opt_step_rep opt_pipeline_rep opt_p p k =
    evm_eq_block_chkr' (get_smemory_updater memory_updater_tag)
      (get_sstorage_updater storage_updater_tag)
      (get_mload_solver mload_solver_tag) (get_sload_solver sload_solver_tag)
      (get_sstack_val_cmp sstack_value_cmp_tag)
      (get_memory_cmp memory_cmp_tag) (get_storage_cmp storage_cmp_tag)
      (get_sha3_cmp __) (get_pipeline optimization_steps) opt_step_rep
      opt_pipeline_rep opt_p p k
 end

module Parser =
 struct
  (** val isWhite : char -> bool **)

  let isWhite c =
    let n0 = n_of_ascii c in
    (||)
      ((||) (N.eqb n0 (Npos (XO (XO (XO (XO (XO XH)))))))
        (N.eqb n0 (Npos (XI (XO (XO XH))))))
      ((||) (N.eqb n0 (Npos (XO (XI (XO XH)))))
        (N.eqb n0 (Npos (XI (XO (XI XH))))))

  type chartype =
  | Coq_white
  | Coq_other

  (** val chartype_rect : 'a1 -> 'a1 -> chartype -> 'a1 **)

  let chartype_rect f f0 = function
  | Coq_white -> f
  | Coq_other -> f0

  (** val chartype_rec : 'a1 -> 'a1 -> chartype -> 'a1 **)

  let chartype_rec f f0 = function
  | Coq_white -> f
  | Coq_other -> f0

  (** val classifyChar : char -> chartype **)

  let classifyChar c =
    if isWhite c then Coq_white else Coq_other

  (** val list_of_string : char list -> char list **)

  let rec list_of_string = function
  | [] -> []
  | c::s0 -> c::(list_of_string s0)

  (** val string_of_list : char list -> char list **)

  let string_of_list xs =
    fold_right (fun x x0 -> x::x0) [] xs

  type token = char list

  (** val tokenize_helper :
      chartype -> char list -> char list -> char list list **)

  let rec tokenize_helper cls acc xs =
    let tk = match acc with
             | [] -> []
             | _::_ -> (rev acc)::[] in
    (match xs with
     | [] -> tk
     | x::xs' ->
       (match cls with
        | Coq_white ->
          (match classifyChar x with
           | Coq_white -> app tk (tokenize_helper Coq_white [] xs')
           | Coq_other -> app tk (tokenize_helper Coq_other (x::[]) xs'))
        | Coq_other ->
          (match classifyChar x with
           | Coq_white -> app tk (tokenize_helper Coq_white [] xs')
           | Coq_other -> tokenize_helper Coq_other (x::acc) xs')))

  (** val tokenize : char list -> char list list **)

  let tokenize s =
    map string_of_list (tokenize_helper Coq_white [] (list_of_string s))

  (** val uint_to_N : uint -> n **)

  let rec uint_to_N = function
  | Nil -> N0
  | D0 d0 -> N.mul (Npos (XO (XO (XO (XO XH))))) (uint_to_N d0)
  | D1 d0 ->
    N.add (Npos XH) (N.mul (Npos (XO (XO (XO (XO XH))))) (uint_to_N d0))
  | D2 d0 ->
    N.add (Npos (XO XH)) (N.mul (Npos (XO (XO (XO (XO XH))))) (uint_to_N d0))
  | D3 d0 ->
    N.add (Npos (XI XH)) (N.mul (Npos (XO (XO (XO (XO XH))))) (uint_to_N d0))
  | D4 d0 ->
    N.add (Npos (XO (XO XH)))
      (N.mul (Npos (XO (XO (XO (XO XH))))) (uint_to_N d0))
  | D5 d0 ->
    N.add (Npos (XI (XO XH)))
      (N.mul (Npos (XO (XO (XO (XO XH))))) (uint_to_N d0))
  | D6 d0 ->
    N.add (Npos (XO (XI XH)))
      (N.mul (Npos (XO (XO (XO (XO XH))))) (uint_to_N d0))
  | D7 d0 ->
    N.add (Npos (XI (XI XH)))
      (N.mul (Npos (XO (XO (XO (XO XH))))) (uint_to_N d0))
  | D8 d0 ->
    N.add (Npos (XO (XO (XO XH))))
      (N.mul (Npos (XO (XO (XO (XO XH))))) (uint_to_N d0))
  | D9 d0 ->
    N.add (Npos (XI (XO (XO XH))))
      (N.mul (Npos (XO (XO (XO (XO XH))))) (uint_to_N d0))
  | Da d0 ->
    N.add (Npos (XO (XI (XO XH))))
      (N.mul (Npos (XO (XO (XO (XO XH))))) (uint_to_N d0))
  | Db d0 ->
    N.add (Npos (XI (XI (XO XH))))
      (N.mul (Npos (XO (XO (XO (XO XH))))) (uint_to_N d0))
  | Dc d0 ->
    N.add (Npos (XO (XO (XI XH))))
      (N.mul (Npos (XO (XO (XO (XO XH))))) (uint_to_N d0))
  | Dd d0 ->
    N.add (Npos (XI (XO (XI XH))))
      (N.mul (Npos (XO (XO (XO (XO XH))))) (uint_to_N d0))
  | De d0 ->
    N.add (Npos (XO (XI (XI XH))))
      (N.mul (Npos (XO (XO (XO (XO XH))))) (uint_to_N d0))
  | Df d0 ->
    N.add (Npos (XI (XI (XI XH))))
      (N.mul (Npos (XO (XO (XO (XO XH))))) (uint_to_N d0))

  (** val parseHexNumber' : char list -> uint -> uint option **)

  let rec parseHexNumber' x acc =
    match x with
    | [] -> Some acc
    | a::xs ->
      (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
        (fun b b0 b1 b2 b3 b4 b5 b6 ->
        if b
        then if b0
             then if b1
                  then if b2
                       then None
                       else if b3
                            then if b4
                                 then if b5
                                      then None
                                      else if b6
                                           then None
                                           else parseHexNumber' xs (D7 acc)
                                 else None
                            else None
                  else if b2
                       then None
                       else if b3
                            then if b4
                                 then if b5
                                      then None
                                      else if b6
                                           then None
                                           else parseHexNumber' xs (D3 acc)
                                 else None
                            else if b5
                                 then if b6
                                      then None
                                      else parseHexNumber' xs (Dc acc)
                                 else None
             else if b1
                  then if b2
                       then None
                       else if b3
                            then if b4
                                 then if b5
                                      then None
                                      else if b6
                                           then None
                                           else parseHexNumber' xs (D5 acc)
                                 else None
                            else if b5
                                 then if b6
                                      then None
                                      else parseHexNumber' xs (De acc)
                                 else None
                  else if b2
                       then if b3
                            then if b4
                                 then if b5
                                      then None
                                      else if b6
                                           then None
                                           else parseHexNumber' xs (D9 acc)
                                 else None
                            else None
                       else if b3
                            then if b4
                                 then if b5
                                      then None
                                      else if b6
                                           then None
                                           else parseHexNumber' xs (D1 acc)
                                 else None
                            else if b5
                                 then if b6
                                      then None
                                      else parseHexNumber' xs (Da acc)
                                 else None
        else if b0
             then if b1
                  then if b2
                       then None
                       else if b3
                            then if b4
                                 then if b5
                                      then None
                                      else if b6
                                           then None
                                           else parseHexNumber' xs (D6 acc)
                                 else None
                            else if b5
                                 then if b6
                                      then None
                                      else parseHexNumber' xs (Df acc)
                                 else None
                  else if b2
                       then None
                       else if b3
                            then if b4
                                 then if b5
                                      then None
                                      else if b6
                                           then None
                                           else parseHexNumber' xs (D2 acc)
                                 else None
                            else if b5
                                 then if b6
                                      then None
                                      else parseHexNumber' xs (Db acc)
                                 else None
             else if b1
                  then if b2
                       then None
                       else if b3
                            then if b4
                                 then if b5
                                      then None
                                      else if b6
                                           then None
                                           else parseHexNumber' xs (D4 acc)
                                 else None
                            else if b5
                                 then if b6
                                      then None
                                      else parseHexNumber' xs (Dd acc)
                                 else None
                  else if b2
                       then if b3
                            then if b4
                                 then if b5
                                      then None
                                      else if b6
                                           then None
                                           else parseHexNumber' xs (D8 acc)
                                 else None
                            else None
                       else if b3
                            then if b4
                                 then if b5
                                      then None
                                      else if b6
                                           then None
                                           else parseHexNumber' xs (D0 acc)
                                 else None
                            else None)
        a

  (** val parseHexNumber : char list -> n option **)

  let parseHexNumber x =
    let xl = list_of_string x in
    (match xl with
     | [] -> None
     | a::l ->
       (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
         (fun b b0 b1 b2 b3 b4 b5 b6 ->
         if b
         then None
         else if b0
              then None
              else if b1
                   then None
                   else if b2
                        then None
                        else if b3
                             then if b4
                                  then if b5
                                       then None
                                       else if b6
                                            then None
                                            else (match l with
                                                  | [] -> None
                                                  | a0::xs ->
                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                      (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                      if b7
                                                      then None
                                                      else if b8
                                                           then None
                                                           else if b9
                                                                then None
                                                                else 
                                                                  if b10
                                                                  then 
                                                                    if b11
                                                                    then 
                                                                    if b12
                                                                    then 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match 
                                                                    parseHexNumber'
                                                                    xs Nil with
                                                                    | Some n0 ->
                                                                    Some
                                                                    (uint_to_N
                                                                    n0)
                                                                    | None ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                  else None)
                                                      a0)
                                  else None
                             else None)
         a)

  (** val parseDecNumber' : char list -> nat -> nat option **)

  let rec parseDecNumber' x acc =
    match x with
    | [] -> Some acc
    | d::ds ->
      let n0 = nat_of_ascii d in
      if (&&)
           (Nat.leb (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
             (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
             (S (S (S (S (S (S (S (S
             O)))))))))))))))))))))))))))))))))))))))))))))))) n0)
           (Nat.leb n0 (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
             (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
             (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
             O))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
      then parseDecNumber' ds
             (add (mul (S (S (S (S (S (S (S (S (S (S O)))))))))) acc)
               (sub n0 (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
                 (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S
                 (S (S (S (S (S (S (S (S (S (S
                 O))))))))))))))))))))))))))))))))))))))))))))))))))
      else None

  (** val parseDecNumber : char list -> nat option **)

  let parseDecNumber x =
    parseDecNumber' (list_of_string x) O

  (** val is_push : char list -> nat option **)

  let is_push s =
    match list_of_string s with
    | [] -> None
    | a::l ->
      (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
        (fun b b0 b1 b2 b3 b4 b5 b6 ->
        if b
        then None
        else if b0
             then None
             else if b1
                  then None
                  else if b2
                       then None
                       else if b3
                            then if b4
                                 then None
                                 else if b5
                                      then if b6
                                           then None
                                           else (match l with
                                                 | [] -> None
                                                 | a0::l0 ->
                                                   (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                     (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                     if b7
                                                     then if b8
                                                          then None
                                                          else if b9
                                                               then if b10
                                                                    then None
                                                                    else 
                                                                    if b11
                                                                    then 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match l0 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::l1 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then 
                                                                    if b16
                                                                    then 
                                                                    if b17
                                                                    then None
                                                                    else 
                                                                    if b18
                                                                    then None
                                                                    else 
                                                                    if b19
                                                                    then 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match l1 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::xs ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then None
                                                                    else 
                                                                    if b24
                                                                    then None
                                                                    else 
                                                                    if b25
                                                                    then None
                                                                    else 
                                                                    if b26
                                                                    then 
                                                                    if b27
                                                                    then None
                                                                    else 
                                                                    if b28
                                                                    then None
                                                                    else 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match 
                                                                    parseDecNumber'
                                                                    xs O with
                                                                    | Some n0 ->
                                                                    if 
                                                                    (&&)
                                                                    (Nat.leb
                                                                    (S O) n0)
                                                                    (Nat.leb
                                                                    n0 (S (S
                                                                    (S (S (S
                                                                    (S (S (S
                                                                    (S (S (S
                                                                    (S (S (S
                                                                    (S (S (S
                                                                    (S (S (S
                                                                    (S (S (S
                                                                    (S (S (S
                                                                    (S (S (S
                                                                    (S (S (S
                                                                    O)))))))))))))))))))))))))))))))))
                                                                    then 
                                                                    Some n0
                                                                    else None
                                                                    | None ->
                                                                    None)
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None
                                                               else None
                                                     else None)
                                                     a0)
                                      else None
                            else None)
        a

  (** val is_metapush : char list -> bool **)

  let is_metapush = function
  | [] -> false
  | a::s0 ->
    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
      (fun b b0 b1 b2 b3 b4 b5 b6 ->
      if b
      then if b0
           then false
           else if b1
                then if b2
                     then if b3
                          then false
                          else if b4
                               then false
                               else if b5
                                    then if b6
                                         then false
                                         else (match s0 with
                                               | [] -> false
                                               | a0::s1 ->
                                                 (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                   (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                   if b7
                                                   then if b8
                                                        then false
                                                        else if b9
                                                             then if b10
                                                                  then false
                                                                  else 
                                                                    if b11
                                                                    then false
                                                                    else 
                                                                    if b12
                                                                    then false
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then false
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    false
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then false
                                                                    else 
                                                                    if b16
                                                                    then false
                                                                    else 
                                                                    if b17
                                                                    then 
                                                                    if b18
                                                                    then false
                                                                    else 
                                                                    if b19
                                                                    then 
                                                                    if b20
                                                                    then false
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then false
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    false
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then 
                                                                    if b24
                                                                    then false
                                                                    else 
                                                                    if b25
                                                                    then false
                                                                    else 
                                                                    if b26
                                                                    then false
                                                                    else 
                                                                    if b27
                                                                    then false
                                                                    else 
                                                                    if b28
                                                                    then false
                                                                    else 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then false
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    false
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then false
                                                                    else 
                                                                    if b32
                                                                    then false
                                                                    else 
                                                                    if b33
                                                                    then false
                                                                    else 
                                                                    if b34
                                                                    then false
                                                                    else 
                                                                    if b35
                                                                    then 
                                                                    if b36
                                                                    then false
                                                                    else 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then false
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    false
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then 
                                                                    if b40
                                                                    then false
                                                                    else 
                                                                    if b41
                                                                    then 
                                                                    if b42
                                                                    then false
                                                                    else 
                                                                    if b43
                                                                    then 
                                                                    if b44
                                                                    then false
                                                                    else 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then false
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    false
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then 
                                                                    if b48
                                                                    then 
                                                                    if b49
                                                                    then false
                                                                    else 
                                                                    if b50
                                                                    then false
                                                                    else 
                                                                    if b51
                                                                    then 
                                                                    if b52
                                                                    then false
                                                                    else 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then false
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    false
                                                                    | a6::s7 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b55 b56 b57 b58 b59 b60 b61 b62 ->
                                                                    if b55
                                                                    then false
                                                                    else 
                                                                    if b56
                                                                    then false
                                                                    else 
                                                                    if b57
                                                                    then false
                                                                    else 
                                                                    if b58
                                                                    then 
                                                                    if b59
                                                                    then false
                                                                    else 
                                                                    if b60
                                                                    then false
                                                                    else 
                                                                    if b61
                                                                    then 
                                                                    if b62
                                                                    then false
                                                                    else 
                                                                    (match s7 with
                                                                    | [] ->
                                                                    true
                                                                    | _::_ ->
                                                                    false)
                                                                    else false
                                                                    else false)
                                                                    a6)
                                                                    else false
                                                                    else false
                                                                    else false
                                                                    else false)
                                                                    a5)
                                                                    else false
                                                                    else false
                                                                    else false
                                                                    else false)
                                                                    a4)
                                                                    else false
                                                                    else false)
                                                                    a3)
                                                                    else false
                                                                    else false)
                                                                    a2)
                                                                    else false
                                                                    else false
                                                                    else false)
                                                                    a1)
                                                                    else false
                                                             else false
                                                   else false)
                                                   a0)
                                    else false
                     else false
                else false
      else false)
      a

  (** val is_dup : char list -> nat option **)

  let is_dup s =
    match list_of_string s with
    | [] -> None
    | a::l ->
      (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
        (fun b b0 b1 b2 b3 b4 b5 b6 ->
        if b
        then None
        else if b0
             then None
             else if b1
                  then if b2
                       then None
                       else if b3
                            then None
                            else if b4
                                 then None
                                 else if b5
                                      then if b6
                                           then None
                                           else (match l with
                                                 | [] -> None
                                                 | a0::l0 ->
                                                   (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                     (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                     if b7
                                                     then if b8
                                                          then None
                                                          else if b9
                                                               then if b10
                                                                    then None
                                                                    else 
                                                                    if b11
                                                                    then 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match l0 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::xs ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then None
                                                                    else 
                                                                    if b16
                                                                    then None
                                                                    else 
                                                                    if b17
                                                                    then None
                                                                    else 
                                                                    if b18
                                                                    then None
                                                                    else 
                                                                    if b19
                                                                    then 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match 
                                                                    parseDecNumber'
                                                                    xs O with
                                                                    | Some n0 ->
                                                                    if 
                                                                    (&&)
                                                                    (Nat.leb
                                                                    (S O) n0)
                                                                    (Nat.leb
                                                                    n0 (S (S
                                                                    (S (S (S
                                                                    (S (S (S
                                                                    (S (S (S
                                                                    (S (S (S
                                                                    (S (S
                                                                    O)))))))))))))))))
                                                                    then 
                                                                    Some n0
                                                                    else None
                                                                    | None ->
                                                                    None)
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None
                                                               else None
                                                     else None)
                                                     a0)
                                      else None
                  else None)
        a

  (** val is_swap : char list -> nat option **)

  let is_swap s =
    match list_of_string s with
    | [] -> None
    | a::l ->
      (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
        (fun b b0 b1 b2 b3 b4 b5 b6 ->
        if b
        then if b0
             then if b1
                  then None
                  else if b2
                       then None
                       else if b3
                            then if b4
                                 then None
                                 else if b5
                                      then if b6
                                           then None
                                           else (match l with
                                                 | [] -> None
                                                 | a0::l0 ->
                                                   (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                     (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                     if b7
                                                     then if b8
                                                          then if b9
                                                               then if b10
                                                                    then None
                                                                    else 
                                                                    if b11
                                                                    then 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match l0 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::l1 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then 
                                                                    if b16
                                                                    then None
                                                                    else 
                                                                    if b17
                                                                    then None
                                                                    else 
                                                                    if b18
                                                                    then None
                                                                    else 
                                                                    if b19
                                                                    then None
                                                                    else 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match l1 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::xs ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then None
                                                                    else 
                                                                    if b24
                                                                    then None
                                                                    else 
                                                                    if b25
                                                                    then None
                                                                    else 
                                                                    if b26
                                                                    then None
                                                                    else 
                                                                    if b27
                                                                    then 
                                                                    if b28
                                                                    then None
                                                                    else 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match 
                                                                    parseDecNumber'
                                                                    xs O with
                                                                    | Some n0 ->
                                                                    if 
                                                                    (&&)
                                                                    (Nat.leb
                                                                    (S O) n0)
                                                                    (Nat.leb
                                                                    n0 (S (S
                                                                    (S (S (S
                                                                    (S (S (S
                                                                    (S (S (S
                                                                    (S (S (S
                                                                    (S (S
                                                                    O)))))))))))))))))
                                                                    then 
                                                                    Some n0
                                                                    else None
                                                                    | None ->
                                                                    None)
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None
                                                               else None
                                                          else None
                                                     else None)
                                                     a0)
                                      else None
                            else None
             else None
        else None)
        a

  (** val parse_non_push_instr : char list -> Program.instr option **)

  let parse_non_push_instr s =
    match is_dup s with
    | Some n0 -> Some (Program.DUP n0)
    | None ->
      (match is_swap s with
       | Some n0 -> Some (Program.SWAP n0)
       | None ->
         (match s with
          | [] -> None
          | a::s0 ->
            (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
              (fun b b0 b1 b2 b3 b4 b5 b6 ->
              if b
              then if b0
                   then if b1
                        then if b2
                             then if b3
                                  then None
                                  else if b4
                                       then None
                                       else if b5
                                            then if b6
                                                 then None
                                                 else (match s0 with
                                                       | [] -> None
                                                       | a0::s1 ->
                                                         (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                           (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                           if b7
                                                           then None
                                                           else if b8
                                                                then 
                                                                  if b9
                                                                  then None
                                                                  else 
                                                                    if b10
                                                                    then None
                                                                    else 
                                                                    if b11
                                                                    then 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.OR)
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then 
                                                                    if b16
                                                                    then None
                                                                    else 
                                                                    if b17
                                                                    then None
                                                                    else 
                                                                    if b18
                                                                    then 
                                                                    if b19
                                                                    then None
                                                                    else 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then 
                                                                    if b24
                                                                    then 
                                                                    if b25
                                                                    then 
                                                                    if b26
                                                                    then None
                                                                    else 
                                                                    if b27
                                                                    then None
                                                                    else 
                                                                    if b28
                                                                    then None
                                                                    else 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then 
                                                                    if b32
                                                                    then None
                                                                    else 
                                                                    if b33
                                                                    then None
                                                                    else 
                                                                    if b34
                                                                    then 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then None
                                                                    else 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then None
                                                                    else 
                                                                    if b40
                                                                    then 
                                                                    if b41
                                                                    then 
                                                                    if b42
                                                                    then 
                                                                    if b43
                                                                    then None
                                                                    else 
                                                                    if b44
                                                                    then None
                                                                    else 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.ORIGIN)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None
                                                                else None)
                                                           a0)
                                            else None
                             else if b3
                                  then None
                                  else if b4
                                       then None
                                       else if b5
                                            then if b6
                                                 then None
                                                 else (match s0 with
                                                       | [] -> None
                                                       | a0::s1 ->
                                                         (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                           (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                           if b7
                                                           then if b8
                                                                then None
                                                                else 
                                                                  if b9
                                                                  then None
                                                                  else 
                                                                    if b10
                                                                    then None
                                                                    else 
                                                                    if b11
                                                                    then None
                                                                    else 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then 
                                                                    if b16
                                                                    then 
                                                                    if b17
                                                                    then None
                                                                    else 
                                                                    if b18
                                                                    then None
                                                                    else 
                                                                    if b19
                                                                    then 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.GAS)
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then None
                                                                    else 
                                                                    if b24
                                                                    then None
                                                                    else 
                                                                    if b25
                                                                    then 
                                                                    if b26
                                                                    then 
                                                                    if b27
                                                                    then None
                                                                    else 
                                                                    if b28
                                                                    then None
                                                                    else 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then 
                                                                    if b32
                                                                    then None
                                                                    else 
                                                                    if b33
                                                                    then None
                                                                    else 
                                                                    if b34
                                                                    then 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then None
                                                                    else 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then 
                                                                    if b40
                                                                    then None
                                                                    else 
                                                                    if b41
                                                                    then 
                                                                    if b42
                                                                    then 
                                                                    if b43
                                                                    then None
                                                                    else 
                                                                    if b44
                                                                    then None
                                                                    else 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    None
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then 
                                                                    if b48
                                                                    then None
                                                                    else 
                                                                    if b49
                                                                    then None
                                                                    else 
                                                                    if b50
                                                                    then 
                                                                    if b51
                                                                    then None
                                                                    else 
                                                                    if b52
                                                                    then None
                                                                    else 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    None
                                                                    | a6::s7 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b55 b56 b57 b58 b59 b60 b61 b62 ->
                                                                    if b55
                                                                    then None
                                                                    else 
                                                                    if b56
                                                                    then None
                                                                    else 
                                                                    if b57
                                                                    then 
                                                                    if b58
                                                                    then None
                                                                    else 
                                                                    if b59
                                                                    then 
                                                                    if b60
                                                                    then None
                                                                    else 
                                                                    if b61
                                                                    then 
                                                                    if b62
                                                                    then None
                                                                    else 
                                                                    (match s7 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.GASLIMIT)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a6)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None
                                                                    else 
                                                                    if b26
                                                                    then None
                                                                    else 
                                                                    if b27
                                                                    then 
                                                                    if b28
                                                                    then None
                                                                    else 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then None
                                                                    else 
                                                                    if b32
                                                                    then 
                                                                    if b33
                                                                    then None
                                                                    else 
                                                                    if b34
                                                                    then None
                                                                    else 
                                                                    if b35
                                                                    then 
                                                                    if b36
                                                                    then None
                                                                    else 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then 
                                                                    if b40
                                                                    then None
                                                                    else 
                                                                    if b41
                                                                    then None
                                                                    else 
                                                                    if b42
                                                                    then 
                                                                    if b43
                                                                    then None
                                                                    else 
                                                                    if b44
                                                                    then None
                                                                    else 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    None
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then 
                                                                    if b48
                                                                    then 
                                                                    if b49
                                                                    then None
                                                                    else 
                                                                    if b50
                                                                    then None
                                                                    else 
                                                                    if b51
                                                                    then None
                                                                    else 
                                                                    if b52
                                                                    then None
                                                                    else 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    None
                                                                    | a6::s7 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b55 b56 b57 b58 b59 b60 b61 b62 ->
                                                                    if b55
                                                                    then 
                                                                    if b56
                                                                    then None
                                                                    else 
                                                                    if b57
                                                                    then 
                                                                    if b58
                                                                    then None
                                                                    else 
                                                                    if b59
                                                                    then None
                                                                    else 
                                                                    if b60
                                                                    then None
                                                                    else 
                                                                    if b61
                                                                    then 
                                                                    if b62
                                                                    then None
                                                                    else 
                                                                    (match s7 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.GASPRICE)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a6)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                           else if b8
                                                                then None
                                                                else 
                                                                  if b9
                                                                  then 
                                                                    if b10
                                                                    then None
                                                                    else 
                                                                    if b11
                                                                    then 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.GT)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                  else None)
                                                           a0)
                                            else None
                        else if b2
                             then if b3
                                  then None
                                  else if b4
                                       then None
                                       else if b5
                                            then if b6
                                                 then None
                                                 else (match s0 with
                                                       | [] -> None
                                                       | a0::s1 ->
                                                         (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                           (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                           if b7
                                                           then if b8
                                                                then None
                                                                else 
                                                                  if b9
                                                                  then 
                                                                    if b10
                                                                    then None
                                                                    else 
                                                                    if b11
                                                                    then None
                                                                    else 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then 
                                                                    if b16
                                                                    then 
                                                                    if b17
                                                                    then None
                                                                    else 
                                                                    if b18
                                                                    then None
                                                                    else 
                                                                    if b19
                                                                    then None
                                                                    else 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then 
                                                                    if b24
                                                                    then 
                                                                    if b25
                                                                    then None
                                                                    else 
                                                                    if b26
                                                                    then None
                                                                    else 
                                                                    if b27
                                                                    then None
                                                                    else 
                                                                    if b28
                                                                    then None
                                                                    else 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then 
                                                                    if b32
                                                                    then None
                                                                    else 
                                                                    if b33
                                                                    then None
                                                                    else 
                                                                    if b34
                                                                    then None
                                                                    else 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then None
                                                                    else 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then 
                                                                    if b40
                                                                    then 
                                                                    if b41
                                                                    then None
                                                                    else 
                                                                    if b42
                                                                    then 
                                                                    if b43
                                                                    then None
                                                                    else 
                                                                    if b44
                                                                    then None
                                                                    else 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    None
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then None
                                                                    else 
                                                                    if b48
                                                                    then 
                                                                    if b49
                                                                    then None
                                                                    else 
                                                                    if b50
                                                                    then None
                                                                    else 
                                                                    if b51
                                                                    then 
                                                                    if b52
                                                                    then 
                                                                    if b53
                                                                    then None
                                                                    else 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    None
                                                                    | a6::s7 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b55 b56 b57 b58 b59 b60 b61 b62 ->
                                                                    if b55
                                                                    then 
                                                                    if b56
                                                                    then None
                                                                    else 
                                                                    if b57
                                                                    then 
                                                                    if b58
                                                                    then None
                                                                    else 
                                                                    if b59
                                                                    then 
                                                                    if b60
                                                                    then 
                                                                    if b61
                                                                    then None
                                                                    else 
                                                                    if b62
                                                                    then None
                                                                    else 
                                                                    (match s7 with
                                                                    | [] ->
                                                                    None
                                                                    | a7::s8 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b63 b64 b65 b66 b67 b68 b69 b70 ->
                                                                    if b63
                                                                    then None
                                                                    else 
                                                                    if b64
                                                                    then 
                                                                    if b65
                                                                    then 
                                                                    if b66
                                                                    then None
                                                                    else 
                                                                    if b67
                                                                    then 
                                                                    if b68
                                                                    then 
                                                                    if b69
                                                                    then None
                                                                    else 
                                                                    if b70
                                                                    then None
                                                                    else 
                                                                    (match s8 with
                                                                    | [] ->
                                                                    Some
                                                                    Program.KECCAK256
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a7)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a6)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                  else None
                                                           else None)
                                                           a0)
                                            else None
                             else if b3
                                  then if b4
                                       then None
                                       else if b5
                                            then if b6
                                                 then None
                                                 else (match s0 with
                                                       | [] -> None
                                                       | a0::s1 ->
                                                         (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                           (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                           if b7
                                                           then if b8
                                                                then 
                                                                  if b9
                                                                  then 
                                                                    if b10
                                                                    then None
                                                                    else 
                                                                    if b11
                                                                    then None
                                                                    else 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then None
                                                                    else 
                                                                    if b16
                                                                    then None
                                                                    else 
                                                                    if b17
                                                                    then 
                                                                    if b18
                                                                    then None
                                                                    else 
                                                                    if b19
                                                                    then 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.SGT)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                  else 
                                                                    if b10
                                                                    then None
                                                                    else 
                                                                    if b11
                                                                    then 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then None
                                                                    else 
                                                                    if b16
                                                                    then None
                                                                    else 
                                                                    if b17
                                                                    then 
                                                                    if b18
                                                                    then None
                                                                    else 
                                                                    if b19
                                                                    then 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then 
                                                                    if b24
                                                                    then 
                                                                    if b25
                                                                    then 
                                                                    if b26
                                                                    then 
                                                                    if b27
                                                                    then None
                                                                    else 
                                                                    if b28
                                                                    then None
                                                                    else 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then None
                                                                    else 
                                                                    if b32
                                                                    then 
                                                                    if b33
                                                                    then None
                                                                    else 
                                                                    if b34
                                                                    then None
                                                                    else 
                                                                    if b35
                                                                    then 
                                                                    if b36
                                                                    then None
                                                                    else 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then 
                                                                    if b40
                                                                    then None
                                                                    else 
                                                                    if b41
                                                                    then 
                                                                    if b42
                                                                    then None
                                                                    else 
                                                                    if b43
                                                                    then None
                                                                    else 
                                                                    if b44
                                                                    then None
                                                                    else 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    Some
                                                                    Program.SSTORE
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None
                                                                else 
                                                                  if b9
                                                                  then 
                                                                    if b10
                                                                    then 
                                                                    if b11
                                                                    then None
                                                                    else 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then 
                                                                    if b16
                                                                    then 
                                                                    if b17
                                                                    then 
                                                                    if b18
                                                                    then 
                                                                    if b19
                                                                    then None
                                                                    else 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then None
                                                                    else 
                                                                    if b24
                                                                    then None
                                                                    else 
                                                                    if b25
                                                                    then 
                                                                    if b26
                                                                    then None
                                                                    else 
                                                                    if b27
                                                                    then None
                                                                    else 
                                                                    if b28
                                                                    then None
                                                                    else 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.SMOD)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else 
                                                                    if b11
                                                                    then 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then None
                                                                    else 
                                                                    if b16
                                                                    then 
                                                                    if b17
                                                                    then None
                                                                    else 
                                                                    if b18
                                                                    then None
                                                                    else 
                                                                    if b19
                                                                    then None
                                                                    else 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.SUB)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then None
                                                                    else 
                                                                    if b16
                                                                    then None
                                                                    else 
                                                                    if b17
                                                                    then 
                                                                    if b18
                                                                    then 
                                                                    if b19
                                                                    then None
                                                                    else 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then None
                                                                    else 
                                                                    if b24
                                                                    then 
                                                                    if b25
                                                                    then 
                                                                    if b26
                                                                    then None
                                                                    else 
                                                                    if b27
                                                                    then None
                                                                    else 
                                                                    if b28
                                                                    then None
                                                                    else 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then None
                                                                    else 
                                                                    if b32
                                                                    then 
                                                                    if b33
                                                                    then None
                                                                    else 
                                                                    if b34
                                                                    then None
                                                                    else 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then None
                                                                    else 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then 
                                                                    if b40
                                                                    then None
                                                                    else 
                                                                    if b41
                                                                    then None
                                                                    else 
                                                                    if b42
                                                                    then None
                                                                    else 
                                                                    if b43
                                                                    then None
                                                                    else 
                                                                    if b44
                                                                    then None
                                                                    else 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    None
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then None
                                                                    else 
                                                                    if b48
                                                                    then None
                                                                    else 
                                                                    if b49
                                                                    then 
                                                                    if b50
                                                                    then 
                                                                    if b51
                                                                    then None
                                                                    else 
                                                                    if b52
                                                                    then None
                                                                    else 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    None
                                                                    | a6::s7 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b55 b56 b57 b58 b59 b60 b61 b62 ->
                                                                    if b55
                                                                    then 
                                                                    if b56
                                                                    then None
                                                                    else 
                                                                    if b57
                                                                    then None
                                                                    else 
                                                                    if b58
                                                                    then None
                                                                    else 
                                                                    if b59
                                                                    then None
                                                                    else 
                                                                    if b60
                                                                    then None
                                                                    else 
                                                                    if b61
                                                                    then 
                                                                    if b62
                                                                    then None
                                                                    else 
                                                                    (match s7 with
                                                                    | [] ->
                                                                    None
                                                                    | a7::s8 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b63 b64 b65 b66 b67 b68 b69 b70 ->
                                                                    if b63
                                                                    then None
                                                                    else 
                                                                    if b64
                                                                    then 
                                                                    if b65
                                                                    then 
                                                                    if b66
                                                                    then 
                                                                    if b67
                                                                    then None
                                                                    else 
                                                                    if b68
                                                                    then None
                                                                    else 
                                                                    if b69
                                                                    then 
                                                                    if b70
                                                                    then None
                                                                    else 
                                                                    (match s8 with
                                                                    | [] ->
                                                                    None
                                                                    | a8::s9 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b71 b72 b73 b74 b75 b76 b77 b78 ->
                                                                    if b71
                                                                    then 
                                                                    if b72
                                                                    then 
                                                                    if b73
                                                                    then None
                                                                    else 
                                                                    if b74
                                                                    then None
                                                                    else 
                                                                    if b75
                                                                    then None
                                                                    else 
                                                                    if b76
                                                                    then None
                                                                    else 
                                                                    if b77
                                                                    then 
                                                                    if b78
                                                                    then None
                                                                    else 
                                                                    (match s9 with
                                                                    | [] ->
                                                                    None
                                                                    | a9::s10 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b79 b80 b81 b82 b83 b84 b85 b86 ->
                                                                    if b79
                                                                    then 
                                                                    if b80
                                                                    then None
                                                                    else 
                                                                    if b81
                                                                    then 
                                                                    if b82
                                                                    then None
                                                                    else 
                                                                    if b83
                                                                    then None
                                                                    else 
                                                                    if b84
                                                                    then None
                                                                    else 
                                                                    if b85
                                                                    then 
                                                                    if b86
                                                                    then None
                                                                    else 
                                                                    (match s10 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.SELFBALANCE)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a9)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a8)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a7)
                                                                    else None
                                                                    else None)
                                                                    a6)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                  else 
                                                                    if b10
                                                                    then 
                                                                    if b11
                                                                    then None
                                                                    else 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then 
                                                                    if b16
                                                                    then 
                                                                    if b17
                                                                    then 
                                                                    if b18
                                                                    then None
                                                                    else 
                                                                    if b19
                                                                    then None
                                                                    else 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then None
                                                                    else 
                                                                    if b24
                                                                    then 
                                                                    if b25
                                                                    then 
                                                                    if b26
                                                                    then 
                                                                    if b27
                                                                    then None
                                                                    else 
                                                                    if b28
                                                                    then None
                                                                    else 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then 
                                                                    if b32
                                                                    then None
                                                                    else 
                                                                    if b33
                                                                    then 
                                                                    if b34
                                                                    then None
                                                                    else 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then None
                                                                    else 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then None
                                                                    else 
                                                                    if b40
                                                                    then None
                                                                    else 
                                                                    if b41
                                                                    then None
                                                                    else 
                                                                    if b42
                                                                    then 
                                                                    if b43
                                                                    then 
                                                                    if b44
                                                                    then None
                                                                    else 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    None
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then None
                                                                    else 
                                                                    if b48
                                                                    then None
                                                                    else 
                                                                    if b49
                                                                    then 
                                                                    if b50
                                                                    then None
                                                                    else 
                                                                    if b51
                                                                    then 
                                                                    if b52
                                                                    then None
                                                                    else 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    None
                                                                    | a6::s7 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b55 b56 b57 b58 b59 b60 b61 b62 ->
                                                                    if b55
                                                                    then 
                                                                    if b56
                                                                    then None
                                                                    else 
                                                                    if b57
                                                                    then 
                                                                    if b58
                                                                    then None
                                                                    else 
                                                                    if b59
                                                                    then None
                                                                    else 
                                                                    if b60
                                                                    then None
                                                                    else 
                                                                    if b61
                                                                    then 
                                                                    if b62
                                                                    then None
                                                                    else 
                                                                    (match s7 with
                                                                    | [] ->
                                                                    None
                                                                    | a7::s8 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b63 b64 b65 b66 b67 b68 b69 b70 ->
                                                                    if b63
                                                                    then None
                                                                    else 
                                                                    if b64
                                                                    then 
                                                                    if b65
                                                                    then 
                                                                    if b66
                                                                    then 
                                                                    if b67
                                                                    then None
                                                                    else 
                                                                    if b68
                                                                    then None
                                                                    else 
                                                                    if b69
                                                                    then 
                                                                    if b70
                                                                    then None
                                                                    else 
                                                                    (match s8 with
                                                                    | [] ->
                                                                    None
                                                                    | a8::s9 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b71 b72 b73 b74 b75 b76 b77 b78 ->
                                                                    if b71
                                                                    then None
                                                                    else 
                                                                    if b72
                                                                    then None
                                                                    else 
                                                                    if b73
                                                                    then 
                                                                    if b74
                                                                    then None
                                                                    else 
                                                                    if b75
                                                                    then None
                                                                    else 
                                                                    if b76
                                                                    then None
                                                                    else 
                                                                    if b77
                                                                    then 
                                                                    if b78
                                                                    then None
                                                                    else 
                                                                    (match s9 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.SIGNEXTEND)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None)
                                                                    a8)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a7)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a6)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else 
                                                                    if b11
                                                                    then None
                                                                    else 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then None
                                                                    else 
                                                                    if b16
                                                                    then 
                                                                    if b17
                                                                    then None
                                                                    else 
                                                                    if b18
                                                                    then None
                                                                    else 
                                                                    if b19
                                                                    then 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.SAR)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                           else if b8
                                                                then None
                                                                else 
                                                                  if b9
                                                                  then 
                                                                    if b10
                                                                    then 
                                                                    if b11
                                                                    then None
                                                                    else 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then 
                                                                    if b16
                                                                    then 
                                                                    if b17
                                                                    then 
                                                                    if b18
                                                                    then 
                                                                    if b19
                                                                    then None
                                                                    else 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then 
                                                                    if b24
                                                                    then None
                                                                    else 
                                                                    if b25
                                                                    then None
                                                                    else 
                                                                    if b26
                                                                    then None
                                                                    else 
                                                                    if b27
                                                                    then None
                                                                    else 
                                                                    if b28
                                                                    then None
                                                                    else 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then None
                                                                    else 
                                                                    if b32
                                                                    then None
                                                                    else 
                                                                    if b33
                                                                    then 
                                                                    if b34
                                                                    then None
                                                                    else 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then None
                                                                    else 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    Some
                                                                    Program.SLOAD
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else 
                                                                    if b16
                                                                    then None
                                                                    else 
                                                                    if b17
                                                                    then 
                                                                    if b18
                                                                    then None
                                                                    else 
                                                                    if b19
                                                                    then 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.SLT)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else 
                                                                    if b11
                                                                    then None
                                                                    else 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then 
                                                                    if b16
                                                                    then None
                                                                    else 
                                                                    if b17
                                                                    then None
                                                                    else 
                                                                    if b18
                                                                    then 
                                                                    if b19
                                                                    then None
                                                                    else 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then None
                                                                    else 
                                                                    if b24
                                                                    then 
                                                                    if b25
                                                                    then 
                                                                    if b26
                                                                    then None
                                                                    else 
                                                                    if b27
                                                                    then 
                                                                    if b28
                                                                    then None
                                                                    else 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.SDIV)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                  else 
                                                                    if b10
                                                                    then 
                                                                    if b11
                                                                    then None
                                                                    else 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then 
                                                                    if b16
                                                                    then None
                                                                    else 
                                                                    if b17
                                                                    then None
                                                                    else 
                                                                    if b18
                                                                    then None
                                                                    else 
                                                                    if b19
                                                                    then None
                                                                    else 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then 
                                                                    if b24
                                                                    then 
                                                                    if b25
                                                                    then None
                                                                    else 
                                                                    if b26
                                                                    then None
                                                                    else 
                                                                    if b27
                                                                    then 
                                                                    if b28
                                                                    then 
                                                                    if b29
                                                                    then None
                                                                    else 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    Some
                                                                    Program.SHA3
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else 
                                                                    if b16
                                                                    then 
                                                                    if b17
                                                                    then None
                                                                    else 
                                                                    if b18
                                                                    then None
                                                                    else 
                                                                    if b19
                                                                    then 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.SHR)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else 
                                                                    if b17
                                                                    then 
                                                                    if b18
                                                                    then 
                                                                    if b19
                                                                    then None
                                                                    else 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.SHL)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None)
                                                           a0)
                                            else None
                                  else if b4
                                       then None
                                       else if b5
                                            then if b6
                                                 then None
                                                 else (match s0 with
                                                       | [] -> None
                                                       | a0::s1 ->
                                                         (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                           (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                           if b7
                                                           then if b8
                                                                then 
                                                                  if b9
                                                                  then 
                                                                    if b10
                                                                    then 
                                                                    if b11
                                                                    then None
                                                                    else 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then 
                                                                    if b16
                                                                    then None
                                                                    else 
                                                                    if b17
                                                                    then None
                                                                    else 
                                                                    if b18
                                                                    then 
                                                                    if b19
                                                                    then None
                                                                    else 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then None
                                                                    else 
                                                                    if b24
                                                                    then 
                                                                    if b25
                                                                    then 
                                                                    if b26
                                                                    then 
                                                                    if b27
                                                                    then None
                                                                    else 
                                                                    if b28
                                                                    then None
                                                                    else 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then None
                                                                    else 
                                                                    if b32
                                                                    then 
                                                                    if b33
                                                                    then None
                                                                    else 
                                                                    if b34
                                                                    then None
                                                                    else 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then None
                                                                    else 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then 
                                                                    if b40
                                                                    then None
                                                                    else 
                                                                    if b41
                                                                    then None
                                                                    else 
                                                                    if b42
                                                                    then None
                                                                    else 
                                                                    if b43
                                                                    then None
                                                                    else 
                                                                    if b44
                                                                    then None
                                                                    else 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    None
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then 
                                                                    if b48
                                                                    then 
                                                                    if b49
                                                                    then None
                                                                    else 
                                                                    if b50
                                                                    then None
                                                                    else 
                                                                    if b51
                                                                    then 
                                                                    if b52
                                                                    then None
                                                                    else 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    None
                                                                    | a6::s7 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b55 b56 b57 b58 b59 b60 b61 b62 ->
                                                                    if b55
                                                                    then 
                                                                    if b56
                                                                    then None
                                                                    else 
                                                                    if b57
                                                                    then 
                                                                    if b58
                                                                    then None
                                                                    else 
                                                                    if b59
                                                                    then None
                                                                    else 
                                                                    if b60
                                                                    then None
                                                                    else 
                                                                    if b61
                                                                    then 
                                                                    if b62
                                                                    then None
                                                                    else 
                                                                    (match s7 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.COINBASE)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a6)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else 
                                                                    if b16
                                                                    then None
                                                                    else 
                                                                    if b17
                                                                    then 
                                                                    if b18
                                                                    then None
                                                                    else 
                                                                    if b19
                                                                    then None
                                                                    else 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then 
                                                                    if b24
                                                                    then None
                                                                    else 
                                                                    if b25
                                                                    then 
                                                                    if b26
                                                                    then None
                                                                    else 
                                                                    if b27
                                                                    then None
                                                                    else 
                                                                    if b28
                                                                    then None
                                                                    else 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then 
                                                                    if b32
                                                                    then 
                                                                    if b33
                                                                    then None
                                                                    else 
                                                                    if b34
                                                                    then None
                                                                    else 
                                                                    if b35
                                                                    then 
                                                                    if b36
                                                                    then None
                                                                    else 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then 
                                                                    if b40
                                                                    then None
                                                                    else 
                                                                    if b41
                                                                    then None
                                                                    else 
                                                                    if b42
                                                                    then 
                                                                    if b43
                                                                    then None
                                                                    else 
                                                                    if b44
                                                                    then None
                                                                    else 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    None
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then None
                                                                    else 
                                                                    if b48
                                                                    then 
                                                                    if b49
                                                                    then None
                                                                    else 
                                                                    if b50
                                                                    then 
                                                                    if b51
                                                                    then 
                                                                    if b52
                                                                    then None
                                                                    else 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    None
                                                                    | a6::s7 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b55 b56 b57 b58 b59 b60 b61 b62 ->
                                                                    if b55
                                                                    then 
                                                                    if b56
                                                                    then None
                                                                    else 
                                                                    if b57
                                                                    then 
                                                                    if b58
                                                                    then None
                                                                    else 
                                                                    if b59
                                                                    then None
                                                                    else 
                                                                    if b60
                                                                    then None
                                                                    else 
                                                                    if b61
                                                                    then 
                                                                    if b62
                                                                    then None
                                                                    else 
                                                                    (match s7 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.CODESIZE)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a6)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None
                                                                  else None
                                                                else 
                                                                  if b9
                                                                  then None
                                                                  else 
                                                                    if b10
                                                                    then None
                                                                    else 
                                                                    if b11
                                                                    then None
                                                                    else 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then None
                                                                    else 
                                                                    if b16
                                                                    then None
                                                                    else 
                                                                    if b17
                                                                    then 
                                                                    if b18
                                                                    then 
                                                                    if b19
                                                                    then None
                                                                    else 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then None
                                                                    else 
                                                                    if b24
                                                                    then None
                                                                    else 
                                                                    if b25
                                                                    then 
                                                                    if b26
                                                                    then 
                                                                    if b27
                                                                    then None
                                                                    else 
                                                                    if b28
                                                                    then None
                                                                    else 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then 
                                                                    if b32
                                                                    then None
                                                                    else 
                                                                    if b33
                                                                    then 
                                                                    if b34
                                                                    then None
                                                                    else 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then None
                                                                    else 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then None
                                                                    else 
                                                                    if b40
                                                                    then 
                                                                    if b41
                                                                    then None
                                                                    else 
                                                                    if b42
                                                                    then None
                                                                    else 
                                                                    if b43
                                                                    then 
                                                                    if b44
                                                                    then None
                                                                    else 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.CALLER)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else 
                                                                    if b32
                                                                    then 
                                                                    if b33
                                                                    then 
                                                                    if b34
                                                                    then None
                                                                    else 
                                                                    if b35
                                                                    then 
                                                                    if b36
                                                                    then None
                                                                    else 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then 
                                                                    if b40
                                                                    then None
                                                                    else 
                                                                    if b41
                                                                    then None
                                                                    else 
                                                                    if b42
                                                                    then None
                                                                    else 
                                                                    if b43
                                                                    then None
                                                                    else 
                                                                    if b44
                                                                    then None
                                                                    else 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    None
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then None
                                                                    else 
                                                                    if b48
                                                                    then None
                                                                    else 
                                                                    if b49
                                                                    then 
                                                                    if b50
                                                                    then 
                                                                    if b51
                                                                    then None
                                                                    else 
                                                                    if b52
                                                                    then None
                                                                    else 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    None
                                                                    | a6::s7 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b55 b56 b57 b58 b59 b60 b61 b62 ->
                                                                    if b55
                                                                    then 
                                                                    if b56
                                                                    then None
                                                                    else 
                                                                    if b57
                                                                    then 
                                                                    if b58
                                                                    then None
                                                                    else 
                                                                    if b59
                                                                    then 
                                                                    if b60
                                                                    then None
                                                                    else 
                                                                    if b61
                                                                    then 
                                                                    if b62
                                                                    then None
                                                                    else 
                                                                    (match s7 with
                                                                    | [] ->
                                                                    None
                                                                    | a7::s8 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b63 b64 b65 b66 b67 b68 b69 b70 ->
                                                                    if b63
                                                                    then 
                                                                    if b64
                                                                    then None
                                                                    else 
                                                                    if b65
                                                                    then 
                                                                    if b66
                                                                    then None
                                                                    else 
                                                                    if b67
                                                                    then None
                                                                    else 
                                                                    if b68
                                                                    then None
                                                                    else 
                                                                    if b69
                                                                    then 
                                                                    if b70
                                                                    then None
                                                                    else 
                                                                    (match s8 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.CALLVALUE)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a7)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a6)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else 
                                                                    if b33
                                                                    then 
                                                                    if b34
                                                                    then None
                                                                    else 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then None
                                                                    else 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then 
                                                                    if b40
                                                                    then None
                                                                    else 
                                                                    if b41
                                                                    then None
                                                                    else 
                                                                    if b42
                                                                    then None
                                                                    else 
                                                                    if b43
                                                                    then None
                                                                    else 
                                                                    if b44
                                                                    then None
                                                                    else 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    None
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then None
                                                                    else 
                                                                    if b48
                                                                    then None
                                                                    else 
                                                                    if b49
                                                                    then 
                                                                    if b50
                                                                    then None
                                                                    else 
                                                                    if b51
                                                                    then 
                                                                    if b52
                                                                    then None
                                                                    else 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    None
                                                                    | a6::s7 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b55 b56 b57 b58 b59 b60 b61 b62 ->
                                                                    if b55
                                                                    then 
                                                                    if b56
                                                                    then None
                                                                    else 
                                                                    if b57
                                                                    then None
                                                                    else 
                                                                    if b58
                                                                    then None
                                                                    else 
                                                                    if b59
                                                                    then None
                                                                    else 
                                                                    if b60
                                                                    then None
                                                                    else 
                                                                    if b61
                                                                    then 
                                                                    if b62
                                                                    then None
                                                                    else 
                                                                    (match s7 with
                                                                    | [] ->
                                                                    None
                                                                    | a7::s8 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b63 b64 b65 b66 b67 b68 b69 b70 ->
                                                                    if b63
                                                                    then 
                                                                    if b64
                                                                    then 
                                                                    if b65
                                                                    then None
                                                                    else 
                                                                    if b66
                                                                    then None
                                                                    else 
                                                                    if b67
                                                                    then 
                                                                    if b68
                                                                    then None
                                                                    else 
                                                                    if b69
                                                                    then 
                                                                    if b70
                                                                    then None
                                                                    else 
                                                                    (match s8 with
                                                                    | [] ->
                                                                    None
                                                                    | a8::s9 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b71 b72 b73 b74 b75 b76 b77 b78 ->
                                                                    if b71
                                                                    then 
                                                                    if b72
                                                                    then None
                                                                    else 
                                                                    if b73
                                                                    then None
                                                                    else 
                                                                    if b74
                                                                    then 
                                                                    if b75
                                                                    then None
                                                                    else 
                                                                    if b76
                                                                    then None
                                                                    else 
                                                                    if b77
                                                                    then 
                                                                    if b78
                                                                    then None
                                                                    else 
                                                                    (match s9 with
                                                                    | [] ->
                                                                    None
                                                                    | a9::s10 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b79 b80 b81 b82 b83 b84 b85 b86 ->
                                                                    if b79
                                                                    then None
                                                                    else 
                                                                    if b80
                                                                    then 
                                                                    if b81
                                                                    then None
                                                                    else 
                                                                    if b82
                                                                    then 
                                                                    if b83
                                                                    then 
                                                                    if b84
                                                                    then None
                                                                    else 
                                                                    if b85
                                                                    then 
                                                                    if b86
                                                                    then None
                                                                    else 
                                                                    (match s10 with
                                                                    | [] ->
                                                                    None
                                                                    | a10::s11 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b87 b88 b89 b90 b91 b92 b93 b94 ->
                                                                    if b87
                                                                    then 
                                                                    if b88
                                                                    then None
                                                                    else 
                                                                    if b89
                                                                    then 
                                                                    if b90
                                                                    then None
                                                                    else 
                                                                    if b91
                                                                    then None
                                                                    else 
                                                                    if b92
                                                                    then None
                                                                    else 
                                                                    if b93
                                                                    then 
                                                                    if b94
                                                                    then None
                                                                    else 
                                                                    (match s11 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.CALLDATASIZE)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a10)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a9)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a8)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else 
                                                                    if b64
                                                                    then None
                                                                    else 
                                                                    if b65
                                                                    then 
                                                                    if b66
                                                                    then 
                                                                    if b67
                                                                    then None
                                                                    else 
                                                                    if b68
                                                                    then None
                                                                    else 
                                                                    if b69
                                                                    then 
                                                                    if b70
                                                                    then None
                                                                    else 
                                                                    (match s8 with
                                                                    | [] ->
                                                                    None
                                                                    | a8::s9 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b71 b72 b73 b74 b75 b76 b77 b78 ->
                                                                    if b71
                                                                    then 
                                                                    if b72
                                                                    then 
                                                                    if b73
                                                                    then 
                                                                    if b74
                                                                    then 
                                                                    if b75
                                                                    then None
                                                                    else 
                                                                    if b76
                                                                    then None
                                                                    else 
                                                                    if b77
                                                                    then 
                                                                    if b78
                                                                    then None
                                                                    else 
                                                                    (match s9 with
                                                                    | [] ->
                                                                    None
                                                                    | a9::s10 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b79 b80 b81 b82 b83 b84 b85 b86 ->
                                                                    if b79
                                                                    then 
                                                                    if b80
                                                                    then None
                                                                    else 
                                                                    if b81
                                                                    then None
                                                                    else 
                                                                    if b82
                                                                    then None
                                                                    else 
                                                                    if b83
                                                                    then None
                                                                    else 
                                                                    if b84
                                                                    then None
                                                                    else 
                                                                    if b85
                                                                    then 
                                                                    if b86
                                                                    then None
                                                                    else 
                                                                    (match s10 with
                                                                    | [] ->
                                                                    None
                                                                    | a10::s11 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b87 b88 b89 b90 b91 b92 b93 b94 ->
                                                                    if b87
                                                                    then None
                                                                    else 
                                                                    if b88
                                                                    then None
                                                                    else 
                                                                    if b89
                                                                    then 
                                                                    if b90
                                                                    then None
                                                                    else 
                                                                    if b91
                                                                    then None
                                                                    else 
                                                                    if b92
                                                                    then None
                                                                    else 
                                                                    if b93
                                                                    then 
                                                                    if b94
                                                                    then None
                                                                    else 
                                                                    (match s11 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.CALLDATALOAD)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None)
                                                                    a10)
                                                                    else None
                                                                    else None)
                                                                    a9)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a8)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a7)
                                                                    else None
                                                                    else None)
                                                                    a6)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                           else if b8
                                                                then None
                                                                else 
                                                                  if b9
                                                                  then None
                                                                  else 
                                                                    if b10
                                                                    then 
                                                                    if b11
                                                                    then None
                                                                    else 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then 
                                                                    if b16
                                                                    then None
                                                                    else 
                                                                    if b17
                                                                    then None
                                                                    else 
                                                                    if b18
                                                                    then None
                                                                    else 
                                                                    if b19
                                                                    then None
                                                                    else 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then 
                                                                    if b24
                                                                    then None
                                                                    else 
                                                                    if b25
                                                                    then None
                                                                    else 
                                                                    if b26
                                                                    then 
                                                                    if b27
                                                                    then None
                                                                    else 
                                                                    if b28
                                                                    then None
                                                                    else 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then None
                                                                    else 
                                                                    if b32
                                                                    then 
                                                                    if b33
                                                                    then 
                                                                    if b34
                                                                    then 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then None
                                                                    else 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then 
                                                                    if b40
                                                                    then None
                                                                    else 
                                                                    if b41
                                                                    then None
                                                                    else 
                                                                    if b42
                                                                    then 
                                                                    if b43
                                                                    then None
                                                                    else 
                                                                    if b44
                                                                    then None
                                                                    else 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    None
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then None
                                                                    else 
                                                                    if b48
                                                                    then None
                                                                    else 
                                                                    if b49
                                                                    then 
                                                                    if b50
                                                                    then None
                                                                    else 
                                                                    if b51
                                                                    then None
                                                                    else 
                                                                    if b52
                                                                    then None
                                                                    else 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.CHAINID)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None)
                                                           a0)
                                            else None
                   else if b1
                        then if b2
                             then if b3
                                  then None
                                  else if b4
                                       then None
                                       else if b5
                                            then if b6
                                                 then None
                                                 else (match s0 with
                                                       | [] -> None
                                                       | a0::s1 ->
                                                         (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                           (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                           if b7
                                                           then if b8
                                                                then 
                                                                  if b9
                                                                  then 
                                                                    if b10
                                                                    then 
                                                                    if b11
                                                                    then None
                                                                    else 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then None
                                                                    else 
                                                                    if b16
                                                                    then None
                                                                    else 
                                                                    if b17
                                                                    then 
                                                                    if b18
                                                                    then None
                                                                    else 
                                                                    if b19
                                                                    then None
                                                                    else 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.MOD)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None
                                                                  else 
                                                                    if b10
                                                                    then None
                                                                    else 
                                                                    if b11
                                                                    then 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then None
                                                                    else 
                                                                    if b16
                                                                    then None
                                                                    else 
                                                                    if b17
                                                                    then 
                                                                    if b18
                                                                    then None
                                                                    else 
                                                                    if b19
                                                                    then 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then 
                                                                    if b24
                                                                    then 
                                                                    if b25
                                                                    then 
                                                                    if b26
                                                                    then 
                                                                    if b27
                                                                    then None
                                                                    else 
                                                                    if b28
                                                                    then None
                                                                    else 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then None
                                                                    else 
                                                                    if b32
                                                                    then 
                                                                    if b33
                                                                    then None
                                                                    else 
                                                                    if b34
                                                                    then None
                                                                    else 
                                                                    if b35
                                                                    then 
                                                                    if b36
                                                                    then None
                                                                    else 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then 
                                                                    if b40
                                                                    then None
                                                                    else 
                                                                    if b41
                                                                    then 
                                                                    if b42
                                                                    then None
                                                                    else 
                                                                    if b43
                                                                    then None
                                                                    else 
                                                                    if b44
                                                                    then None
                                                                    else 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    Some
                                                                    Program.MSTORE
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then None
                                                                    else 
                                                                    if b48
                                                                    then None
                                                                    else 
                                                                    if b49
                                                                    then None
                                                                    else 
                                                                    if b50
                                                                    then 
                                                                    if b51
                                                                    then 
                                                                    if b52
                                                                    then 
                                                                    if b53
                                                                    then None
                                                                    else 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    Some
                                                                    Program.MSTORE8
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None
                                                                else 
                                                                  if b9
                                                                  then 
                                                                    if b10
                                                                    then None
                                                                    else 
                                                                    if b11
                                                                    then 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then None
                                                                    else 
                                                                    if b16
                                                                    then None
                                                                    else 
                                                                    if b17
                                                                    then 
                                                                    if b18
                                                                    then 
                                                                    if b19
                                                                    then None
                                                                    else 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.MUL)
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then 
                                                                    if b24
                                                                    then None
                                                                    else 
                                                                    if b25
                                                                    then 
                                                                    if b26
                                                                    then 
                                                                    if b27
                                                                    then None
                                                                    else 
                                                                    if b28
                                                                    then None
                                                                    else 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then 
                                                                    if b32
                                                                    then 
                                                                    if b33
                                                                    then 
                                                                    if b34
                                                                    then 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then None
                                                                    else 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then None
                                                                    else 
                                                                    if b40
                                                                    then None
                                                                    else 
                                                                    if b41
                                                                    then 
                                                                    if b42
                                                                    then None
                                                                    else 
                                                                    if b43
                                                                    then None
                                                                    else 
                                                                    if b44
                                                                    then None
                                                                    else 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.MULMOD)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None
                                                                  else None
                                                           else if b8
                                                                then None
                                                                else 
                                                                  if b9
                                                                  then 
                                                                    if b10
                                                                    then 
                                                                    if b11
                                                                    then None
                                                                    else 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then 
                                                                    if b16
                                                                    then 
                                                                    if b17
                                                                    then 
                                                                    if b18
                                                                    then 
                                                                    if b19
                                                                    then None
                                                                    else 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then 
                                                                    if b24
                                                                    then None
                                                                    else 
                                                                    if b25
                                                                    then None
                                                                    else 
                                                                    if b26
                                                                    then None
                                                                    else 
                                                                    if b27
                                                                    then None
                                                                    else 
                                                                    if b28
                                                                    then None
                                                                    else 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then None
                                                                    else 
                                                                    if b32
                                                                    then None
                                                                    else 
                                                                    if b33
                                                                    then 
                                                                    if b34
                                                                    then None
                                                                    else 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then None
                                                                    else 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    Some
                                                                    Program.MLOAD
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None
                                                                  else None)
                                                           a0)
                                            else None
                             else if b3
                                  then None
                                  else if b4
                                       then None
                                       else if b5
                                            then if b6
                                                 then None
                                                 else (match s0 with
                                                       | [] -> None
                                                       | a0::s1 ->
                                                         (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                           (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                           if b7
                                                           then if b8
                                                                then None
                                                                else 
                                                                  if b9
                                                                  then None
                                                                  else 
                                                                    if b10
                                                                    then None
                                                                    else 
                                                                    if b11
                                                                    then 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.EQ)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                           else if b8
                                                                then None
                                                                else 
                                                                  if b9
                                                                  then None
                                                                  else 
                                                                    if b10
                                                                    then 
                                                                    if b11
                                                                    then 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then None
                                                                    else 
                                                                    if b16
                                                                    then None
                                                                    else 
                                                                    if b17
                                                                    then 
                                                                    if b18
                                                                    then None
                                                                    else 
                                                                    if b19
                                                                    then 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then 
                                                                    if b24
                                                                    then 
                                                                    if b25
                                                                    then None
                                                                    else 
                                                                    if b26
                                                                    then None
                                                                    else 
                                                                    if b27
                                                                    then None
                                                                    else 
                                                                    if b28
                                                                    then None
                                                                    else 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then 
                                                                    if b32
                                                                    then 
                                                                    if b33
                                                                    then 
                                                                    if b34
                                                                    then 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then None
                                                                    else 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then None
                                                                    else 
                                                                    if b40
                                                                    then None
                                                                    else 
                                                                    if b41
                                                                    then 
                                                                    if b42
                                                                    then None
                                                                    else 
                                                                    if b43
                                                                    then None
                                                                    else 
                                                                    if b44
                                                                    then None
                                                                    else 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    None
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then 
                                                                    if b48
                                                                    then None
                                                                    else 
                                                                    if b49
                                                                    then 
                                                                    if b50
                                                                    then None
                                                                    else 
                                                                    if b51
                                                                    then None
                                                                    else 
                                                                    if b52
                                                                    then None
                                                                    else 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    None
                                                                    | a6::s7 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b55 b56 b57 b58 b59 b60 b61 b62 ->
                                                                    if b55
                                                                    then 
                                                                    if b56
                                                                    then 
                                                                    if b57
                                                                    then None
                                                                    else 
                                                                    if b58
                                                                    then None
                                                                    else 
                                                                    if b59
                                                                    then 
                                                                    if b60
                                                                    then None
                                                                    else 
                                                                    if b61
                                                                    then 
                                                                    if b62
                                                                    then None
                                                                    else 
                                                                    (match s7 with
                                                                    | [] ->
                                                                    None
                                                                    | a7::s8 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b63 b64 b65 b66 b67 b68 b69 b70 ->
                                                                    if b63
                                                                    then 
                                                                    if b64
                                                                    then None
                                                                    else 
                                                                    if b65
                                                                    then None
                                                                    else 
                                                                    if b66
                                                                    then 
                                                                    if b67
                                                                    then None
                                                                    else 
                                                                    if b68
                                                                    then None
                                                                    else 
                                                                    if b69
                                                                    then 
                                                                    if b70
                                                                    then None
                                                                    else 
                                                                    (match s8 with
                                                                    | [] ->
                                                                    None
                                                                    | a8::s9 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b71 b72 b73 b74 b75 b76 b77 b78 ->
                                                                    if b71
                                                                    then None
                                                                    else 
                                                                    if b72
                                                                    then 
                                                                    if b73
                                                                    then None
                                                                    else 
                                                                    if b74
                                                                    then 
                                                                    if b75
                                                                    then 
                                                                    if b76
                                                                    then None
                                                                    else 
                                                                    if b77
                                                                    then 
                                                                    if b78
                                                                    then None
                                                                    else 
                                                                    (match s9 with
                                                                    | [] ->
                                                                    None
                                                                    | a9::s10 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b79 b80 b81 b82 b83 b84 b85 b86 ->
                                                                    if b79
                                                                    then 
                                                                    if b80
                                                                    then None
                                                                    else 
                                                                    if b81
                                                                    then 
                                                                    if b82
                                                                    then None
                                                                    else 
                                                                    if b83
                                                                    then None
                                                                    else 
                                                                    if b84
                                                                    then None
                                                                    else 
                                                                    if b85
                                                                    then 
                                                                    if b86
                                                                    then None
                                                                    else 
                                                                    (match s10 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.EXTCODESIZE)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a9)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a8)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a7)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else 
                                                                    if b56
                                                                    then None
                                                                    else 
                                                                    if b57
                                                                    then None
                                                                    else 
                                                                    if b58
                                                                    then 
                                                                    if b59
                                                                    then None
                                                                    else 
                                                                    if b60
                                                                    then None
                                                                    else 
                                                                    if b61
                                                                    then 
                                                                    if b62
                                                                    then None
                                                                    else 
                                                                    (match s7 with
                                                                    | [] ->
                                                                    None
                                                                    | a7::s8 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b63 b64 b65 b66 b67 b68 b69 b70 ->
                                                                    if b63
                                                                    then 
                                                                    if b64
                                                                    then None
                                                                    else 
                                                                    if b65
                                                                    then None
                                                                    else 
                                                                    if b66
                                                                    then None
                                                                    else 
                                                                    if b67
                                                                    then None
                                                                    else 
                                                                    if b68
                                                                    then None
                                                                    else 
                                                                    if b69
                                                                    then 
                                                                    if b70
                                                                    then None
                                                                    else 
                                                                    (match s8 with
                                                                    | [] ->
                                                                    None
                                                                    | a8::s9 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b71 b72 b73 b74 b75 b76 b77 b78 ->
                                                                    if b71
                                                                    then 
                                                                    if b72
                                                                    then 
                                                                    if b73
                                                                    then None
                                                                    else 
                                                                    if b74
                                                                    then None
                                                                    else 
                                                                    if b75
                                                                    then 
                                                                    if b76
                                                                    then None
                                                                    else 
                                                                    if b77
                                                                    then 
                                                                    if b78
                                                                    then None
                                                                    else 
                                                                    (match s9 with
                                                                    | [] ->
                                                                    None
                                                                    | a9::s10 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b79 b80 b81 b82 b83 b84 b85 b86 ->
                                                                    if b79
                                                                    then None
                                                                    else 
                                                                    if b80
                                                                    then None
                                                                    else 
                                                                    if b81
                                                                    then None
                                                                    else 
                                                                    if b82
                                                                    then 
                                                                    if b83
                                                                    then None
                                                                    else 
                                                                    if b84
                                                                    then None
                                                                    else 
                                                                    if b85
                                                                    then 
                                                                    if b86
                                                                    then None
                                                                    else 
                                                                    (match s10 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.EXTCODEHASH)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None)
                                                                    a9)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a8)
                                                                    else None
                                                                    else None)
                                                                    a7)
                                                                    else None
                                                                    else None)
                                                                    a6)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else 
                                                                    if b18
                                                                    then None
                                                                    else 
                                                                    if b19
                                                                    then 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.EXP)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                           a0)
                                            else None
                        else if b2
                             then if b3
                                  then None
                                  else if b4
                                       then None
                                       else if b5
                                            then if b6
                                                 then None
                                                 else (match s0 with
                                                       | [] -> None
                                                       | a0::s1 ->
                                                         (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                           (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                           if b7
                                                           then if b8
                                                                then 
                                                                  if b9
                                                                  then None
                                                                  else 
                                                                    if b10
                                                                    then None
                                                                    else 
                                                                    if b11
                                                                    then 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then None
                                                                    else 
                                                                    if b16
                                                                    then 
                                                                    if b17
                                                                    then None
                                                                    else 
                                                                    if b18
                                                                    then 
                                                                    if b19
                                                                    then 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then 
                                                                    if b24
                                                                    then None
                                                                    else 
                                                                    if b25
                                                                    then 
                                                                    if b26
                                                                    then None
                                                                    else 
                                                                    if b27
                                                                    then None
                                                                    else 
                                                                    if b28
                                                                    then None
                                                                    else 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then None
                                                                    else 
                                                                    if b32
                                                                    then 
                                                                    if b33
                                                                    then None
                                                                    else 
                                                                    if b34
                                                                    then None
                                                                    else 
                                                                    if b35
                                                                    then 
                                                                    if b36
                                                                    then None
                                                                    else 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then 
                                                                    if b40
                                                                    then 
                                                                    if b41
                                                                    then 
                                                                    if b42
                                                                    then 
                                                                    if b43
                                                                    then None
                                                                    else 
                                                                    if b44
                                                                    then None
                                                                    else 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.ISZERO)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None
                                                                else None
                                                           else None)
                                                           a0)
                                            else None
                             else if b3
                                  then None
                                  else if b4
                                       then None
                                       else if b5
                                            then if b6
                                                 then None
                                                 else (match s0 with
                                                       | [] -> None
                                                       | a0::s1 ->
                                                         (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                           (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                           if b7
                                                           then None
                                                           else if b8
                                                                then 
                                                                  if b9
                                                                  then 
                                                                    if b10
                                                                    then 
                                                                    if b11
                                                                    then None
                                                                    else 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then None
                                                                    else 
                                                                    if b16
                                                                    then None
                                                                    else 
                                                                    if b17
                                                                    then 
                                                                    if b18
                                                                    then None
                                                                    else 
                                                                    if b19
                                                                    then None
                                                                    else 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.AND)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None
                                                                  else None
                                                                else 
                                                                  if b9
                                                                  then 
                                                                    if b10
                                                                    then None
                                                                    else 
                                                                    if b11
                                                                    then None
                                                                    else 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then None
                                                                    else 
                                                                    if b16
                                                                    then None
                                                                    else 
                                                                    if b17
                                                                    then 
                                                                    if b18
                                                                    then None
                                                                    else 
                                                                    if b19
                                                                    then None
                                                                    else 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.ADD)
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then 
                                                                    if b24
                                                                    then None
                                                                    else 
                                                                    if b25
                                                                    then 
                                                                    if b26
                                                                    then 
                                                                    if b27
                                                                    then None
                                                                    else 
                                                                    if b28
                                                                    then None
                                                                    else 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then 
                                                                    if b32
                                                                    then 
                                                                    if b33
                                                                    then 
                                                                    if b34
                                                                    then 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then None
                                                                    else 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then None
                                                                    else 
                                                                    if b40
                                                                    then None
                                                                    else 
                                                                    if b41
                                                                    then 
                                                                    if b42
                                                                    then None
                                                                    else 
                                                                    if b43
                                                                    then None
                                                                    else 
                                                                    if b44
                                                                    then None
                                                                    else 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.ADDMOD)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else 
                                                                    if b24
                                                                    then 
                                                                    if b25
                                                                    then None
                                                                    else 
                                                                    if b26
                                                                    then None
                                                                    else 
                                                                    if b27
                                                                    then 
                                                                    if b28
                                                                    then None
                                                                    else 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then 
                                                                    if b32
                                                                    then None
                                                                    else 
                                                                    if b33
                                                                    then 
                                                                    if b34
                                                                    then None
                                                                    else 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then None
                                                                    else 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then 
                                                                    if b40
                                                                    then 
                                                                    if b41
                                                                    then None
                                                                    else 
                                                                    if b42
                                                                    then None
                                                                    else 
                                                                    if b43
                                                                    then 
                                                                    if b44
                                                                    then None
                                                                    else 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    None
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then 
                                                                    if b48
                                                                    then 
                                                                    if b49
                                                                    then None
                                                                    else 
                                                                    if b50
                                                                    then None
                                                                    else 
                                                                    if b51
                                                                    then 
                                                                    if b52
                                                                    then None
                                                                    else 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.ADDRESS)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                  else None)
                                                           a0)
                                            else None
              else if b0
                   then if b1
                        then if b2
                             then if b3
                                  then None
                                  else if b4
                                       then None
                                       else if b5
                                            then if b6
                                                 then None
                                                 else (match s0 with
                                                       | [] -> None
                                                       | a0::s1 ->
                                                         (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                           (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                           if b7
                                                           then if b8
                                                                then 
                                                                  if b9
                                                                  then 
                                                                    if b10
                                                                    then 
                                                                    if b11
                                                                    then None
                                                                    else 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then None
                                                                    else 
                                                                    if b16
                                                                    then None
                                                                    else 
                                                                    if b17
                                                                    then 
                                                                    if b18
                                                                    then None
                                                                    else 
                                                                    if b19
                                                                    then 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.NOT)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None
                                                                  else None
                                                                else 
                                                                  if b9
                                                                  then 
                                                                    if b10
                                                                    then None
                                                                    else 
                                                                    if b11
                                                                    then 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then 
                                                                    if b16
                                                                    then None
                                                                    else 
                                                                    if b17
                                                                    then 
                                                                    if b18
                                                                    then 
                                                                    if b19
                                                                    then None
                                                                    else 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then None
                                                                    else 
                                                                    if b24
                                                                    then 
                                                                    if b25
                                                                    then None
                                                                    else 
                                                                    if b26
                                                                    then None
                                                                    else 
                                                                    if b27
                                                                    then None
                                                                    else 
                                                                    if b28
                                                                    then None
                                                                    else 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then 
                                                                    if b32
                                                                    then None
                                                                    else 
                                                                    if b33
                                                                    then 
                                                                    if b34
                                                                    then None
                                                                    else 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then None
                                                                    else 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then None
                                                                    else 
                                                                    if b40
                                                                    then 
                                                                    if b41
                                                                    then None
                                                                    else 
                                                                    if b42
                                                                    then None
                                                                    else 
                                                                    if b43
                                                                    then 
                                                                    if b44
                                                                    then None
                                                                    else 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.NUMBER)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None
                                                                  else None
                                                           else None)
                                                           a0)
                                            else None
                             else None
                        else if b2
                             then if b3
                                  then None
                                  else if b4
                                       then None
                                       else if b5
                                            then if b6
                                                 then None
                                                 else (match s0 with
                                                       | [] -> None
                                                       | a0::s1 ->
                                                         (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                           (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                           if b7
                                                           then if b8
                                                                then None
                                                                else 
                                                                  if b9
                                                                  then 
                                                                    if b10
                                                                    then None
                                                                    else 
                                                                    if b11
                                                                    then 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then 
                                                                    if b16
                                                                    then None
                                                                    else 
                                                                    if b17
                                                                    then 
                                                                    if b18
                                                                    then 
                                                                    if b19
                                                                    then None
                                                                    else 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then None
                                                                    else 
                                                                    if b24
                                                                    then None
                                                                    else 
                                                                    if b25
                                                                    then None
                                                                    else 
                                                                    if b26
                                                                    then None
                                                                    else 
                                                                    if b27
                                                                    then 
                                                                    if b28
                                                                    then None
                                                                    else 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then 
                                                                    if b32
                                                                    then None
                                                                    else 
                                                                    if b33
                                                                    then None
                                                                    else 
                                                                    if b34
                                                                    then 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then None
                                                                    else 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.JUMPI)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None
                                                                  else None
                                                           else None)
                                                           a0)
                                            else None
                             else if b3
                                  then if b4
                                       then None
                                       else if b5
                                            then if b6
                                                 then None
                                                 else (match s0 with
                                                       | [] -> None
                                                       | a0::s1 ->
                                                         (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                           (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                           if b7
                                                           then if b8
                                                                then None
                                                                else 
                                                                  if b9
                                                                  then 
                                                                    if b10
                                                                    then None
                                                                    else 
                                                                    if b11
                                                                    then None
                                                                    else 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then None
                                                                    else 
                                                                    if b16
                                                                    then None
                                                                    else 
                                                                    if b17
                                                                    then 
                                                                    if b18
                                                                    then None
                                                                    else 
                                                                    if b19
                                                                    then 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then 
                                                                    if b24
                                                                    then None
                                                                    else 
                                                                    if b25
                                                                    then 
                                                                    if b26
                                                                    then None
                                                                    else 
                                                                    if b27
                                                                    then 
                                                                    if b28
                                                                    then None
                                                                    else 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then None
                                                                    else 
                                                                    if b32
                                                                    then 
                                                                    if b33
                                                                    then None
                                                                    else 
                                                                    if b34
                                                                    then None
                                                                    else 
                                                                    if b35
                                                                    then 
                                                                    if b36
                                                                    then None
                                                                    else 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then None
                                                                    else 
                                                                    if b40
                                                                    then 
                                                                    if b41
                                                                    then 
                                                                    if b42
                                                                    then 
                                                                    if b43
                                                                    then None
                                                                    else 
                                                                    if b44
                                                                    then None
                                                                    else 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    None
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then None
                                                                    else 
                                                                    if b48
                                                                    then None
                                                                    else 
                                                                    if b49
                                                                    then 
                                                                    if b50
                                                                    then None
                                                                    else 
                                                                    if b51
                                                                    then None
                                                                    else 
                                                                    if b52
                                                                    then None
                                                                    else 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    None
                                                                    | a6::s7 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b55 b56 b57 b58 b59 b60 b61 b62 ->
                                                                    if b55
                                                                    then 
                                                                    if b56
                                                                    then None
                                                                    else 
                                                                    if b57
                                                                    then None
                                                                    else 
                                                                    if b58
                                                                    then None
                                                                    else 
                                                                    if b59
                                                                    then None
                                                                    else 
                                                                    if b60
                                                                    then None
                                                                    else 
                                                                    if b61
                                                                    then 
                                                                    if b62
                                                                    then None
                                                                    else 
                                                                    (match s7 with
                                                                    | [] ->
                                                                    None
                                                                    | a7::s8 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b63 b64 b65 b66 b67 b68 b69 b70 ->
                                                                    if b63
                                                                    then None
                                                                    else 
                                                                    if b64
                                                                    then None
                                                                    else 
                                                                    if b65
                                                                    then 
                                                                    if b66
                                                                    then None
                                                                    else 
                                                                    if b67
                                                                    then 
                                                                    if b68
                                                                    then None
                                                                    else 
                                                                    if b69
                                                                    then 
                                                                    if b70
                                                                    then None
                                                                    else 
                                                                    (match s8 with
                                                                    | [] ->
                                                                    None
                                                                    | a8::s9 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b71 b72 b73 b74 b75 b76 b77 b78 ->
                                                                    if b71
                                                                    then 
                                                                    if b72
                                                                    then None
                                                                    else 
                                                                    if b73
                                                                    then None
                                                                    else 
                                                                    if b74
                                                                    then None
                                                                    else 
                                                                    if b75
                                                                    then None
                                                                    else 
                                                                    if b76
                                                                    then None
                                                                    else 
                                                                    if b77
                                                                    then 
                                                                    if b78
                                                                    then None
                                                                    else 
                                                                    (match s9 with
                                                                    | [] ->
                                                                    None
                                                                    | a9::s10 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b79 b80 b81 b82 b83 b84 b85 b86 ->
                                                                    if b79
                                                                    then 
                                                                    if b80
                                                                    then 
                                                                    if b81
                                                                    then None
                                                                    else 
                                                                    if b82
                                                                    then None
                                                                    else 
                                                                    if b83
                                                                    then 
                                                                    if b84
                                                                    then None
                                                                    else 
                                                                    if b85
                                                                    then 
                                                                    if b86
                                                                    then None
                                                                    else 
                                                                    (match s10 with
                                                                    | [] ->
                                                                    None
                                                                    | a10::s11 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b87 b88 b89 b90 b91 b92 b93 b94 ->
                                                                    if b87
                                                                    then 
                                                                    if b88
                                                                    then None
                                                                    else 
                                                                    if b89
                                                                    then None
                                                                    else 
                                                                    if b90
                                                                    then 
                                                                    if b91
                                                                    then None
                                                                    else 
                                                                    if b92
                                                                    then None
                                                                    else 
                                                                    if b93
                                                                    then 
                                                                    if b94
                                                                    then None
                                                                    else 
                                                                    (match s11 with
                                                                    | [] ->
                                                                    None
                                                                    | a11::s12 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b95 b96 b97 b98 b99 b100 b101 b102 ->
                                                                    if b95
                                                                    then None
                                                                    else 
                                                                    if b96
                                                                    then 
                                                                    if b97
                                                                    then None
                                                                    else 
                                                                    if b98
                                                                    then 
                                                                    if b99
                                                                    then 
                                                                    if b100
                                                                    then None
                                                                    else 
                                                                    if b101
                                                                    then 
                                                                    if b102
                                                                    then None
                                                                    else 
                                                                    (match s12 with
                                                                    | [] ->
                                                                    None
                                                                    | a12::s13 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b103 b104 b105 b106 b107 b108 b109 b110 ->
                                                                    if b103
                                                                    then 
                                                                    if b104
                                                                    then None
                                                                    else 
                                                                    if b105
                                                                    then 
                                                                    if b106
                                                                    then None
                                                                    else 
                                                                    if b107
                                                                    then None
                                                                    else 
                                                                    if b108
                                                                    then None
                                                                    else 
                                                                    if b109
                                                                    then 
                                                                    if b110
                                                                    then None
                                                                    else 
                                                                    (match s13 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.RETURNDATASIZE)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a12)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a11)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a10)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a9)
                                                                    else None
                                                                    else None)
                                                                    a8)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a7)
                                                                    else None
                                                                    else None)
                                                                    a6)
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                  else None
                                                           else None)
                                                           a0)
                                            else None
                                  else if b4
                                       then None
                                       else if b5
                                            then if b6
                                                 then None
                                                 else (match s0 with
                                                       | [] -> None
                                                       | a0::s1 ->
                                                         (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                           (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                           if b7
                                                           then if b8
                                                                then None
                                                                else 
                                                                  if b9
                                                                  then None
                                                                  else 
                                                                    if b10
                                                                    then 
                                                                    if b11
                                                                    then 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then None
                                                                    else 
                                                                    if b16
                                                                    then None
                                                                    else 
                                                                    if b17
                                                                    then 
                                                                    if b18
                                                                    then None
                                                                    else 
                                                                    if b19
                                                                    then 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then 
                                                                    if b24
                                                                    then None
                                                                    else 
                                                                    if b25
                                                                    then 
                                                                    if b26
                                                                    then None
                                                                    else 
                                                                    if b27
                                                                    then None
                                                                    else 
                                                                    if b28
                                                                    then None
                                                                    else 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.BYTE)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None
                                                                    else 
                                                                    if b11
                                                                    then None
                                                                    else 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then 
                                                                    if b16
                                                                    then 
                                                                    if b17
                                                                    then None
                                                                    else 
                                                                    if b18
                                                                    then None
                                                                    else 
                                                                    if b19
                                                                    then 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then 
                                                                    if b24
                                                                    then None
                                                                    else 
                                                                    if b25
                                                                    then 
                                                                    if b26
                                                                    then None
                                                                    else 
                                                                    if b27
                                                                    then None
                                                                    else 
                                                                    if b28
                                                                    then None
                                                                    else 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then None
                                                                    else 
                                                                    if b32
                                                                    then 
                                                                    if b33
                                                                    then 
                                                                    if b34
                                                                    then None
                                                                    else 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then None
                                                                    else 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then 
                                                                    if b40
                                                                    then None
                                                                    else 
                                                                    if b41
                                                                    then 
                                                                    if b42
                                                                    then None
                                                                    else 
                                                                    if b43
                                                                    then None
                                                                    else 
                                                                    if b44
                                                                    then None
                                                                    else 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    None
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then 
                                                                    if b48
                                                                    then None
                                                                    else 
                                                                    if b49
                                                                    then 
                                                                    if b50
                                                                    then None
                                                                    else 
                                                                    if b51
                                                                    then None
                                                                    else 
                                                                    if b52
                                                                    then None
                                                                    else 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.BASEFEE)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else 
                                                                    if b16
                                                                    then None
                                                                    else 
                                                                    if b17
                                                                    then 
                                                                    if b18
                                                                    then 
                                                                    if b19
                                                                    then None
                                                                    else 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then 
                                                                    if b24
                                                                    then None
                                                                    else 
                                                                    if b25
                                                                    then None
                                                                    else 
                                                                    if b26
                                                                    then None
                                                                    else 
                                                                    if b27
                                                                    then None
                                                                    else 
                                                                    if b28
                                                                    then None
                                                                    else 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then None
                                                                    else 
                                                                    if b32
                                                                    then 
                                                                    if b33
                                                                    then 
                                                                    if b34
                                                                    then 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then None
                                                                    else 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then 
                                                                    if b40
                                                                    then 
                                                                    if b41
                                                                    then None
                                                                    else 
                                                                    if b42
                                                                    then None
                                                                    else 
                                                                    if b43
                                                                    then None
                                                                    else 
                                                                    if b44
                                                                    then None
                                                                    else 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    None
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then 
                                                                    if b48
                                                                    then None
                                                                    else 
                                                                    if b49
                                                                    then 
                                                                    if b50
                                                                    then None
                                                                    else 
                                                                    if b51
                                                                    then None
                                                                    else 
                                                                    if b52
                                                                    then None
                                                                    else 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.BALANCE)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                           else if b8
                                                                then None
                                                                else 
                                                                  if b9
                                                                  then 
                                                                    if b10
                                                                    then 
                                                                    if b11
                                                                    then None
                                                                    else 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then 
                                                                    if b16
                                                                    then 
                                                                    if b17
                                                                    then 
                                                                    if b18
                                                                    then 
                                                                    if b19
                                                                    then None
                                                                    else 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then 
                                                                    if b24
                                                                    then 
                                                                    if b25
                                                                    then None
                                                                    else 
                                                                    if b26
                                                                    then None
                                                                    else 
                                                                    if b27
                                                                    then None
                                                                    else 
                                                                    if b28
                                                                    then None
                                                                    else 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then 
                                                                    if b32
                                                                    then 
                                                                    if b33
                                                                    then None
                                                                    else 
                                                                    if b34
                                                                    then 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then None
                                                                    else 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then None
                                                                    else 
                                                                    if b40
                                                                    then None
                                                                    else 
                                                                    if b41
                                                                    then None
                                                                    else 
                                                                    if b42
                                                                    then 
                                                                    if b43
                                                                    then None
                                                                    else 
                                                                    if b44
                                                                    then None
                                                                    else 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    None
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then 
                                                                    if b48
                                                                    then None
                                                                    else 
                                                                    if b49
                                                                    then None
                                                                    else 
                                                                    if b50
                                                                    then None
                                                                    else 
                                                                    if b51
                                                                    then None
                                                                    else 
                                                                    if b52
                                                                    then None
                                                                    else 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    None
                                                                    | a6::s7 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b55 b56 b57 b58 b59 b60 b61 b62 ->
                                                                    if b55
                                                                    then 
                                                                    if b56
                                                                    then 
                                                                    if b57
                                                                    then None
                                                                    else 
                                                                    if b58
                                                                    then None
                                                                    else 
                                                                    if b59
                                                                    then 
                                                                    if b60
                                                                    then None
                                                                    else 
                                                                    if b61
                                                                    then 
                                                                    if b62
                                                                    then None
                                                                    else 
                                                                    (match s7 with
                                                                    | [] ->
                                                                    None
                                                                    | a7::s8 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b63 b64 b65 b66 b67 b68 b69 b70 ->
                                                                    if b63
                                                                    then None
                                                                    else 
                                                                    if b64
                                                                    then None
                                                                    else 
                                                                    if b65
                                                                    then None
                                                                    else 
                                                                    if b66
                                                                    then 
                                                                    if b67
                                                                    then None
                                                                    else 
                                                                    if b68
                                                                    then None
                                                                    else 
                                                                    if b69
                                                                    then 
                                                                    if b70
                                                                    then None
                                                                    else 
                                                                    (match s8 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.BLOCKHASH)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None)
                                                                    a7)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a6)
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None
                                                                  else None)
                                                           a0)
                                            else None
                   else if b1
                        then if b2
                             then if b3
                                  then None
                                  else if b4
                                       then None
                                       else if b5
                                            then if b6
                                                 then None
                                                 else (match s0 with
                                                       | [] -> None
                                                       | a0::s1 ->
                                                         (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                           (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                           if b7
                                                           then None
                                                           else if b8
                                                                then None
                                                                else 
                                                                  if b9
                                                                  then 
                                                                    if b10
                                                                    then None
                                                                    else 
                                                                    if b11
                                                                    then 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.LT)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                  else None)
                                                           a0)
                                            else None
                             else if b3
                                  then if b4
                                       then None
                                       else if b5
                                            then if b6
                                                 then None
                                                 else (match s0 with
                                                       | [] -> None
                                                       | a0::s1 ->
                                                         (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                           (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                           if b7
                                                           then if b8
                                                                then None
                                                                else 
                                                                  if b9
                                                                  then None
                                                                  else 
                                                                    if b10
                                                                    then 
                                                                    if b11
                                                                    then None
                                                                    else 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then 
                                                                    if b16
                                                                    then None
                                                                    else 
                                                                    if b17
                                                                    then 
                                                                    if b18
                                                                    then 
                                                                    if b19
                                                                    then None
                                                                    else 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then 
                                                                    if b24
                                                                    then None
                                                                    else 
                                                                    if b25
                                                                    then 
                                                                    if b26
                                                                    then None
                                                                    else 
                                                                    if b27
                                                                    then None
                                                                    else 
                                                                    if b28
                                                                    then None
                                                                    else 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then 
                                                                    if b32
                                                                    then 
                                                                    if b33
                                                                    then None
                                                                    else 
                                                                    if b34
                                                                    then None
                                                                    else 
                                                                    if b35
                                                                    then 
                                                                    if b36
                                                                    then None
                                                                    else 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then None
                                                                    else 
                                                                    if b40
                                                                    then None
                                                                    else 
                                                                    if b41
                                                                    then 
                                                                    if b42
                                                                    then None
                                                                    else 
                                                                    if b43
                                                                    then 
                                                                    if b44
                                                                    then None
                                                                    else 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    None
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then 
                                                                    if b48
                                                                    then None
                                                                    else 
                                                                    if b49
                                                                    then None
                                                                    else 
                                                                    if b50
                                                                    then None
                                                                    else 
                                                                    if b51
                                                                    then None
                                                                    else 
                                                                    if b52
                                                                    then None
                                                                    else 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    None
                                                                    | a6::s7 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b55 b56 b57 b58 b59 b60 b61 b62 ->
                                                                    if b55
                                                                    then 
                                                                    if b56
                                                                    then None
                                                                    else 
                                                                    if b57
                                                                    then 
                                                                    if b58
                                                                    then 
                                                                    if b59
                                                                    then None
                                                                    else 
                                                                    if b60
                                                                    then None
                                                                    else 
                                                                    if b61
                                                                    then 
                                                                    if b62
                                                                    then None
                                                                    else 
                                                                    (match s7 with
                                                                    | [] ->
                                                                    None
                                                                    | a7::s8 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b63 b64 b65 b66 b67 b68 b69 b70 ->
                                                                    if b63
                                                                    then None
                                                                    else 
                                                                    if b64
                                                                    then None
                                                                    else 
                                                                    if b65
                                                                    then None
                                                                    else 
                                                                    if b66
                                                                    then None
                                                                    else 
                                                                    if b67
                                                                    then 
                                                                    if b68
                                                                    then None
                                                                    else 
                                                                    if b69
                                                                    then 
                                                                    if b70
                                                                    then None
                                                                    else 
                                                                    (match s8 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.TIMESTAMP)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None)
                                                                    a7)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a6)
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None
                                                           else None)
                                                           a0)
                                            else None
                                  else if b4
                                       then None
                                       else if b5
                                            then if b6
                                                 then None
                                                 else (match s0 with
                                                       | [] -> None
                                                       | a0::s1 ->
                                                         (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                           (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                           if b7
                                                           then if b8
                                                                then None
                                                                else 
                                                                  if b9
                                                                  then None
                                                                  else 
                                                                    if b10
                                                                    then 
                                                                    if b11
                                                                    then None
                                                                    else 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then None
                                                                    else 
                                                                    if b16
                                                                    then 
                                                                    if b17
                                                                    then 
                                                                    if b18
                                                                    then None
                                                                    else 
                                                                    if b19
                                                                    then 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.DIV)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then None
                                                                    else 
                                                                    if b24
                                                                    then 
                                                                    if b25
                                                                    then 
                                                                    if b26
                                                                    then None
                                                                    else 
                                                                    if b27
                                                                    then None
                                                                    else 
                                                                    if b28
                                                                    then None
                                                                    else 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then 
                                                                    if b32
                                                                    then None
                                                                    else 
                                                                    if b33
                                                                    then None
                                                                    else 
                                                                    if b34
                                                                    then 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then None
                                                                    else 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then 
                                                                    if b40
                                                                    then 
                                                                    if b41
                                                                    then None
                                                                    else 
                                                                    if b42
                                                                    then None
                                                                    else 
                                                                    if b43
                                                                    then None
                                                                    else 
                                                                    if b44
                                                                    then None
                                                                    else 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    None
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then 
                                                                    if b48
                                                                    then None
                                                                    else 
                                                                    if b49
                                                                    then 
                                                                    if b50
                                                                    then None
                                                                    else 
                                                                    if b51
                                                                    then 
                                                                    if b52
                                                                    then None
                                                                    else 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    None
                                                                    | a6::s7 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b55 b56 b57 b58 b59 b60 b61 b62 ->
                                                                    if b55
                                                                    then None
                                                                    else 
                                                                    if b56
                                                                    then None
                                                                    else 
                                                                    if b57
                                                                    then 
                                                                    if b58
                                                                    then 
                                                                    if b59
                                                                    then None
                                                                    else 
                                                                    if b60
                                                                    then None
                                                                    else 
                                                                    if b61
                                                                    then 
                                                                    if b62
                                                                    then None
                                                                    else 
                                                                    (match s7 with
                                                                    | [] ->
                                                                    None
                                                                    | a7::s8 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b63 b64 b65 b66 b67 b68 b69 b70 ->
                                                                    if b63
                                                                    then None
                                                                    else 
                                                                    if b64
                                                                    then None
                                                                    else 
                                                                    if b65
                                                                    then 
                                                                    if b66
                                                                    then None
                                                                    else 
                                                                    if b67
                                                                    then 
                                                                    if b68
                                                                    then None
                                                                    else 
                                                                    if b69
                                                                    then 
                                                                    if b70
                                                                    then None
                                                                    else 
                                                                    (match s8 with
                                                                    | [] ->
                                                                    None
                                                                    | a8::s9 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b71 b72 b73 b74 b75 b76 b77 b78 ->
                                                                    if b71
                                                                    then 
                                                                    if b72
                                                                    then None
                                                                    else 
                                                                    if b73
                                                                    then None
                                                                    else 
                                                                    if b74
                                                                    then 
                                                                    if b75
                                                                    then 
                                                                    if b76
                                                                    then None
                                                                    else 
                                                                    if b77
                                                                    then 
                                                                    if b78
                                                                    then None
                                                                    else 
                                                                    (match s9 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.DIFFICULTY)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a8)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a7)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a6)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None
                                                           else None)
                                                           a0)
                                            else None
                        else if b2
                             then if b3
                                  then if b4
                                       then None
                                       else if b5
                                            then if b6
                                                 then None
                                                 else (match s0 with
                                                       | [] -> None
                                                       | a0::s1 ->
                                                         (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                           (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                           if b7
                                                           then if b8
                                                                then 
                                                                  if b9
                                                                  then 
                                                                    if b10
                                                                    then 
                                                                    if b11
                                                                    then None
                                                                    else 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then None
                                                                    else 
                                                                    if b16
                                                                    then 
                                                                    if b17
                                                                    then None
                                                                    else 
                                                                    if b18
                                                                    then None
                                                                    else 
                                                                    if b19
                                                                    then 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    Some
                                                                    (Program.OpInstr
                                                                    Program.XOR)
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None
                                                                  else None
                                                                else None
                                                           else None)
                                                           a0)
                                            else None
                                  else None
                             else if b3
                                  then if b4
                                       then None
                                       else if b5
                                            then if b6
                                                 then None
                                                 else (match s0 with
                                                       | [] -> None
                                                       | a0::s1 ->
                                                         (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                           (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                           if b7
                                                           then if b8
                                                                then 
                                                                  if b9
                                                                  then 
                                                                    if b10
                                                                    then 
                                                                    if b11
                                                                    then None
                                                                    else 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then None
                                                                    else 
                                                                    if b16
                                                                    then None
                                                                    else 
                                                                    if b17
                                                                    then None
                                                                    else 
                                                                    if b18
                                                                    then None
                                                                    else 
                                                                    if b19
                                                                    then 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    Some
                                                                    Program.POP
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None
                                                                  else None
                                                                else None
                                                           else None)
                                                           a0)
                                            else None
                                  else None)
              a))

  (** val parse_block' : char list list -> Program.block option **)

  let rec parse_block' = function
  | [] -> Some []
  | x::xs ->
    (match is_push x with
     | Some n0 ->
       (match xs with
        | [] -> None
        | y::ys ->
          (match parseHexNumber y with
           | Some v ->
             (match parse_block' ys with
              | Some bs -> Some ((Program.PUSH (n0, v))::bs)
              | None -> None)
           | None -> None))
     | None ->
       if is_metapush x
       then (match xs with
             | [] -> None
             | z::l0 ->
               (match l0 with
                | [] -> None
                | y::ys ->
                  (match parseHexNumber y with
                   | Some v ->
                     (match parseDecNumber z with
                      | Some cat ->
                        (match parse_block' ys with
                         | Some bs ->
                           Some ((Program.METAPUSH ((N.of_nat cat), v))::bs)
                         | None -> None)
                      | None -> None)
                   | None -> None)))
       else (match parse_non_push_instr x with
             | Some i ->
               (match parse_block' xs with
                | Some bs -> Some (i::bs)
                | None -> None)
             | None -> None))

  (** val parse_block : char list -> Program.block option **)

  let parse_block block_str =
    parse_block' (tokenize block_str)

  (** val str_to_opt :
      char list -> BlockEquivChecker.available_optimization_step option **)

  let str_to_opt = function
  | [] -> None
  | a::s0 ->
    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
      (fun b b0 b1 b2 b3 b4 b5 b6 ->
      if b
      then if b0
           then if b1
                then if b2
                     then if b3
                          then None
                          else if b4
                               then None
                               else if b5
                                    then if b6
                                         then None
                                         else (match s0 with
                                               | [] -> None
                                               | a0::s1 ->
                                                 (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                   (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                   if b7
                                                   then None
                                                   else if b8
                                                        then None
                                                        else if b9
                                                             then None
                                                             else if b10
                                                                  then None
                                                                  else 
                                                                    if b11
                                                                    then 
                                                                    if b12
                                                                    then None
                                                                    else 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then None
                                                                    else 
                                                                    if b16
                                                                    then None
                                                                    else 
                                                                    if b17
                                                                    then 
                                                                    if b18
                                                                    then None
                                                                    else 
                                                                    if b19
                                                                    then 
                                                                    if b20
                                                                    then None
                                                                    else 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then 
                                                                    if b24
                                                                    then 
                                                                    if b25
                                                                    then 
                                                                    if b26
                                                                    then 
                                                                    if b27
                                                                    then 
                                                                    if b28
                                                                    then None
                                                                    else 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then 
                                                                    if b32
                                                                    then 
                                                                    if b33
                                                                    then 
                                                                    if b34
                                                                    then None
                                                                    else 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then None
                                                                    else 
                                                                    if b40
                                                                    then None
                                                                    else 
                                                                    if b41
                                                                    then 
                                                                    if b42
                                                                    then None
                                                                    else 
                                                                    if b43
                                                                    then 
                                                                    if b44
                                                                    then 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    None
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then 
                                                                    if b48
                                                                    then 
                                                                    if b49
                                                                    then 
                                                                    if b50
                                                                    then 
                                                                    if b51
                                                                    then 
                                                                    if b52
                                                                    then None
                                                                    else 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    None
                                                                    | a6::s7 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b55 b56 b57 b58 b59 b60 b61 b62 ->
                                                                    if b55
                                                                    then 
                                                                    if b56
                                                                    then 
                                                                    if b57
                                                                    then 
                                                                    if b58
                                                                    then 
                                                                    if b59
                                                                    then None
                                                                    else 
                                                                    if b60
                                                                    then 
                                                                    if b61
                                                                    then 
                                                                    if b62
                                                                    then None
                                                                    else 
                                                                    (match s7 with
                                                                    | [] ->
                                                                    None
                                                                    | a7::s8 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b63 b64 b65 b66 b67 b68 b69 b70 ->
                                                                    if b63
                                                                    then None
                                                                    else 
                                                                    if b64
                                                                    then 
                                                                    if b65
                                                                    then 
                                                                    if b66
                                                                    then 
                                                                    if b67
                                                                    then None
                                                                    else 
                                                                    if b68
                                                                    then 
                                                                    if b69
                                                                    then 
                                                                    if b70
                                                                    then None
                                                                    else 
                                                                    (match s8 with
                                                                    | [] ->
                                                                    None
                                                                    | a8::s9 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b71 b72 b73 b74 b75 b76 b77 b78 ->
                                                                    if b71
                                                                    then 
                                                                    if b72
                                                                    then None
                                                                    else 
                                                                    if b73
                                                                    then 
                                                                    if b74
                                                                    then None
                                                                    else 
                                                                    if b75
                                                                    then None
                                                                    else 
                                                                    if b76
                                                                    then 
                                                                    if b77
                                                                    then 
                                                                    if b78
                                                                    then None
                                                                    else 
                                                                    (match s9 with
                                                                    | [] ->
                                                                    None
                                                                    | a9::s10 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b79 b80 b81 b82 b83 b84 b85 b86 ->
                                                                    if b79
                                                                    then 
                                                                    if b80
                                                                    then 
                                                                    if b81
                                                                    then 
                                                                    if b82
                                                                    then 
                                                                    if b83
                                                                    then 
                                                                    if b84
                                                                    then None
                                                                    else 
                                                                    if b85
                                                                    then 
                                                                    if b86
                                                                    then None
                                                                    else 
                                                                    (match s10 with
                                                                    | [] ->
                                                                    None
                                                                    | a10::s11 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b87 b88 b89 b90 b91 b92 b93 b94 ->
                                                                    if b87
                                                                    then None
                                                                    else 
                                                                    if b88
                                                                    then None
                                                                    else 
                                                                    if b89
                                                                    then None
                                                                    else 
                                                                    if b90
                                                                    then 
                                                                    if b91
                                                                    then 
                                                                    if b92
                                                                    then 
                                                                    if b93
                                                                    then 
                                                                    if b94
                                                                    then None
                                                                    else 
                                                                    (match s11 with
                                                                    | [] ->
                                                                    Some
                                                                    BlockEquivChecker.OPT_gt_one_x
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a10)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a9)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a8)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a7)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a6)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else 
                                                                    if b34
                                                                    then None
                                                                    else 
                                                                    if b35
                                                                    then 
                                                                    if b36
                                                                    then 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then 
                                                                    if b40
                                                                    then None
                                                                    else 
                                                                    if b41
                                                                    then 
                                                                    if b42
                                                                    then None
                                                                    else 
                                                                    if b43
                                                                    then 
                                                                    if b44
                                                                    then 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    None
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then None
                                                                    else 
                                                                    if b48
                                                                    then 
                                                                    if b49
                                                                    then None
                                                                    else 
                                                                    if b50
                                                                    then None
                                                                    else 
                                                                    if b51
                                                                    then None
                                                                    else 
                                                                    if b52
                                                                    then 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    None
                                                                    | a6::s7 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b55 b56 b57 b58 b59 b60 b61 b62 ->
                                                                    if b55
                                                                    then 
                                                                    if b56
                                                                    then 
                                                                    if b57
                                                                    then 
                                                                    if b58
                                                                    then 
                                                                    if b59
                                                                    then 
                                                                    if b60
                                                                    then None
                                                                    else 
                                                                    if b61
                                                                    then 
                                                                    if b62
                                                                    then None
                                                                    else 
                                                                    (match s7 with
                                                                    | [] ->
                                                                    None
                                                                    | a7::s8 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b63 b64 b65 b66 b67 b68 b69 b70 ->
                                                                    if b63
                                                                    then None
                                                                    else 
                                                                    if b64
                                                                    then None
                                                                    else 
                                                                    if b65
                                                                    then None
                                                                    else 
                                                                    if b66
                                                                    then 
                                                                    if b67
                                                                    then 
                                                                    if b68
                                                                    then 
                                                                    if b69
                                                                    then 
                                                                    if b70
                                                                    then None
                                                                    else 
                                                                    (match s8 with
                                                                    | [] ->
                                                                    None
                                                                    | a8::s9 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b71 b72 b73 b74 b75 b76 b77 b78 ->
                                                                    if b71
                                                                    then 
                                                                    if b72
                                                                    then 
                                                                    if b73
                                                                    then 
                                                                    if b74
                                                                    then 
                                                                    if b75
                                                                    then 
                                                                    if b76
                                                                    then None
                                                                    else 
                                                                    if b77
                                                                    then 
                                                                    if b78
                                                                    then None
                                                                    else 
                                                                    (match s9 with
                                                                    | [] ->
                                                                    None
                                                                    | a9::s10 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b79 b80 b81 b82 b83 b84 b85 b86 ->
                                                                    if b79
                                                                    then None
                                                                    else 
                                                                    if b80
                                                                    then None
                                                                    else 
                                                                    if b81
                                                                    then None
                                                                    else 
                                                                    if b82
                                                                    then 
                                                                    if b83
                                                                    then 
                                                                    if b84
                                                                    then 
                                                                    if b85
                                                                    then 
                                                                    if b86
                                                                    then None
                                                                    else 
                                                                    (match s10 with
                                                                    | [] ->
                                                                    Some
                                                                    BlockEquivChecker.OPT_sub_x_x
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a9)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a8)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a7)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a6)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else 
                                                                    if b40
                                                                    then None
                                                                    else 
                                                                    if b41
                                                                    then None
                                                                    else 
                                                                    if b42
                                                                    then 
                                                                    if b43
                                                                    then None
                                                                    else 
                                                                    if b44
                                                                    then 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    None
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then None
                                                                    else 
                                                                    if b48
                                                                    then 
                                                                    if b49
                                                                    then None
                                                                    else 
                                                                    if b50
                                                                    then None
                                                                    else 
                                                                    if b51
                                                                    then 
                                                                    if b52
                                                                    then 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    None
                                                                    | a6::s7 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b55 b56 b57 b58 b59 b60 b61 b62 ->
                                                                    if b55
                                                                    then 
                                                                    if b56
                                                                    then 
                                                                    if b57
                                                                    then 
                                                                    if b58
                                                                    then 
                                                                    if b59
                                                                    then 
                                                                    if b60
                                                                    then None
                                                                    else 
                                                                    if b61
                                                                    then 
                                                                    if b62
                                                                    then None
                                                                    else 
                                                                    (match s7 with
                                                                    | [] ->
                                                                    None
                                                                    | a7::s8 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b63 b64 b65 b66 b67 b68 b69 b70 ->
                                                                    if b63
                                                                    then None
                                                                    else 
                                                                    if b64
                                                                    then 
                                                                    if b65
                                                                    then None
                                                                    else 
                                                                    if b66
                                                                    then 
                                                                    if b67
                                                                    then 
                                                                    if b68
                                                                    then 
                                                                    if b69
                                                                    then 
                                                                    if b70
                                                                    then None
                                                                    else 
                                                                    (match s8 with
                                                                    | [] ->
                                                                    None
                                                                    | a8::s9 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b71 b72 b73 b74 b75 b76 b77 b78 ->
                                                                    if b71
                                                                    then 
                                                                    if b72
                                                                    then None
                                                                    else 
                                                                    if b73
                                                                    then 
                                                                    if b74
                                                                    then None
                                                                    else 
                                                                    if b75
                                                                    then None
                                                                    else 
                                                                    if b76
                                                                    then 
                                                                    if b77
                                                                    then 
                                                                    if b78
                                                                    then None
                                                                    else 
                                                                    (match s9 with
                                                                    | [] ->
                                                                    None
                                                                    | a9::s10 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b79 b80 b81 b82 b83 b84 b85 b86 ->
                                                                    if b79
                                                                    then None
                                                                    else 
                                                                    if b80
                                                                    then 
                                                                    if b81
                                                                    then None
                                                                    else 
                                                                    if b82
                                                                    then None
                                                                    else 
                                                                    if b83
                                                                    then 
                                                                    if b84
                                                                    then 
                                                                    if b85
                                                                    then 
                                                                    if b86
                                                                    then None
                                                                    else 
                                                                    (match s10 with
                                                                    | [] ->
                                                                    None
                                                                    | a10::s11 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b87 b88 b89 b90 b91 b92 b93 b94 ->
                                                                    if b87
                                                                    then 
                                                                    if b88
                                                                    then 
                                                                    if b89
                                                                    then 
                                                                    if b90
                                                                    then 
                                                                    if b91
                                                                    then None
                                                                    else 
                                                                    if b92
                                                                    then 
                                                                    if b93
                                                                    then 
                                                                    if b94
                                                                    then None
                                                                    else 
                                                                    (match s11 with
                                                                    | [] ->
                                                                    None
                                                                    | a11::s12 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b95 b96 b97 b98 b99 b100 b101 b102 ->
                                                                    if b95
                                                                    then 
                                                                    if b96
                                                                    then 
                                                                    if b97
                                                                    then 
                                                                    if b98
                                                                    then 
                                                                    if b99
                                                                    then 
                                                                    if b100
                                                                    then None
                                                                    else 
                                                                    if b101
                                                                    then 
                                                                    if b102
                                                                    then None
                                                                    else 
                                                                    (match s12 with
                                                                    | [] ->
                                                                    None
                                                                    | a12::s13 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b103 b104 b105 b106 b107 b108 b109 b110 ->
                                                                    if b103
                                                                    then None
                                                                    else 
                                                                    if b104
                                                                    then None
                                                                    else 
                                                                    if b105
                                                                    then None
                                                                    else 
                                                                    if b106
                                                                    then 
                                                                    if b107
                                                                    then 
                                                                    if b108
                                                                    then 
                                                                    if b109
                                                                    then 
                                                                    if b110
                                                                    then None
                                                                    else 
                                                                    (match s13 with
                                                                    | [] ->
                                                                    Some
                                                                    BlockEquivChecker.OPT_shr_zero_x
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a12)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a11)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a10)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a9)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a8)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else 
                                                                    if b65
                                                                    then None
                                                                    else 
                                                                    if b66
                                                                    then 
                                                                    if b67
                                                                    then 
                                                                    if b68
                                                                    then 
                                                                    if b69
                                                                    then 
                                                                    if b70
                                                                    then None
                                                                    else 
                                                                    (match s8 with
                                                                    | [] ->
                                                                    None
                                                                    | a8::s9 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b71 b72 b73 b74 b75 b76 b77 b78 ->
                                                                    if b71
                                                                    then 
                                                                    if b72
                                                                    then 
                                                                    if b73
                                                                    then 
                                                                    if b74
                                                                    then 
                                                                    if b75
                                                                    then 
                                                                    if b76
                                                                    then None
                                                                    else 
                                                                    if b77
                                                                    then 
                                                                    if b78
                                                                    then None
                                                                    else 
                                                                    (match s9 with
                                                                    | [] ->
                                                                    None
                                                                    | a9::s10 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b79 b80 b81 b82 b83 b84 b85 b86 ->
                                                                    if b79
                                                                    then None
                                                                    else 
                                                                    if b80
                                                                    then 
                                                                    if b81
                                                                    then None
                                                                    else 
                                                                    if b82
                                                                    then 
                                                                    if b83
                                                                    then 
                                                                    if b84
                                                                    then 
                                                                    if b85
                                                                    then 
                                                                    if b86
                                                                    then None
                                                                    else 
                                                                    (match s10 with
                                                                    | [] ->
                                                                    None
                                                                    | a10::s11 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b87 b88 b89 b90 b91 b92 b93 b94 ->
                                                                    if b87
                                                                    then 
                                                                    if b88
                                                                    then None
                                                                    else 
                                                                    if b89
                                                                    then 
                                                                    if b90
                                                                    then None
                                                                    else 
                                                                    if b91
                                                                    then None
                                                                    else 
                                                                    if b92
                                                                    then 
                                                                    if b93
                                                                    then 
                                                                    if b94
                                                                    then None
                                                                    else 
                                                                    (match s11 with
                                                                    | [] ->
                                                                    None
                                                                    | a11::s12 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b95 b96 b97 b98 b99 b100 b101 b102 ->
                                                                    if b95
                                                                    then None
                                                                    else 
                                                                    if b96
                                                                    then 
                                                                    if b97
                                                                    then None
                                                                    else 
                                                                    if b98
                                                                    then None
                                                                    else 
                                                                    if b99
                                                                    then 
                                                                    if b100
                                                                    then 
                                                                    if b101
                                                                    then 
                                                                    if b102
                                                                    then None
                                                                    else 
                                                                    (match s12 with
                                                                    | [] ->
                                                                    None
                                                                    | a12::s13 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b103 b104 b105 b106 b107 b108 b109 b110 ->
                                                                    if b103
                                                                    then 
                                                                    if b104
                                                                    then 
                                                                    if b105
                                                                    then 
                                                                    if b106
                                                                    then 
                                                                    if b107
                                                                    then None
                                                                    else 
                                                                    if b108
                                                                    then 
                                                                    if b109
                                                                    then 
                                                                    if b110
                                                                    then None
                                                                    else 
                                                                    (match s13 with
                                                                    | [] ->
                                                                    Some
                                                                    BlockEquivChecker.OPT_shr_x_zero
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a12)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a11)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a10)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a9)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a8)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a7)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a6)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else 
                                                                    if b33
                                                                    then 
                                                                    if b34
                                                                    then 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then 
                                                                    if b40
                                                                    then None
                                                                    else 
                                                                    if b41
                                                                    then 
                                                                    if b42
                                                                    then None
                                                                    else 
                                                                    if b43
                                                                    then 
                                                                    if b44
                                                                    then 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    None
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then None
                                                                    else 
                                                                    if b48
                                                                    then None
                                                                    else 
                                                                    if b49
                                                                    then 
                                                                    if b50
                                                                    then 
                                                                    if b51
                                                                    then None
                                                                    else 
                                                                    if b52
                                                                    then 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    None
                                                                    | a6::s7 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b55 b56 b57 b58 b59 b60 b61 b62 ->
                                                                    if b55
                                                                    then 
                                                                    if b56
                                                                    then 
                                                                    if b57
                                                                    then 
                                                                    if b58
                                                                    then 
                                                                    if b59
                                                                    then 
                                                                    if b60
                                                                    then None
                                                                    else 
                                                                    if b61
                                                                    then 
                                                                    if b62
                                                                    then None
                                                                    else 
                                                                    (match s7 with
                                                                    | [] ->
                                                                    None
                                                                    | a7::s8 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b63 b64 b65 b66 b67 b68 b69 b70 ->
                                                                    if b63
                                                                    then 
                                                                    if b64
                                                                    then 
                                                                    if b65
                                                                    then 
                                                                    if b66
                                                                    then 
                                                                    if b67
                                                                    then None
                                                                    else 
                                                                    if b68
                                                                    then 
                                                                    if b69
                                                                    then 
                                                                    if b70
                                                                    then None
                                                                    else 
                                                                    (match s8 with
                                                                    | [] ->
                                                                    None
                                                                    | a8::s9 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b71 b72 b73 b74 b75 b76 b77 b78 ->
                                                                    if b71
                                                                    then None
                                                                    else 
                                                                    if b72
                                                                    then 
                                                                    if b73
                                                                    then 
                                                                    if b74
                                                                    then 
                                                                    if b75
                                                                    then None
                                                                    else 
                                                                    if b76
                                                                    then 
                                                                    if b77
                                                                    then 
                                                                    if b78
                                                                    then None
                                                                    else 
                                                                    (match s9 with
                                                                    | [] ->
                                                                    None
                                                                    | a9::s10 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b79 b80 b81 b82 b83 b84 b85 b86 ->
                                                                    if b79
                                                                    then 
                                                                    if b80
                                                                    then None
                                                                    else 
                                                                    if b81
                                                                    then 
                                                                    if b82
                                                                    then None
                                                                    else 
                                                                    if b83
                                                                    then None
                                                                    else 
                                                                    if b84
                                                                    then 
                                                                    if b85
                                                                    then 
                                                                    if b86
                                                                    then None
                                                                    else 
                                                                    (match s10 with
                                                                    | [] ->
                                                                    Some
                                                                    BlockEquivChecker.OPT_mul_one
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a9)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a8)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else 
                                                                    if b66
                                                                    then None
                                                                    else 
                                                                    if b67
                                                                    then 
                                                                    if b68
                                                                    then 
                                                                    if b69
                                                                    then 
                                                                    if b70
                                                                    then None
                                                                    else 
                                                                    (match s8 with
                                                                    | [] ->
                                                                    None
                                                                    | a8::s9 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b71 b72 b73 b74 b75 b76 b77 b78 ->
                                                                    if b71
                                                                    then None
                                                                    else 
                                                                    if b72
                                                                    then None
                                                                    else 
                                                                    if b73
                                                                    then None
                                                                    else 
                                                                    if b74
                                                                    then 
                                                                    if b75
                                                                    then None
                                                                    else 
                                                                    if b76
                                                                    then 
                                                                    if b77
                                                                    then 
                                                                    if b78
                                                                    then None
                                                                    else 
                                                                    (match s9 with
                                                                    | [] ->
                                                                    None
                                                                    | a9::s10 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b79 b80 b81 b82 b83 b84 b85 b86 ->
                                                                    if b79
                                                                    then None
                                                                    else 
                                                                    if b80
                                                                    then None
                                                                    else 
                                                                    if b81
                                                                    then 
                                                                    if b82
                                                                    then 
                                                                    if b83
                                                                    then None
                                                                    else 
                                                                    if b84
                                                                    then 
                                                                    if b85
                                                                    then 
                                                                    if b86
                                                                    then None
                                                                    else 
                                                                    (match s10 with
                                                                    | [] ->
                                                                    Some
                                                                    BlockEquivChecker.OPT_mul_shl
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a9)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a8)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a7)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a6)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then 
                                                                    if b40
                                                                    then None
                                                                    else 
                                                                    if b41
                                                                    then None
                                                                    else 
                                                                    if b42
                                                                    then None
                                                                    else 
                                                                    if b43
                                                                    then 
                                                                    if b44
                                                                    then 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    None
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then 
                                                                    if b48
                                                                    then 
                                                                    if b49
                                                                    then 
                                                                    if b50
                                                                    then 
                                                                    if b51
                                                                    then 
                                                                    if b52
                                                                    then None
                                                                    else 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    None
                                                                    | a6::s7 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b55 b56 b57 b58 b59 b60 b61 b62 ->
                                                                    if b55
                                                                    then 
                                                                    if b56
                                                                    then None
                                                                    else 
                                                                    if b57
                                                                    then None
                                                                    else 
                                                                    if b58
                                                                    then 
                                                                    if b59
                                                                    then None
                                                                    else 
                                                                    if b60
                                                                    then 
                                                                    if b61
                                                                    then 
                                                                    if b62
                                                                    then None
                                                                    else 
                                                                    (match s7 with
                                                                    | [] ->
                                                                    None
                                                                    | a7::s8 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b63 b64 b65 b66 b67 b68 b69 b70 ->
                                                                    if b63
                                                                    then 
                                                                    if b64
                                                                    then 
                                                                    if b65
                                                                    then None
                                                                    else 
                                                                    if b66
                                                                    then None
                                                                    else 
                                                                    if b67
                                                                    then 
                                                                    if b68
                                                                    then 
                                                                    if b69
                                                                    then 
                                                                    if b70
                                                                    then None
                                                                    else 
                                                                    (match s8 with
                                                                    | [] ->
                                                                    None
                                                                    | a8::s9 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b71 b72 b73 b74 b75 b76 b77 b78 ->
                                                                    if b71
                                                                    then None
                                                                    else 
                                                                    if b72
                                                                    then 
                                                                    if b73
                                                                    then None
                                                                    else 
                                                                    if b74
                                                                    then 
                                                                    if b75
                                                                    then 
                                                                    if b76
                                                                    then 
                                                                    if b77
                                                                    then 
                                                                    if b78
                                                                    then None
                                                                    else 
                                                                    (match s9 with
                                                                    | [] ->
                                                                    None
                                                                    | a9::s10 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b79 b80 b81 b82 b83 b84 b85 b86 ->
                                                                    if b79
                                                                    then 
                                                                    if b80
                                                                    then None
                                                                    else 
                                                                    if b81
                                                                    then 
                                                                    if b82
                                                                    then None
                                                                    else 
                                                                    if b83
                                                                    then None
                                                                    else 
                                                                    if b84
                                                                    then 
                                                                    if b85
                                                                    then 
                                                                    if b86
                                                                    then None
                                                                    else 
                                                                    (match s10 with
                                                                    | [] ->
                                                                    None
                                                                    | a10::s11 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b87 b88 b89 b90 b91 b92 b93 b94 ->
                                                                    if b87
                                                                    then None
                                                                    else 
                                                                    if b88
                                                                    then 
                                                                    if b89
                                                                    then None
                                                                    else 
                                                                    if b90
                                                                    then None
                                                                    else 
                                                                    if b91
                                                                    then 
                                                                    if b92
                                                                    then 
                                                                    if b93
                                                                    then 
                                                                    if b94
                                                                    then None
                                                                    else 
                                                                    (match s11 with
                                                                    | [] ->
                                                                    None
                                                                    | a11::s12 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b95 b96 b97 b98 b99 b100 b101 b102 ->
                                                                    if b95
                                                                    then 
                                                                    if b96
                                                                    then 
                                                                    if b97
                                                                    then 
                                                                    if b98
                                                                    then 
                                                                    if b99
                                                                    then None
                                                                    else 
                                                                    if b100
                                                                    then 
                                                                    if b101
                                                                    then 
                                                                    if b102
                                                                    then None
                                                                    else 
                                                                    (match s12 with
                                                                    | [] ->
                                                                    Some
                                                                    BlockEquivChecker.OPT_eq_iszero
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a11)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a10)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a9)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a8)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a7)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else 
                                                                    if b56
                                                                    then 
                                                                    if b57
                                                                    then None
                                                                    else 
                                                                    if b58
                                                                    then 
                                                                    if b59
                                                                    then 
                                                                    if b60
                                                                    then 
                                                                    if b61
                                                                    then 
                                                                    if b62
                                                                    then None
                                                                    else 
                                                                    (match s7 with
                                                                    | [] ->
                                                                    None
                                                                    | a7::s8 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b63 b64 b65 b66 b67 b68 b69 b70 ->
                                                                    if b63
                                                                    then 
                                                                    if b64
                                                                    then None
                                                                    else 
                                                                    if b65
                                                                    then 
                                                                    if b66
                                                                    then None
                                                                    else 
                                                                    if b67
                                                                    then None
                                                                    else 
                                                                    if b68
                                                                    then 
                                                                    if b69
                                                                    then 
                                                                    if b70
                                                                    then None
                                                                    else 
                                                                    (match s8 with
                                                                    | [] ->
                                                                    None
                                                                    | a8::s9 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b71 b72 b73 b74 b75 b76 b77 b78 ->
                                                                    if b71
                                                                    then None
                                                                    else 
                                                                    if b72
                                                                    then 
                                                                    if b73
                                                                    then None
                                                                    else 
                                                                    if b74
                                                                    then None
                                                                    else 
                                                                    if b75
                                                                    then 
                                                                    if b76
                                                                    then 
                                                                    if b77
                                                                    then 
                                                                    if b78
                                                                    then None
                                                                    else 
                                                                    (match s9 with
                                                                    | [] ->
                                                                    None
                                                                    | a9::s10 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b79 b80 b81 b82 b83 b84 b85 b86 ->
                                                                    if b79
                                                                    then 
                                                                    if b80
                                                                    then 
                                                                    if b81
                                                                    then 
                                                                    if b82
                                                                    then 
                                                                    if b83
                                                                    then None
                                                                    else 
                                                                    if b84
                                                                    then 
                                                                    if b85
                                                                    then 
                                                                    if b86
                                                                    then None
                                                                    else 
                                                                    (match s10 with
                                                                    | [] ->
                                                                    Some
                                                                    BlockEquivChecker.OPT_eq_zero
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a9)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a8)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a7)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a6)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else 
                                                                    if b40
                                                                    then 
                                                                    if b41
                                                                    then 
                                                                    if b42
                                                                    then None
                                                                    else 
                                                                    if b43
                                                                    then 
                                                                    if b44
                                                                    then 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    None
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then 
                                                                    if b48
                                                                    then None
                                                                    else 
                                                                    if b49
                                                                    then None
                                                                    else 
                                                                    if b50
                                                                    then None
                                                                    else 
                                                                    if b51
                                                                    then None
                                                                    else 
                                                                    if b52
                                                                    then 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    None
                                                                    | a6::s7 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b55 b56 b57 b58 b59 b60 b61 b62 ->
                                                                    if b55
                                                                    then None
                                                                    else 
                                                                    if b56
                                                                    then None
                                                                    else 
                                                                    if b57
                                                                    then 
                                                                    if b58
                                                                    then 
                                                                    if b59
                                                                    then None
                                                                    else 
                                                                    if b60
                                                                    then 
                                                                    if b61
                                                                    then 
                                                                    if b62
                                                                    then None
                                                                    else 
                                                                    (match s7 with
                                                                    | [] ->
                                                                    Some
                                                                    BlockEquivChecker.OPT_eval
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a6)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else 
                                                                    if b34
                                                                    then 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then 
                                                                    if b40
                                                                    then 
                                                                    if b41
                                                                    then None
                                                                    else 
                                                                    if b42
                                                                    then None
                                                                    else 
                                                                    if b43
                                                                    then 
                                                                    if b44
                                                                    then 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    None
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then None
                                                                    else 
                                                                    if b48
                                                                    then 
                                                                    if b49
                                                                    then None
                                                                    else 
                                                                    if b50
                                                                    then 
                                                                    if b51
                                                                    then 
                                                                    if b52
                                                                    then 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    None
                                                                    | a6::s7 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b55 b56 b57 b58 b59 b60 b61 b62 ->
                                                                    if b55
                                                                    then 
                                                                    if b56
                                                                    then None
                                                                    else 
                                                                    if b57
                                                                    then 
                                                                    if b58
                                                                    then None
                                                                    else 
                                                                    if b59
                                                                    then None
                                                                    else 
                                                                    if b60
                                                                    then 
                                                                    if b61
                                                                    then 
                                                                    if b62
                                                                    then None
                                                                    else 
                                                                    (match s7 with
                                                                    | [] ->
                                                                    None
                                                                    | a7::s8 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b63 b64 b65 b66 b67 b68 b69 b70 ->
                                                                    if b63
                                                                    then None
                                                                    else 
                                                                    if b64
                                                                    then 
                                                                    if b65
                                                                    then None
                                                                    else 
                                                                    if b66
                                                                    then None
                                                                    else 
                                                                    if b67
                                                                    then 
                                                                    if b68
                                                                    then 
                                                                    if b69
                                                                    then 
                                                                    if b70
                                                                    then None
                                                                    else 
                                                                    (match s8 with
                                                                    | [] ->
                                                                    None
                                                                    | a8::s9 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b71 b72 b73 b74 b75 b76 b77 b78 ->
                                                                    if b71
                                                                    then 
                                                                    if b72
                                                                    then 
                                                                    if b73
                                                                    then 
                                                                    if b74
                                                                    then 
                                                                    if b75
                                                                    then None
                                                                    else 
                                                                    if b76
                                                                    then 
                                                                    if b77
                                                                    then 
                                                                    if b78
                                                                    then None
                                                                    else 
                                                                    (match s9 with
                                                                    | [] ->
                                                                    None
                                                                    | a9::s10 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b79 b80 b81 b82 b83 b84 b85 b86 ->
                                                                    if b79
                                                                    then 
                                                                    if b80
                                                                    then 
                                                                    if b81
                                                                    then 
                                                                    if b82
                                                                    then 
                                                                    if b83
                                                                    then 
                                                                    if b84
                                                                    then None
                                                                    else 
                                                                    if b85
                                                                    then 
                                                                    if b86
                                                                    then None
                                                                    else 
                                                                    (match s10 with
                                                                    | [] ->
                                                                    None
                                                                    | a10::s11 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b87 b88 b89 b90 b91 b92 b93 b94 ->
                                                                    if b87
                                                                    then 
                                                                    if b88
                                                                    then 
                                                                    if b89
                                                                    then 
                                                                    if b90
                                                                    then None
                                                                    else 
                                                                    if b91
                                                                    then None
                                                                    else 
                                                                    if b92
                                                                    then 
                                                                    if b93
                                                                    then 
                                                                    if b94
                                                                    then None
                                                                    else 
                                                                    (match s11 with
                                                                    | [] ->
                                                                    None
                                                                    | a11::s12 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b95 b96 b97 b98 b99 b100 b101 b102 ->
                                                                    if b95
                                                                    then None
                                                                    else 
                                                                    if b96
                                                                    then None
                                                                    else 
                                                                    if b97
                                                                    then 
                                                                    if b98
                                                                    then None
                                                                    else 
                                                                    if b99
                                                                    then 
                                                                    if b100
                                                                    then 
                                                                    if b101
                                                                    then 
                                                                    if b102
                                                                    then None
                                                                    else 
                                                                    (match s12 with
                                                                    | [] ->
                                                                    Some
                                                                    BlockEquivChecker.OPT_iszero_gt
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a11)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a10)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a9)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a8)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a7)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a6)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then None
                                                                    else 
                                                                    if b40
                                                                    then 
                                                                    if b41
                                                                    then 
                                                                    if b42
                                                                    then 
                                                                    if b43
                                                                    then None
                                                                    else 
                                                                    if b44
                                                                    then 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    None
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then None
                                                                    else 
                                                                    if b48
                                                                    then None
                                                                    else 
                                                                    if b49
                                                                    then 
                                                                    if b50
                                                                    then None
                                                                    else 
                                                                    if b51
                                                                    then None
                                                                    else 
                                                                    if b52
                                                                    then 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    None
                                                                    | a6::s7 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b55 b56 b57 b58 b59 b60 b61 b62 ->
                                                                    if b55
                                                                    then 
                                                                    if b56
                                                                    then 
                                                                    if b57
                                                                    then 
                                                                    if b58
                                                                    then 
                                                                    if b59
                                                                    then 
                                                                    if b60
                                                                    then None
                                                                    else 
                                                                    if b61
                                                                    then 
                                                                    if b62
                                                                    then None
                                                                    else 
                                                                    (match s7 with
                                                                    | [] ->
                                                                    None
                                                                    | a7::s8 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b63 b64 b65 b66 b67 b68 b69 b70 ->
                                                                    if b63
                                                                    then 
                                                                    if b64
                                                                    then 
                                                                    if b65
                                                                    then 
                                                                    if b66
                                                                    then 
                                                                    if b67
                                                                    then None
                                                                    else 
                                                                    if b68
                                                                    then 
                                                                    if b69
                                                                    then 
                                                                    if b70
                                                                    then None
                                                                    else 
                                                                    (match s8 with
                                                                    | [] ->
                                                                    None
                                                                    | a8::s9 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b71 b72 b73 b74 b75 b76 b77 b78 ->
                                                                    if b71
                                                                    then None
                                                                    else 
                                                                    if b72
                                                                    then 
                                                                    if b73
                                                                    then None
                                                                    else 
                                                                    if b74
                                                                    then None
                                                                    else 
                                                                    if b75
                                                                    then 
                                                                    if b76
                                                                    then 
                                                                    if b77
                                                                    then 
                                                                    if b78
                                                                    then None
                                                                    else 
                                                                    (match s9 with
                                                                    | [] ->
                                                                    None
                                                                    | a9::s10 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b79 b80 b81 b82 b83 b84 b85 b86 ->
                                                                    if b79
                                                                    then 
                                                                    if b80
                                                                    then None
                                                                    else 
                                                                    if b81
                                                                    then None
                                                                    else 
                                                                    if b82
                                                                    then 
                                                                    if b83
                                                                    then None
                                                                    else 
                                                                    if b84
                                                                    then 
                                                                    if b85
                                                                    then 
                                                                    if b86
                                                                    then None
                                                                    else 
                                                                    (match s10 with
                                                                    | [] ->
                                                                    None
                                                                    | a10::s11 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b87 b88 b89 b90 b91 b92 b93 b94 ->
                                                                    if b87
                                                                    then 
                                                                    if b88
                                                                    then 
                                                                    if b89
                                                                    then 
                                                                    if b90
                                                                    then None
                                                                    else 
                                                                    if b91
                                                                    then None
                                                                    else 
                                                                    if b92
                                                                    then 
                                                                    if b93
                                                                    then 
                                                                    if b94
                                                                    then None
                                                                    else 
                                                                    (match s11 with
                                                                    | [] ->
                                                                    None
                                                                    | a11::s12 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b95 b96 b97 b98 b99 b100 b101 b102 ->
                                                                    if b95
                                                                    then 
                                                                    if b96
                                                                    then None
                                                                    else 
                                                                    if b97
                                                                    then None
                                                                    else 
                                                                    if b98
                                                                    then 
                                                                    if b99
                                                                    then None
                                                                    else 
                                                                    if b100
                                                                    then 
                                                                    if b101
                                                                    then 
                                                                    if b102
                                                                    then None
                                                                    else 
                                                                    (match s12 with
                                                                    | [] ->
                                                                    None
                                                                    | a12::s13 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b103 b104 b105 b106 b107 b108 b109 b110 ->
                                                                    if b103
                                                                    then None
                                                                    else 
                                                                    if b104
                                                                    then 
                                                                    if b105
                                                                    then 
                                                                    if b106
                                                                    then 
                                                                    if b107
                                                                    then None
                                                                    else 
                                                                    if b108
                                                                    then 
                                                                    if b109
                                                                    then 
                                                                    if b110
                                                                    then None
                                                                    else 
                                                                    (match s13 with
                                                                    | [] ->
                                                                    Some
                                                                    BlockEquivChecker.OPT_and_origin
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a12)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a11)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a10)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a9)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a8)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else 
                                                                    if b65
                                                                    then None
                                                                    else 
                                                                    if b66
                                                                    then None
                                                                    else 
                                                                    if b67
                                                                    then None
                                                                    else 
                                                                    if b68
                                                                    then 
                                                                    if b69
                                                                    then 
                                                                    if b70
                                                                    then None
                                                                    else 
                                                                    (match s8 with
                                                                    | [] ->
                                                                    None
                                                                    | a8::s9 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b71 b72 b73 b74 b75 b76 b77 b78 ->
                                                                    if b71
                                                                    then None
                                                                    else 
                                                                    if b72
                                                                    then 
                                                                    if b73
                                                                    then 
                                                                    if b74
                                                                    then 
                                                                    if b75
                                                                    then None
                                                                    else 
                                                                    if b76
                                                                    then 
                                                                    if b77
                                                                    then 
                                                                    if b78
                                                                    then None
                                                                    else 
                                                                    (match s9 with
                                                                    | [] ->
                                                                    None
                                                                    | a9::s10 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b79 b80 b81 b82 b83 b84 b85 b86 ->
                                                                    if b79
                                                                    then None
                                                                    else 
                                                                    if b80
                                                                    then None
                                                                    else 
                                                                    if b81
                                                                    then 
                                                                    if b82
                                                                    then None
                                                                    else 
                                                                    if b83
                                                                    then None
                                                                    else 
                                                                    if b84
                                                                    then 
                                                                    if b85
                                                                    then 
                                                                    if b86
                                                                    then None
                                                                    else 
                                                                    (match s10 with
                                                                    | [] ->
                                                                    None
                                                                    | a10::s11 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b87 b88 b89 b90 b91 b92 b93 b94 ->
                                                                    if b87
                                                                    then 
                                                                    if b88
                                                                    then None
                                                                    else 
                                                                    if b89
                                                                    then None
                                                                    else 
                                                                    if b90
                                                                    then None
                                                                    else 
                                                                    if b91
                                                                    then 
                                                                    if b92
                                                                    then 
                                                                    if b93
                                                                    then None
                                                                    else 
                                                                    if b94
                                                                    then None
                                                                    else 
                                                                    (match s11 with
                                                                    | [] ->
                                                                    Some
                                                                    BlockEquivChecker.OPT_and_and1
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else 
                                                                    if b88
                                                                    then 
                                                                    if b89
                                                                    then None
                                                                    else 
                                                                    if b90
                                                                    then None
                                                                    else 
                                                                    if b91
                                                                    then 
                                                                    if b92
                                                                    then 
                                                                    if b93
                                                                    then None
                                                                    else 
                                                                    if b94
                                                                    then None
                                                                    else 
                                                                    (match s11 with
                                                                    | [] ->
                                                                    Some
                                                                    BlockEquivChecker.OPT_and_and2
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a10)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a9)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else 
                                                                    if b73
                                                                    then 
                                                                    if b74
                                                                    then None
                                                                    else 
                                                                    if b75
                                                                    then None
                                                                    else 
                                                                    if b76
                                                                    then 
                                                                    if b77
                                                                    then 
                                                                    if b78
                                                                    then None
                                                                    else 
                                                                    (match s9 with
                                                                    | [] ->
                                                                    None
                                                                    | a9::s10 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b79 b80 b81 b82 b83 b84 b85 b86 ->
                                                                    if b79
                                                                    then None
                                                                    else 
                                                                    if b80
                                                                    then None
                                                                    else 
                                                                    if b81
                                                                    then 
                                                                    if b82
                                                                    then None
                                                                    else 
                                                                    if b83
                                                                    then None
                                                                    else 
                                                                    if b84
                                                                    then 
                                                                    if b85
                                                                    then 
                                                                    if b86
                                                                    then None
                                                                    else 
                                                                    (match s10 with
                                                                    | [] ->
                                                                    None
                                                                    | a10::s11 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b87 b88 b89 b90 b91 b92 b93 b94 ->
                                                                    if b87
                                                                    then None
                                                                    else 
                                                                    if b88
                                                                    then 
                                                                    if b89
                                                                    then None
                                                                    else 
                                                                    if b90
                                                                    then None
                                                                    else 
                                                                    if b91
                                                                    then 
                                                                    if b92
                                                                    then 
                                                                    if b93
                                                                    then 
                                                                    if b94
                                                                    then None
                                                                    else 
                                                                    (match s11 with
                                                                    | [] ->
                                                                    None
                                                                    | a11::s12 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b95 b96 b97 b98 b99 b100 b101 b102 ->
                                                                    if b95
                                                                    then 
                                                                    if b96
                                                                    then None
                                                                    else 
                                                                    if b97
                                                                    then 
                                                                    if b98
                                                                    then None
                                                                    else 
                                                                    if b99
                                                                    then None
                                                                    else 
                                                                    if b100
                                                                    then 
                                                                    if b101
                                                                    then 
                                                                    if b102
                                                                    then None
                                                                    else 
                                                                    (match s12 with
                                                                    | [] ->
                                                                    None
                                                                    | a12::s13 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b103 b104 b105 b106 b107 b108 b109 b110 ->
                                                                    if b103
                                                                    then 
                                                                    if b104
                                                                    then 
                                                                    if b105
                                                                    then None
                                                                    else 
                                                                    if b106
                                                                    then None
                                                                    else 
                                                                    if b107
                                                                    then 
                                                                    if b108
                                                                    then 
                                                                    if b109
                                                                    then 
                                                                    if b110
                                                                    then None
                                                                    else 
                                                                    (match s13 with
                                                                    | [] ->
                                                                    None
                                                                    | a13::s14 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b111 b112 b113 b114 b115 b116 b117 b118 ->
                                                                    if b111
                                                                    then 
                                                                    if b112
                                                                    then 
                                                                    if b113
                                                                    then None
                                                                    else 
                                                                    if b114
                                                                    then None
                                                                    else 
                                                                    if b115
                                                                    then 
                                                                    if b116
                                                                    then 
                                                                    if b117
                                                                    then 
                                                                    if b118
                                                                    then None
                                                                    else 
                                                                    (match s14 with
                                                                    | [] ->
                                                                    Some
                                                                    BlockEquivChecker.OPT_and_address
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a13)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a12)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a11)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a10)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a9)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a8)
                                                                    else None
                                                                    else None
                                                                    else 
                                                                    if b64
                                                                    then 
                                                                    if b65
                                                                    then None
                                                                    else 
                                                                    if b66
                                                                    then 
                                                                    if b67
                                                                    then 
                                                                    if b68
                                                                    then 
                                                                    if b69
                                                                    then 
                                                                    if b70
                                                                    then None
                                                                    else 
                                                                    (match s8 with
                                                                    | [] ->
                                                                    None
                                                                    | a8::s9 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b71 b72 b73 b74 b75 b76 b77 b78 ->
                                                                    if b71
                                                                    then 
                                                                    if b72
                                                                    then None
                                                                    else 
                                                                    if b73
                                                                    then 
                                                                    if b74
                                                                    then None
                                                                    else 
                                                                    if b75
                                                                    then None
                                                                    else 
                                                                    if b76
                                                                    then 
                                                                    if b77
                                                                    then 
                                                                    if b78
                                                                    then None
                                                                    else 
                                                                    (match s9 with
                                                                    | [] ->
                                                                    None
                                                                    | a9::s10 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b79 b80 b81 b82 b83 b84 b85 b86 ->
                                                                    if b79
                                                                    then None
                                                                    else 
                                                                    if b80
                                                                    then 
                                                                    if b81
                                                                    then None
                                                                    else 
                                                                    if b82
                                                                    then None
                                                                    else 
                                                                    if b83
                                                                    then 
                                                                    if b84
                                                                    then 
                                                                    if b85
                                                                    then 
                                                                    if b86
                                                                    then None
                                                                    else 
                                                                    (match s10 with
                                                                    | [] ->
                                                                    None
                                                                    | a10::s11 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b87 b88 b89 b90 b91 b92 b93 b94 ->
                                                                    if b87
                                                                    then 
                                                                    if b88
                                                                    then 
                                                                    if b89
                                                                    then 
                                                                    if b90
                                                                    then 
                                                                    if b91
                                                                    then None
                                                                    else 
                                                                    if b92
                                                                    then 
                                                                    if b93
                                                                    then 
                                                                    if b94
                                                                    then None
                                                                    else 
                                                                    (match s11 with
                                                                    | [] ->
                                                                    Some
                                                                    BlockEquivChecker.OPT_and_zero
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a10)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a9)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a8)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a7)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a6)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else 
                                                                    if b41
                                                                    then 
                                                                    if b42
                                                                    then None
                                                                    else 
                                                                    if b43
                                                                    then None
                                                                    else 
                                                                    if b44
                                                                    then 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    None
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then None
                                                                    else 
                                                                    if b48
                                                                    then None
                                                                    else 
                                                                    if b49
                                                                    then 
                                                                    if b50
                                                                    then None
                                                                    else 
                                                                    if b51
                                                                    then None
                                                                    else 
                                                                    if b52
                                                                    then 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    None
                                                                    | a6::s7 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b55 b56 b57 b58 b59 b60 b61 b62 ->
                                                                    if b55
                                                                    then 
                                                                    if b56
                                                                    then 
                                                                    if b57
                                                                    then 
                                                                    if b58
                                                                    then 
                                                                    if b59
                                                                    then 
                                                                    if b60
                                                                    then None
                                                                    else 
                                                                    if b61
                                                                    then 
                                                                    if b62
                                                                    then None
                                                                    else 
                                                                    (match s7 with
                                                                    | [] ->
                                                                    None
                                                                    | a7::s8 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b63 b64 b65 b66 b67 b68 b69 b70 ->
                                                                    if b63
                                                                    then None
                                                                    else 
                                                                    if b64
                                                                    then 
                                                                    if b65
                                                                    then None
                                                                    else 
                                                                    if b66
                                                                    then 
                                                                    if b67
                                                                    then 
                                                                    if b68
                                                                    then 
                                                                    if b69
                                                                    then 
                                                                    if b70
                                                                    then None
                                                                    else 
                                                                    (match s8 with
                                                                    | [] ->
                                                                    None
                                                                    | a8::s9 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b71 b72 b73 b74 b75 b76 b77 b78 ->
                                                                    if b71
                                                                    then 
                                                                    if b72
                                                                    then None
                                                                    else 
                                                                    if b73
                                                                    then 
                                                                    if b74
                                                                    then None
                                                                    else 
                                                                    if b75
                                                                    then None
                                                                    else 
                                                                    if b76
                                                                    then 
                                                                    if b77
                                                                    then 
                                                                    if b78
                                                                    then None
                                                                    else 
                                                                    (match s9 with
                                                                    | [] ->
                                                                    None
                                                                    | a9::s10 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b79 b80 b81 b82 b83 b84 b85 b86 ->
                                                                    if b79
                                                                    then None
                                                                    else 
                                                                    if b80
                                                                    then 
                                                                    if b81
                                                                    then None
                                                                    else 
                                                                    if b82
                                                                    then None
                                                                    else 
                                                                    if b83
                                                                    then 
                                                                    if b84
                                                                    then 
                                                                    if b85
                                                                    then 
                                                                    if b86
                                                                    then None
                                                                    else 
                                                                    (match s10 with
                                                                    | [] ->
                                                                    None
                                                                    | a10::s11 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b87 b88 b89 b90 b91 b92 b93 b94 ->
                                                                    if b87
                                                                    then 
                                                                    if b88
                                                                    then 
                                                                    if b89
                                                                    then 
                                                                    if b90
                                                                    then 
                                                                    if b91
                                                                    then None
                                                                    else 
                                                                    if b92
                                                                    then 
                                                                    if b93
                                                                    then 
                                                                    if b94
                                                                    then None
                                                                    else 
                                                                    (match s11 with
                                                                    | [] ->
                                                                    Some
                                                                    BlockEquivChecker.OPT_add_zero
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a10)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a9)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a8)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a7)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a6)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else 
                                                                    if b32
                                                                    then 
                                                                    if b33
                                                                    then 
                                                                    if b34
                                                                    then 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then 
                                                                    if b40
                                                                    then 
                                                                    if b41
                                                                    then 
                                                                    if b42
                                                                    then 
                                                                    if b43
                                                                    then None
                                                                    else 
                                                                    if b44
                                                                    then 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    None
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then None
                                                                    else 
                                                                    if b48
                                                                    then None
                                                                    else 
                                                                    if b49
                                                                    then 
                                                                    if b50
                                                                    then None
                                                                    else 
                                                                    if b51
                                                                    then 
                                                                    if b52
                                                                    then 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    None
                                                                    | a6::s7 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b55 b56 b57 b58 b59 b60 b61 b62 ->
                                                                    if b55
                                                                    then 
                                                                    if b56
                                                                    then 
                                                                    if b57
                                                                    then 
                                                                    if b58
                                                                    then 
                                                                    if b59
                                                                    then 
                                                                    if b60
                                                                    then None
                                                                    else 
                                                                    if b61
                                                                    then 
                                                                    if b62
                                                                    then None
                                                                    else 
                                                                    (match s7 with
                                                                    | [] ->
                                                                    None
                                                                    | a7::s8 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b63 b64 b65 b66 b67 b68 b69 b70 ->
                                                                    if b63
                                                                    then None
                                                                    else 
                                                                    if b64
                                                                    then 
                                                                    if b65
                                                                    then 
                                                                    if b66
                                                                    then 
                                                                    if b67
                                                                    then None
                                                                    else 
                                                                    if b68
                                                                    then 
                                                                    if b69
                                                                    then 
                                                                    if b70
                                                                    then None
                                                                    else 
                                                                    (match s8 with
                                                                    | [] ->
                                                                    None
                                                                    | a8::s9 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b71 b72 b73 b74 b75 b76 b77 b78 ->
                                                                    if b71
                                                                    then 
                                                                    if b72
                                                                    then 
                                                                    if b73
                                                                    then 
                                                                    if b74
                                                                    then 
                                                                    if b75
                                                                    then None
                                                                    else 
                                                                    if b76
                                                                    then 
                                                                    if b77
                                                                    then 
                                                                    if b78
                                                                    then None
                                                                    else 
                                                                    (match s9 with
                                                                    | [] ->
                                                                    None
                                                                    | a9::s10 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b79 b80 b81 b82 b83 b84 b85 b86 ->
                                                                    if b79
                                                                    then None
                                                                    else 
                                                                    if b80
                                                                    then None
                                                                    else 
                                                                    if b81
                                                                    then 
                                                                    if b82
                                                                    then None
                                                                    else 
                                                                    if b83
                                                                    then 
                                                                    if b84
                                                                    then 
                                                                    if b85
                                                                    then 
                                                                    if b86
                                                                    then None
                                                                    else 
                                                                    (match s10 with
                                                                    | [] ->
                                                                    Some
                                                                    BlockEquivChecker.OPT_not_not
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a9)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a8)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a7)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a6)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else 
                                                                    if b33
                                                                    then 
                                                                    if b34
                                                                    then 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then None
                                                                    else 
                                                                    if b40
                                                                    then None
                                                                    else 
                                                                    if b41
                                                                    then 
                                                                    if b42
                                                                    then None
                                                                    else 
                                                                    if b43
                                                                    then 
                                                                    if b44
                                                                    then 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    None
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then 
                                                                    if b48
                                                                    then 
                                                                    if b49
                                                                    then 
                                                                    if b50
                                                                    then 
                                                                    if b51
                                                                    then 
                                                                    if b52
                                                                    then None
                                                                    else 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    None
                                                                    | a6::s7 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b55 b56 b57 b58 b59 b60 b61 b62 ->
                                                                    if b55
                                                                    then None
                                                                    else 
                                                                    if b56
                                                                    then None
                                                                    else 
                                                                    if b57
                                                                    then None
                                                                    else 
                                                                    if b58
                                                                    then 
                                                                    if b59
                                                                    then 
                                                                    if b60
                                                                    then 
                                                                    if b61
                                                                    then 
                                                                    if b62
                                                                    then None
                                                                    else 
                                                                    (match s7 with
                                                                    | [] ->
                                                                    None
                                                                    | a7::s8 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b63 b64 b65 b66 b67 b68 b69 b70 ->
                                                                    if b63
                                                                    then 
                                                                    if b64
                                                                    then 
                                                                    if b65
                                                                    then 
                                                                    if b66
                                                                    then 
                                                                    if b67
                                                                    then 
                                                                    if b68
                                                                    then None
                                                                    else 
                                                                    if b69
                                                                    then 
                                                                    if b70
                                                                    then None
                                                                    else 
                                                                    (match s8 with
                                                                    | [] ->
                                                                    None
                                                                    | a8::s9 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b71 b72 b73 b74 b75 b76 b77 b78 ->
                                                                    if b71
                                                                    then 
                                                                    if b72
                                                                    then 
                                                                    if b73
                                                                    then 
                                                                    if b74
                                                                    then 
                                                                    if b75
                                                                    then None
                                                                    else 
                                                                    if b76
                                                                    then 
                                                                    if b77
                                                                    then 
                                                                    if b78
                                                                    then None
                                                                    else 
                                                                    (match s9 with
                                                                    | [] ->
                                                                    None
                                                                    | a9::s10 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b79 b80 b81 b82 b83 b84 b85 b86 ->
                                                                    if b79
                                                                    then None
                                                                    else 
                                                                    if b80
                                                                    then 
                                                                    if b81
                                                                    then 
                                                                    if b82
                                                                    then 
                                                                    if b83
                                                                    then None
                                                                    else 
                                                                    if b84
                                                                    then 
                                                                    if b85
                                                                    then 
                                                                    if b86
                                                                    then None
                                                                    else 
                                                                    (match s10 with
                                                                    | [] ->
                                                                    None
                                                                    | a10::s11 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b87 b88 b89 b90 b91 b92 b93 b94 ->
                                                                    if b87
                                                                    then 
                                                                    if b88
                                                                    then None
                                                                    else 
                                                                    if b89
                                                                    then 
                                                                    if b90
                                                                    then None
                                                                    else 
                                                                    if b91
                                                                    then None
                                                                    else 
                                                                    if b92
                                                                    then 
                                                                    if b93
                                                                    then 
                                                                    if b94
                                                                    then None
                                                                    else 
                                                                    (match s11 with
                                                                    | [] ->
                                                                    Some
                                                                    BlockEquivChecker.OPT_lt_x_one
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a10)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a9)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a8)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a7)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a6)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then 
                                                                    if b40
                                                                    then None
                                                                    else 
                                                                    if b41
                                                                    then None
                                                                    else 
                                                                    if b42
                                                                    then 
                                                                    if b43
                                                                    then None
                                                                    else 
                                                                    if b44
                                                                    then 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    None
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then None
                                                                    else 
                                                                    if b48
                                                                    then 
                                                                    if b49
                                                                    then 
                                                                    if b50
                                                                    then None
                                                                    else 
                                                                    if b51
                                                                    then 
                                                                    if b52
                                                                    then 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    None
                                                                    | a6::s7 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b55 b56 b57 b58 b59 b60 b61 b62 ->
                                                                    if b55
                                                                    then 
                                                                    if b56
                                                                    then 
                                                                    if b57
                                                                    then 
                                                                    if b58
                                                                    then 
                                                                    if b59
                                                                    then 
                                                                    if b60
                                                                    then None
                                                                    else 
                                                                    if b61
                                                                    then 
                                                                    if b62
                                                                    then None
                                                                    else 
                                                                    (match s7 with
                                                                    | [] ->
                                                                    None
                                                                    | a7::s8 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b63 b64 b65 b66 b67 b68 b69 b70 ->
                                                                    if b63
                                                                    then 
                                                                    if b64
                                                                    then 
                                                                    if b65
                                                                    then 
                                                                    if b66
                                                                    then 
                                                                    if b67
                                                                    then None
                                                                    else 
                                                                    if b68
                                                                    then 
                                                                    if b69
                                                                    then 
                                                                    if b70
                                                                    then None
                                                                    else 
                                                                    (match s8 with
                                                                    | [] ->
                                                                    None
                                                                    | a8::s9 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b71 b72 b73 b74 b75 b76 b77 b78 ->
                                                                    if b71
                                                                    then None
                                                                    else 
                                                                    if b72
                                                                    then 
                                                                    if b73
                                                                    then 
                                                                    if b74
                                                                    then 
                                                                    if b75
                                                                    then None
                                                                    else 
                                                                    if b76
                                                                    then 
                                                                    if b77
                                                                    then 
                                                                    if b78
                                                                    then None
                                                                    else 
                                                                    (match s9 with
                                                                    | [] ->
                                                                    None
                                                                    | a9::s10 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b79 b80 b81 b82 b83 b84 b85 b86 ->
                                                                    if b79
                                                                    then 
                                                                    if b80
                                                                    then None
                                                                    else 
                                                                    if b81
                                                                    then 
                                                                    if b82
                                                                    then None
                                                                    else 
                                                                    if b83
                                                                    then None
                                                                    else 
                                                                    if b84
                                                                    then 
                                                                    if b85
                                                                    then 
                                                                    if b86
                                                                    then None
                                                                    else 
                                                                    (match s10 with
                                                                    | [] ->
                                                                    Some
                                                                    BlockEquivChecker.OPT_div_one
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a9)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a8)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else 
                                                                    if b66
                                                                    then None
                                                                    else 
                                                                    if b67
                                                                    then 
                                                                    if b68
                                                                    then 
                                                                    if b69
                                                                    then 
                                                                    if b70
                                                                    then None
                                                                    else 
                                                                    (match s8 with
                                                                    | [] ->
                                                                    None
                                                                    | a8::s9 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b71 b72 b73 b74 b75 b76 b77 b78 ->
                                                                    if b71
                                                                    then None
                                                                    else 
                                                                    if b72
                                                                    then None
                                                                    else 
                                                                    if b73
                                                                    then None
                                                                    else 
                                                                    if b74
                                                                    then 
                                                                    if b75
                                                                    then None
                                                                    else 
                                                                    if b76
                                                                    then 
                                                                    if b77
                                                                    then 
                                                                    if b78
                                                                    then None
                                                                    else 
                                                                    (match s9 with
                                                                    | [] ->
                                                                    None
                                                                    | a9::s10 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b79 b80 b81 b82 b83 b84 b85 b86 ->
                                                                    if b79
                                                                    then None
                                                                    else 
                                                                    if b80
                                                                    then None
                                                                    else 
                                                                    if b81
                                                                    then 
                                                                    if b82
                                                                    then 
                                                                    if b83
                                                                    then None
                                                                    else 
                                                                    if b84
                                                                    then 
                                                                    if b85
                                                                    then 
                                                                    if b86
                                                                    then None
                                                                    else 
                                                                    (match s10 with
                                                                    | [] ->
                                                                    Some
                                                                    BlockEquivChecker.OPT_div_shl
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a9)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a8)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a7)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a6)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None)
                                                   a0)
                                    else None
                     else None
                else None
           else None
      else None)
      a

  (** val strs_to_opts :
      char list list -> BlockEquivChecker.list_opt_steps option **)

  let rec strs_to_opts = function
  | [] -> Some []
  | x::xs ->
    (match str_to_opt x with
     | Some o ->
       (match strs_to_opts xs with
        | Some os -> Some (o::os)
        | None -> None)
     | None -> None)

  (** val parse_opts_arg :
      char list list -> BlockEquivChecker.list_opt_steps option **)

  let parse_opts_arg opts_to_apply = match opts_to_apply with
  | [] -> strs_to_opts opts_to_apply
  | s::l ->
    (match s with
     | [] -> strs_to_opts opts_to_apply
     | a::s0 ->
       (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
         (fun b b0 b1 b2 b3 b4 b5 b6 ->
         if b
         then if b0
              then strs_to_opts opts_to_apply
              else if b1
                   then strs_to_opts opts_to_apply
                   else if b2
                        then strs_to_opts opts_to_apply
                        else if b3
                             then strs_to_opts opts_to_apply
                             else if b4
                                  then if b5
                                       then if b6
                                            then strs_to_opts opts_to_apply
                                            else (match s0 with
                                                  | [] ->
                                                    strs_to_opts opts_to_apply
                                                  | a0::s1 ->
                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                      (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                      if b7
                                                      then strs_to_opts
                                                             opts_to_apply
                                                      else if b8
                                                           then strs_to_opts
                                                                  opts_to_apply
                                                           else if b9
                                                                then 
                                                                  if b10
                                                                  then 
                                                                    if b11
                                                                    then 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    if b12
                                                                    then 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    if b16
                                                                    then 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    if b17
                                                                    then 
                                                                    if b18
                                                                    then 
                                                                    if b19
                                                                    then 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    if b20
                                                                    then 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    (match l with
                                                                    | [] ->
                                                                    Some
                                                                    BlockEquivChecker.all_optimization_steps
                                                                    | _::_ ->
                                                                    strs_to_opts
                                                                    opts_to_apply)
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then 
                                                                    if b24
                                                                    then 
                                                                    if b25
                                                                    then 
                                                                    if b26
                                                                    then 
                                                                    if b27
                                                                    then 
                                                                    if b28
                                                                    then 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then 
                                                                    if b32
                                                                    then 
                                                                    if b33
                                                                    then 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    if b34
                                                                    then 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    if b35
                                                                    then 
                                                                    if b36
                                                                    then 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then 
                                                                    if b40
                                                                    then 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    if b41
                                                                    then 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    if b42
                                                                    then 
                                                                    if b43
                                                                    then 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    if b44
                                                                    then 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    if b48
                                                                    then 
                                                                    if b49
                                                                    then 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    if b50
                                                                    then 
                                                                    if b51
                                                                    then 
                                                                    if b52
                                                                    then 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    | a6::s7 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b55 b56 b57 b58 b59 b60 b61 b62 ->
                                                                    if b55
                                                                    then 
                                                                    if b56
                                                                    then 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    if b57
                                                                    then 
                                                                    if b58
                                                                    then 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    if b59
                                                                    then 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    if b60
                                                                    then 
                                                                    if b61
                                                                    then 
                                                                    if b62
                                                                    then 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    (match s7 with
                                                                    | [] ->
                                                                    (match l with
                                                                    | [] ->
                                                                    Some
                                                                    BlockEquivChecker.all_optimization_steps'
                                                                    | _::_ ->
                                                                    strs_to_opts
                                                                    opts_to_apply)
                                                                    | _::_ ->
                                                                    strs_to_opts
                                                                    opts_to_apply)
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply)
                                                                    a6)
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply)
                                                                    a5)
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply)
                                                                    a4)
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply)
                                                                    a3)
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply)
                                                                    a2)
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply)
                                                                    a1)
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                  else 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                else 
                                                                  strs_to_opts
                                                                    opts_to_apply)
                                                      a0)
                                       else strs_to_opts opts_to_apply
                                  else strs_to_opts opts_to_apply
         else if b0
              then if b1
                   then if b2
                        then if b3
                             then strs_to_opts opts_to_apply
                             else if b4
                                  then if b5
                                       then if b6
                                            then strs_to_opts opts_to_apply
                                            else (match s0 with
                                                  | [] ->
                                                    strs_to_opts opts_to_apply
                                                  | a0::s1 ->
                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                      (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                      if b7
                                                      then if b8
                                                           then if b9
                                                                then 
                                                                  if b10
                                                                  then 
                                                                    if b11
                                                                    then 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    if b12
                                                                    then 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    if b16
                                                                    then 
                                                                    if b17
                                                                    then 
                                                                    if b18
                                                                    then 
                                                                    if b19
                                                                    then 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    if b20
                                                                    then 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then 
                                                                    if b24
                                                                    then 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    if b25
                                                                    then 
                                                                    if b26
                                                                    then 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    if b27
                                                                    then 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    if b28
                                                                    then 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    (match l with
                                                                    | [] ->
                                                                    Some []
                                                                    | _::_ ->
                                                                    strs_to_opts
                                                                    opts_to_apply)
                                                                    | _::_ ->
                                                                    strs_to_opts
                                                                    opts_to_apply)
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply)
                                                                    a2)
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply)
                                                                    a1)
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                    else 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                  else 
                                                                    strs_to_opts
                                                                    opts_to_apply
                                                                else 
                                                                  strs_to_opts
                                                                    opts_to_apply
                                                           else strs_to_opts
                                                                  opts_to_apply
                                                      else strs_to_opts
                                                             opts_to_apply)
                                                      a0)
                                       else strs_to_opts opts_to_apply
                                  else strs_to_opts opts_to_apply
                        else strs_to_opts opts_to_apply
                   else strs_to_opts opts_to_apply
              else strs_to_opts opts_to_apply)
         a)

  (** val parse_memory_updater :
      char list -> BlockEquivChecker.available_smemory_updaters option **)

  let parse_memory_updater = function
  | [] -> None
  | a::s0 ->
    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
      (fun b b0 b1 b2 b3 b4 b5 b6 ->
      if b
      then None
      else if b0
           then if b1
                then None
                else if b2
                     then None
                     else if b3
                          then None
                          else if b4
                               then if b5
                                    then if b6
                                         then None
                                         else (match s0 with
                                               | [] -> None
                                               | a0::s1 ->
                                                 (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                   (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                   if b7
                                                   then if b8
                                                        then None
                                                        else if b9
                                                             then None
                                                             else if b10
                                                                  then None
                                                                  else 
                                                                    if b11
                                                                    then None
                                                                    else 
                                                                    if b12
                                                                    then 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then 
                                                                    if b16
                                                                    then 
                                                                    if b17
                                                                    then None
                                                                    else 
                                                                    if b18
                                                                    then None
                                                                    else 
                                                                    if b19
                                                                    then 
                                                                    if b20
                                                                    then 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then 
                                                                    if b24
                                                                    then None
                                                                    else 
                                                                    if b25
                                                                    then None
                                                                    else 
                                                                    if b26
                                                                    then 
                                                                    if b27
                                                                    then None
                                                                    else 
                                                                    if b28
                                                                    then 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then 
                                                                    if b32
                                                                    then 
                                                                    if b33
                                                                    then None
                                                                    else 
                                                                    if b34
                                                                    then None
                                                                    else 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    Some
                                                                    BlockEquivChecker.SMemUpdater_Basic
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None
                                                   else None)
                                                   a0)
                                    else None
                               else None
           else if b1
                then if b2
                     then None
                     else if b3
                          then if b4
                               then if b5
                                    then if b6
                                         then None
                                         else (match s0 with
                                               | [] -> None
                                               | a0::s1 ->
                                                 (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                   (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                   if b7
                                                   then None
                                                   else if b8
                                                        then if b9
                                                             then None
                                                             else if b10
                                                                  then None
                                                                  else 
                                                                    if b11
                                                                    then 
                                                                    if b12
                                                                    then 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then 
                                                                    if b16
                                                                    then None
                                                                    else 
                                                                    if b17
                                                                    then None
                                                                    else 
                                                                    if b18
                                                                    then 
                                                                    if b19
                                                                    then None
                                                                    else 
                                                                    if b20
                                                                    then 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then None
                                                                    else 
                                                                    if b24
                                                                    then 
                                                                    if b25
                                                                    then 
                                                                    if b26
                                                                    then None
                                                                    else 
                                                                    if b27
                                                                    then 
                                                                    if b28
                                                                    then 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then 
                                                                    if b32
                                                                    then None
                                                                    else 
                                                                    if b33
                                                                    then None
                                                                    else 
                                                                    if b34
                                                                    then 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then 
                                                                    if b40
                                                                    then None
                                                                    else 
                                                                    if b41
                                                                    then None
                                                                    else 
                                                                    if b42
                                                                    then None
                                                                    else 
                                                                    if b43
                                                                    then None
                                                                    else 
                                                                    if b44
                                                                    then 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    None
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then None
                                                                    else 
                                                                    if b48
                                                                    then None
                                                                    else 
                                                                    if b49
                                                                    then 
                                                                    if b50
                                                                    then 
                                                                    if b51
                                                                    then None
                                                                    else 
                                                                    if b52
                                                                    then 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    Some
                                                                    BlockEquivChecker.SMemUpdater_Trivial
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None
                                                                    else None
                                                        else None)
                                                   a0)
                                    else None
                               else None
                          else None
                else None)
      a

  (** val parse_storage_updater :
      char list -> BlockEquivChecker.available_sstorage_updaters option **)

  let parse_storage_updater = function
  | [] -> None
  | a::s0 ->
    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
      (fun b b0 b1 b2 b3 b4 b5 b6 ->
      if b
      then None
      else if b0
           then if b1
                then None
                else if b2
                     then None
                     else if b3
                          then None
                          else if b4
                               then if b5
                                    then if b6
                                         then None
                                         else (match s0 with
                                               | [] -> None
                                               | a0::s1 ->
                                                 (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                   (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                   if b7
                                                   then if b8
                                                        then None
                                                        else if b9
                                                             then None
                                                             else if b10
                                                                  then None
                                                                  else 
                                                                    if b11
                                                                    then None
                                                                    else 
                                                                    if b12
                                                                    then 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then 
                                                                    if b16
                                                                    then 
                                                                    if b17
                                                                    then None
                                                                    else 
                                                                    if b18
                                                                    then None
                                                                    else 
                                                                    if b19
                                                                    then 
                                                                    if b20
                                                                    then 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then 
                                                                    if b24
                                                                    then None
                                                                    else 
                                                                    if b25
                                                                    then None
                                                                    else 
                                                                    if b26
                                                                    then 
                                                                    if b27
                                                                    then None
                                                                    else 
                                                                    if b28
                                                                    then 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then 
                                                                    if b32
                                                                    then 
                                                                    if b33
                                                                    then None
                                                                    else 
                                                                    if b34
                                                                    then None
                                                                    else 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    Some
                                                                    BlockEquivChecker.SStrgUpdater_Basic
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None
                                                   else None)
                                                   a0)
                                    else None
                               else None
           else if b1
                then if b2
                     then None
                     else if b3
                          then if b4
                               then if b5
                                    then if b6
                                         then None
                                         else (match s0 with
                                               | [] -> None
                                               | a0::s1 ->
                                                 (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                   (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                   if b7
                                                   then None
                                                   else if b8
                                                        then if b9
                                                             then None
                                                             else if b10
                                                                  then None
                                                                  else 
                                                                    if b11
                                                                    then 
                                                                    if b12
                                                                    then 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then 
                                                                    if b16
                                                                    then None
                                                                    else 
                                                                    if b17
                                                                    then None
                                                                    else 
                                                                    if b18
                                                                    then 
                                                                    if b19
                                                                    then None
                                                                    else 
                                                                    if b20
                                                                    then 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then None
                                                                    else 
                                                                    if b24
                                                                    then 
                                                                    if b25
                                                                    then 
                                                                    if b26
                                                                    then None
                                                                    else 
                                                                    if b27
                                                                    then 
                                                                    if b28
                                                                    then 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then 
                                                                    if b32
                                                                    then None
                                                                    else 
                                                                    if b33
                                                                    then None
                                                                    else 
                                                                    if b34
                                                                    then 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then 
                                                                    if b40
                                                                    then None
                                                                    else 
                                                                    if b41
                                                                    then None
                                                                    else 
                                                                    if b42
                                                                    then None
                                                                    else 
                                                                    if b43
                                                                    then None
                                                                    else 
                                                                    if b44
                                                                    then 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    None
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then None
                                                                    else 
                                                                    if b48
                                                                    then None
                                                                    else 
                                                                    if b49
                                                                    then 
                                                                    if b50
                                                                    then 
                                                                    if b51
                                                                    then None
                                                                    else 
                                                                    if b52
                                                                    then 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    Some
                                                                    BlockEquivChecker.SStrgUpdater_Trivial
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None
                                                                    else None
                                                        else None)
                                                   a0)
                                    else None
                               else None
                          else None
                else None)
      a

  (** val parse_mload_solver :
      char list -> BlockEquivChecker.available_mload_solvers option **)

  let parse_mload_solver = function
  | [] -> None
  | a::s0 ->
    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
      (fun b b0 b1 b2 b3 b4 b5 b6 ->
      if b
      then None
      else if b0
           then if b1
                then None
                else if b2
                     then None
                     else if b3
                          then None
                          else if b4
                               then if b5
                                    then if b6
                                         then None
                                         else (match s0 with
                                               | [] -> None
                                               | a0::s1 ->
                                                 (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                   (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                   if b7
                                                   then if b8
                                                        then None
                                                        else if b9
                                                             then None
                                                             else if b10
                                                                  then None
                                                                  else 
                                                                    if b11
                                                                    then None
                                                                    else 
                                                                    if b12
                                                                    then 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then 
                                                                    if b16
                                                                    then 
                                                                    if b17
                                                                    then None
                                                                    else 
                                                                    if b18
                                                                    then None
                                                                    else 
                                                                    if b19
                                                                    then 
                                                                    if b20
                                                                    then 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then 
                                                                    if b24
                                                                    then None
                                                                    else 
                                                                    if b25
                                                                    then None
                                                                    else 
                                                                    if b26
                                                                    then 
                                                                    if b27
                                                                    then None
                                                                    else 
                                                                    if b28
                                                                    then 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then 
                                                                    if b32
                                                                    then 
                                                                    if b33
                                                                    then None
                                                                    else 
                                                                    if b34
                                                                    then None
                                                                    else 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    Some
                                                                    BlockEquivChecker.MLoadSolver_Basic
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None
                                                   else None)
                                                   a0)
                                    else None
                               else None
           else if b1
                then if b2
                     then None
                     else if b3
                          then if b4
                               then if b5
                                    then if b6
                                         then None
                                         else (match s0 with
                                               | [] -> None
                                               | a0::s1 ->
                                                 (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                   (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                   if b7
                                                   then None
                                                   else if b8
                                                        then if b9
                                                             then None
                                                             else if b10
                                                                  then None
                                                                  else 
                                                                    if b11
                                                                    then 
                                                                    if b12
                                                                    then 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then 
                                                                    if b16
                                                                    then None
                                                                    else 
                                                                    if b17
                                                                    then None
                                                                    else 
                                                                    if b18
                                                                    then 
                                                                    if b19
                                                                    then None
                                                                    else 
                                                                    if b20
                                                                    then 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then None
                                                                    else 
                                                                    if b24
                                                                    then 
                                                                    if b25
                                                                    then 
                                                                    if b26
                                                                    then None
                                                                    else 
                                                                    if b27
                                                                    then 
                                                                    if b28
                                                                    then 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then 
                                                                    if b32
                                                                    then None
                                                                    else 
                                                                    if b33
                                                                    then None
                                                                    else 
                                                                    if b34
                                                                    then 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then 
                                                                    if b40
                                                                    then None
                                                                    else 
                                                                    if b41
                                                                    then None
                                                                    else 
                                                                    if b42
                                                                    then None
                                                                    else 
                                                                    if b43
                                                                    then None
                                                                    else 
                                                                    if b44
                                                                    then 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    None
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then None
                                                                    else 
                                                                    if b48
                                                                    then None
                                                                    else 
                                                                    if b49
                                                                    then 
                                                                    if b50
                                                                    then 
                                                                    if b51
                                                                    then None
                                                                    else 
                                                                    if b52
                                                                    then 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    Some
                                                                    BlockEquivChecker.MLoadSolver_Trivial
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None
                                                                    else None
                                                        else None)
                                                   a0)
                                    else None
                               else None
                          else None
                else None)
      a

  (** val parse_sload_solver :
      char list -> BlockEquivChecker.available_sload_solvers option **)

  let parse_sload_solver = function
  | [] -> None
  | a::s0 ->
    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
      (fun b b0 b1 b2 b3 b4 b5 b6 ->
      if b
      then None
      else if b0
           then if b1
                then None
                else if b2
                     then None
                     else if b3
                          then None
                          else if b4
                               then if b5
                                    then if b6
                                         then None
                                         else (match s0 with
                                               | [] -> None
                                               | a0::s1 ->
                                                 (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                   (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                   if b7
                                                   then if b8
                                                        then None
                                                        else if b9
                                                             then None
                                                             else if b10
                                                                  then None
                                                                  else 
                                                                    if b11
                                                                    then None
                                                                    else 
                                                                    if b12
                                                                    then 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then 
                                                                    if b16
                                                                    then 
                                                                    if b17
                                                                    then None
                                                                    else 
                                                                    if b18
                                                                    then None
                                                                    else 
                                                                    if b19
                                                                    then 
                                                                    if b20
                                                                    then 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then 
                                                                    if b24
                                                                    then None
                                                                    else 
                                                                    if b25
                                                                    then None
                                                                    else 
                                                                    if b26
                                                                    then 
                                                                    if b27
                                                                    then None
                                                                    else 
                                                                    if b28
                                                                    then 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then 
                                                                    if b32
                                                                    then 
                                                                    if b33
                                                                    then None
                                                                    else 
                                                                    if b34
                                                                    then None
                                                                    else 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    Some
                                                                    BlockEquivChecker.SLoadSolver_Basic
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None
                                                   else None)
                                                   a0)
                                    else None
                               else None
           else if b1
                then if b2
                     then None
                     else if b3
                          then if b4
                               then if b5
                                    then if b6
                                         then None
                                         else (match s0 with
                                               | [] -> None
                                               | a0::s1 ->
                                                 (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                   (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                   if b7
                                                   then None
                                                   else if b8
                                                        then if b9
                                                             then None
                                                             else if b10
                                                                  then None
                                                                  else 
                                                                    if b11
                                                                    then 
                                                                    if b12
                                                                    then 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then 
                                                                    if b16
                                                                    then None
                                                                    else 
                                                                    if b17
                                                                    then None
                                                                    else 
                                                                    if b18
                                                                    then 
                                                                    if b19
                                                                    then None
                                                                    else 
                                                                    if b20
                                                                    then 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then None
                                                                    else 
                                                                    if b24
                                                                    then 
                                                                    if b25
                                                                    then 
                                                                    if b26
                                                                    then None
                                                                    else 
                                                                    if b27
                                                                    then 
                                                                    if b28
                                                                    then 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then 
                                                                    if b32
                                                                    then None
                                                                    else 
                                                                    if b33
                                                                    then None
                                                                    else 
                                                                    if b34
                                                                    then 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then 
                                                                    if b40
                                                                    then None
                                                                    else 
                                                                    if b41
                                                                    then None
                                                                    else 
                                                                    if b42
                                                                    then None
                                                                    else 
                                                                    if b43
                                                                    then None
                                                                    else 
                                                                    if b44
                                                                    then 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    None
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then None
                                                                    else 
                                                                    if b48
                                                                    then None
                                                                    else 
                                                                    if b49
                                                                    then 
                                                                    if b50
                                                                    then 
                                                                    if b51
                                                                    then None
                                                                    else 
                                                                    if b52
                                                                    then 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    Some
                                                                    BlockEquivChecker.SLoadSolver_Trivial
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None
                                                                    else None
                                                        else None)
                                                   a0)
                                    else None
                               else None
                          else None
                else None)
      a

  (** val parse_sstack_value_cmp :
      char list -> BlockEquivChecker.available_sstack_val_cmp option **)

  let parse_sstack_value_cmp = function
  | [] -> None
  | a::s0 ->
    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
      (fun b b0 b1 b2 b3 b4 b5 b6 ->
      if b
      then None
      else if b0
           then if b1
                then None
                else if b2
                     then None
                     else if b3
                          then None
                          else if b4
                               then if b5
                                    then if b6
                                         then None
                                         else (match s0 with
                                               | [] -> None
                                               | a0::s1 ->
                                                 (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                   (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                   if b7
                                                   then if b8
                                                        then None
                                                        else if b9
                                                             then None
                                                             else if b10
                                                                  then None
                                                                  else 
                                                                    if b11
                                                                    then None
                                                                    else 
                                                                    if b12
                                                                    then 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then 
                                                                    if b16
                                                                    then 
                                                                    if b17
                                                                    then None
                                                                    else 
                                                                    if b18
                                                                    then None
                                                                    else 
                                                                    if b19
                                                                    then 
                                                                    if b20
                                                                    then 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then 
                                                                    if b24
                                                                    then None
                                                                    else 
                                                                    if b25
                                                                    then None
                                                                    else 
                                                                    if b26
                                                                    then 
                                                                    if b27
                                                                    then None
                                                                    else 
                                                                    if b28
                                                                    then 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then 
                                                                    if b32
                                                                    then 
                                                                    if b33
                                                                    then None
                                                                    else 
                                                                    if b34
                                                                    then None
                                                                    else 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    Some
                                                                    BlockEquivChecker.SStackValCmp_Basic
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None
                                                   else None)
                                                   a0)
                                    else None
                               else None
           else if b1
                then if b2
                     then None
                     else if b3
                          then if b4
                               then if b5
                                    then if b6
                                         then None
                                         else (match s0 with
                                               | [] -> None
                                               | a0::s1 ->
                                                 (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                   (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                   if b7
                                                   then None
                                                   else if b8
                                                        then if b9
                                                             then None
                                                             else if b10
                                                                  then None
                                                                  else 
                                                                    if b11
                                                                    then 
                                                                    if b12
                                                                    then 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then 
                                                                    if b16
                                                                    then None
                                                                    else 
                                                                    if b17
                                                                    then None
                                                                    else 
                                                                    if b18
                                                                    then 
                                                                    if b19
                                                                    then None
                                                                    else 
                                                                    if b20
                                                                    then 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then None
                                                                    else 
                                                                    if b24
                                                                    then 
                                                                    if b25
                                                                    then 
                                                                    if b26
                                                                    then None
                                                                    else 
                                                                    if b27
                                                                    then 
                                                                    if b28
                                                                    then 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then 
                                                                    if b32
                                                                    then None
                                                                    else 
                                                                    if b33
                                                                    then None
                                                                    else 
                                                                    if b34
                                                                    then 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then 
                                                                    if b40
                                                                    then None
                                                                    else 
                                                                    if b41
                                                                    then None
                                                                    else 
                                                                    if b42
                                                                    then None
                                                                    else 
                                                                    if b43
                                                                    then None
                                                                    else 
                                                                    if b44
                                                                    then 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    None
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then None
                                                                    else 
                                                                    if b48
                                                                    then None
                                                                    else 
                                                                    if b49
                                                                    then 
                                                                    if b50
                                                                    then 
                                                                    if b51
                                                                    then None
                                                                    else 
                                                                    if b52
                                                                    then 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    Some
                                                                    BlockEquivChecker.SStackValCmp_Trivial
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None
                                                                    else None
                                                        else None)
                                                   a0)
                                    else None
                               else None
                          else None
                else None)
      a

  (** val parse_memory_cmp :
      char list -> BlockEquivChecker.available_memory_cmp option **)

  let parse_memory_cmp = function
  | [] -> None
  | a::s0 ->
    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
      (fun b b0 b1 b2 b3 b4 b5 b6 ->
      if b
      then None
      else if b0
           then if b1
                then None
                else if b2
                     then None
                     else if b3
                          then None
                          else if b4
                               then if b5
                                    then if b6
                                         then None
                                         else (match s0 with
                                               | [] -> None
                                               | a0::s1 ->
                                                 (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                   (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                   if b7
                                                   then if b8
                                                        then None
                                                        else if b9
                                                             then None
                                                             else if b10
                                                                  then None
                                                                  else 
                                                                    if b11
                                                                    then None
                                                                    else 
                                                                    if b12
                                                                    then 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then 
                                                                    if b16
                                                                    then 
                                                                    if b17
                                                                    then None
                                                                    else 
                                                                    if b18
                                                                    then None
                                                                    else 
                                                                    if b19
                                                                    then 
                                                                    if b20
                                                                    then 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then 
                                                                    if b24
                                                                    then None
                                                                    else 
                                                                    if b25
                                                                    then None
                                                                    else 
                                                                    if b26
                                                                    then 
                                                                    if b27
                                                                    then None
                                                                    else 
                                                                    if b28
                                                                    then 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then 
                                                                    if b32
                                                                    then 
                                                                    if b33
                                                                    then None
                                                                    else 
                                                                    if b34
                                                                    then None
                                                                    else 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    Some
                                                                    BlockEquivChecker.SMemCmp_Basic
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None
                                                   else None)
                                                   a0)
                                    else None
                               else None
           else if b1
                then if b2
                     then None
                     else if b3
                          then if b4
                               then if b5
                                    then if b6
                                         then None
                                         else (match s0 with
                                               | [] -> None
                                               | a0::s1 ->
                                                 (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                   (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                   if b7
                                                   then None
                                                   else if b8
                                                        then if b9
                                                             then None
                                                             else if b10
                                                                  then None
                                                                  else 
                                                                    if b11
                                                                    then 
                                                                    if b12
                                                                    then 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then 
                                                                    if b16
                                                                    then None
                                                                    else 
                                                                    if b17
                                                                    then None
                                                                    else 
                                                                    if b18
                                                                    then 
                                                                    if b19
                                                                    then None
                                                                    else 
                                                                    if b20
                                                                    then 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then None
                                                                    else 
                                                                    if b24
                                                                    then 
                                                                    if b25
                                                                    then 
                                                                    if b26
                                                                    then None
                                                                    else 
                                                                    if b27
                                                                    then 
                                                                    if b28
                                                                    then 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then 
                                                                    if b32
                                                                    then None
                                                                    else 
                                                                    if b33
                                                                    then None
                                                                    else 
                                                                    if b34
                                                                    then 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then 
                                                                    if b40
                                                                    then None
                                                                    else 
                                                                    if b41
                                                                    then None
                                                                    else 
                                                                    if b42
                                                                    then None
                                                                    else 
                                                                    if b43
                                                                    then None
                                                                    else 
                                                                    if b44
                                                                    then 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    None
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then None
                                                                    else 
                                                                    if b48
                                                                    then None
                                                                    else 
                                                                    if b49
                                                                    then 
                                                                    if b50
                                                                    then 
                                                                    if b51
                                                                    then None
                                                                    else 
                                                                    if b52
                                                                    then 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    Some
                                                                    BlockEquivChecker.SMemCmp_Trivial
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None
                                                                    else None
                                                        else None)
                                                   a0)
                                    else None
                               else None
                          else None
                else if b2
                     then None
                     else if b3
                          then if b4
                               then if b5
                                    then if b6
                                         then None
                                         else (match s0 with
                                               | [] -> None
                                               | a0::s1 ->
                                                 (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                   (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                   if b7
                                                   then if b8
                                                        then if b9
                                                             then if b10
                                                                  then 
                                                                    if b11
                                                                    then None
                                                                    else 
                                                                    if b12
                                                                    then 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    Some
                                                                    BlockEquivChecker.SMemCmp_PO
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                  else None
                                                             else None
                                                        else None
                                                   else None)
                                                   a0)
                                    else None
                               else None
                          else None)
      a

  (** val parse_storage_cmp :
      char list -> BlockEquivChecker.available_storage_cmp option **)

  let parse_storage_cmp = function
  | [] -> None
  | a::s0 ->
    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
      (fun b b0 b1 b2 b3 b4 b5 b6 ->
      if b
      then None
      else if b0
           then if b1
                then None
                else if b2
                     then None
                     else if b3
                          then None
                          else if b4
                               then if b5
                                    then if b6
                                         then None
                                         else (match s0 with
                                               | [] -> None
                                               | a0::s1 ->
                                                 (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                   (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                   if b7
                                                   then if b8
                                                        then None
                                                        else if b9
                                                             then None
                                                             else if b10
                                                                  then None
                                                                  else 
                                                                    if b11
                                                                    then None
                                                                    else 
                                                                    if b12
                                                                    then 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then 
                                                                    if b16
                                                                    then 
                                                                    if b17
                                                                    then None
                                                                    else 
                                                                    if b18
                                                                    then None
                                                                    else 
                                                                    if b19
                                                                    then 
                                                                    if b20
                                                                    then 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then 
                                                                    if b24
                                                                    then None
                                                                    else 
                                                                    if b25
                                                                    then None
                                                                    else 
                                                                    if b26
                                                                    then 
                                                                    if b27
                                                                    then None
                                                                    else 
                                                                    if b28
                                                                    then 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then 
                                                                    if b32
                                                                    then 
                                                                    if b33
                                                                    then None
                                                                    else 
                                                                    if b34
                                                                    then None
                                                                    else 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    Some
                                                                    BlockEquivChecker.SStrgCmp_Basic
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None
                                                   else None)
                                                   a0)
                                    else None
                               else None
           else if b1
                then if b2
                     then None
                     else if b3
                          then if b4
                               then if b5
                                    then if b6
                                         then None
                                         else (match s0 with
                                               | [] -> None
                                               | a0::s1 ->
                                                 (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                   (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                   if b7
                                                   then None
                                                   else if b8
                                                        then if b9
                                                             then None
                                                             else if b10
                                                                  then None
                                                                  else 
                                                                    if b11
                                                                    then 
                                                                    if b12
                                                                    then 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then 
                                                                    if b16
                                                                    then None
                                                                    else 
                                                                    if b17
                                                                    then None
                                                                    else 
                                                                    if b18
                                                                    then 
                                                                    if b19
                                                                    then None
                                                                    else 
                                                                    if b20
                                                                    then 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then None
                                                                    else 
                                                                    if b24
                                                                    then 
                                                                    if b25
                                                                    then 
                                                                    if b26
                                                                    then None
                                                                    else 
                                                                    if b27
                                                                    then 
                                                                    if b28
                                                                    then 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then 
                                                                    if b32
                                                                    then None
                                                                    else 
                                                                    if b33
                                                                    then None
                                                                    else 
                                                                    if b34
                                                                    then 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then 
                                                                    if b40
                                                                    then None
                                                                    else 
                                                                    if b41
                                                                    then None
                                                                    else 
                                                                    if b42
                                                                    then None
                                                                    else 
                                                                    if b43
                                                                    then None
                                                                    else 
                                                                    if b44
                                                                    then 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    None
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then None
                                                                    else 
                                                                    if b48
                                                                    then None
                                                                    else 
                                                                    if b49
                                                                    then 
                                                                    if b50
                                                                    then 
                                                                    if b51
                                                                    then None
                                                                    else 
                                                                    if b52
                                                                    then 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    Some
                                                                    BlockEquivChecker.SStrgCmp_Trivial
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None
                                                                    else None
                                                        else None)
                                                   a0)
                                    else None
                               else None
                          else None
                else if b2
                     then None
                     else if b3
                          then if b4
                               then if b5
                                    then if b6
                                         then None
                                         else (match s0 with
                                               | [] -> None
                                               | a0::s1 ->
                                                 (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                   (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                   if b7
                                                   then if b8
                                                        then if b9
                                                             then if b10
                                                                  then 
                                                                    if b11
                                                                    then None
                                                                    else 
                                                                    if b12
                                                                    then 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    Some
                                                                    BlockEquivChecker.SStrgCmp_PO
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                  else None
                                                             else None
                                                        else None
                                                   else None)
                                                   a0)
                                    else None
                               else None
                          else None)
      a

  (** val parse_sha3_cmp : char list -> __ option **)

  let parse_sha3_cmp = function
  | [] -> None
  | a::s0 ->
    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
      (fun b b0 b1 b2 b3 b4 b5 b6 ->
      if b
      then None
      else if b0
           then None
           else if b1
                then if b2
                     then None
                     else if b3
                          then if b4
                               then if b5
                                    then if b6
                                         then None
                                         else (match s0 with
                                               | [] -> None
                                               | a0::s1 ->
                                                 (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                   (fun b7 b8 b9 b10 b11 b12 b13 b14 ->
                                                   if b7
                                                   then None
                                                   else if b8
                                                        then if b9
                                                             then None
                                                             else if b10
                                                                  then None
                                                                  else 
                                                                    if b11
                                                                    then 
                                                                    if b12
                                                                    then 
                                                                    if b13
                                                                    then 
                                                                    if b14
                                                                    then None
                                                                    else 
                                                                    (match s1 with
                                                                    | [] ->
                                                                    None
                                                                    | a1::s2 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b15 b16 b17 b18 b19 b20 b21 b22 ->
                                                                    if b15
                                                                    then 
                                                                    if b16
                                                                    then None
                                                                    else 
                                                                    if b17
                                                                    then None
                                                                    else 
                                                                    if b18
                                                                    then 
                                                                    if b19
                                                                    then None
                                                                    else 
                                                                    if b20
                                                                    then 
                                                                    if b21
                                                                    then 
                                                                    if b22
                                                                    then None
                                                                    else 
                                                                    (match s2 with
                                                                    | [] ->
                                                                    None
                                                                    | a2::s3 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b23 b24 b25 b26 b27 b28 b29 b30 ->
                                                                    if b23
                                                                    then None
                                                                    else 
                                                                    if b24
                                                                    then 
                                                                    if b25
                                                                    then 
                                                                    if b26
                                                                    then None
                                                                    else 
                                                                    if b27
                                                                    then 
                                                                    if b28
                                                                    then 
                                                                    if b29
                                                                    then 
                                                                    if b30
                                                                    then None
                                                                    else 
                                                                    (match s3 with
                                                                    | [] ->
                                                                    None
                                                                    | a3::s4 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b31 b32 b33 b34 b35 b36 b37 b38 ->
                                                                    if b31
                                                                    then 
                                                                    if b32
                                                                    then None
                                                                    else 
                                                                    if b33
                                                                    then None
                                                                    else 
                                                                    if b34
                                                                    then 
                                                                    if b35
                                                                    then None
                                                                    else 
                                                                    if b36
                                                                    then 
                                                                    if b37
                                                                    then 
                                                                    if b38
                                                                    then None
                                                                    else 
                                                                    (match s4 with
                                                                    | [] ->
                                                                    None
                                                                    | a4::s5 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b39 b40 b41 b42 b43 b44 b45 b46 ->
                                                                    if b39
                                                                    then 
                                                                    if b40
                                                                    then None
                                                                    else 
                                                                    if b41
                                                                    then None
                                                                    else 
                                                                    if b42
                                                                    then None
                                                                    else 
                                                                    if b43
                                                                    then None
                                                                    else 
                                                                    if b44
                                                                    then 
                                                                    if b45
                                                                    then 
                                                                    if b46
                                                                    then None
                                                                    else 
                                                                    (match s5 with
                                                                    | [] ->
                                                                    None
                                                                    | a5::s6 ->
                                                                    (* If this appears, you're using Ascii internals. Please don't *)
 (fun f c ->
  let n = Char.code c in
  let h i = (n land (1 lsl i)) <> 0 in
  f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
                                                                    (fun b47 b48 b49 b50 b51 b52 b53 b54 ->
                                                                    if b47
                                                                    then None
                                                                    else 
                                                                    if b48
                                                                    then None
                                                                    else 
                                                                    if b49
                                                                    then 
                                                                    if b50
                                                                    then 
                                                                    if b51
                                                                    then None
                                                                    else 
                                                                    if b52
                                                                    then 
                                                                    if b53
                                                                    then 
                                                                    if b54
                                                                    then None
                                                                    else 
                                                                    (match s6 with
                                                                    | [] ->
                                                                    Some __
                                                                    | _::_ ->
                                                                    None)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a5)
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a4)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a3)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a2)
                                                                    else None
                                                                    else None
                                                                    else None
                                                                    else None)
                                                                    a1)
                                                                    else None
                                                                    else None
                                                                    else None
                                                        else None)
                                                   a0)
                                    else None
                               else None
                          else None
                else None)
      a

  (** val block_eq :
      char list -> char list -> char list -> char list -> char list ->
      char list -> char list -> char list -> char list -> char list ->
      char list list -> (char list -> char list -> char list -> bool option)
      option **)

  let block_eq memory_updater storage_updater mload_solver sload_solver sstack_value_cmp memory_cmp storage_cmp sha3_cmp opt_step_rep opt_pipeline_rep opts_to_apply =
    match parse_memory_updater memory_updater with
    | Some memory_updater_tag ->
      (match parse_storage_updater storage_updater with
       | Some storage_updater_tag ->
         (match parse_mload_solver mload_solver with
          | Some mload_solver_tag ->
            (match parse_sload_solver sload_solver with
             | Some sload_solver_tag ->
               (match parse_sstack_value_cmp sstack_value_cmp with
                | Some sstack_value_cmp_tag ->
                  (match parse_memory_cmp memory_cmp with
                   | Some memory_cmp_tag ->
                     (match parse_storage_cmp storage_cmp with
                      | Some storage_cmp_tag ->
                        (match parse_sha3_cmp sha3_cmp with
                         | Some _ ->
                           (match parseDecNumber opt_step_rep with
                            | Some opt_step_rep_nat ->
                              (match parseDecNumber opt_pipeline_rep with
                               | Some opt_pipeline_rep_nat ->
                                 (match parse_opts_arg opts_to_apply with
                                  | Some optimization_steps ->
                                    let chkr_lazy =
                                      BlockEquivChecker.evm_eq_block_chkr_lazy
                                        memory_updater_tag
                                        storage_updater_tag mload_solver_tag
                                        sload_solver_tag sstack_value_cmp_tag
                                        memory_cmp_tag storage_cmp_tag
                                        optimization_steps opt_step_rep_nat
                                        opt_pipeline_rep_nat
                                    in
                                    Some (fun p_opt p k ->
                                    match parse_block p_opt with
                                    | Some b1 ->
                                      (match parse_block p with
                                       | Some b2 ->
                                         (match parseDecNumber k with
                                          | Some k_nat ->
                                            Some (chkr_lazy b1 b2 k_nat)
                                          | None -> None)
                                       | None -> None)
                                    | None -> None)
                                  | None -> None)
                               | None -> None)
                            | None -> None)
                         | None -> None)
                      | None -> None)
                   | None -> None)
                | None -> None)
             | None -> None)
          | None -> None)
       | None -> None)
    | None -> None
 end
